---
subcategory : "Load Balancer (Public Cloud / Octavia)"
---

{{/* This template serves as a starting point for documentation generation, and can be customized with hardcoded values and/or doc gen templates.

For example, the {{ .SchemaMarkdown }} template can be used to replace manual schema documentation if descriptions of schema attributes are added in the provider source code. */ -}}

# ovh_cloud_project_loadbalancer

## Example Usage

{{tffile "examples/resources/cloud_project_loadbalancer/example_1.tf"}}

### Example usage with network and subnet creation

{{tffile "examples/resources/cloud_project_loadbalancer/example_2.tf"}}

<!-- schema generated by tfplugindocs -->

## Schema

### Required

- `flavor_id` (String) Loadbalancer flavor id
- `network` (Attributes) Network information to create the loadbalancer (see [below for nested schema](#nestedatt--network))
- `region_name` (String) Region name
- `service_name` (String) Service name

### Optional

- `description` (String) Description of the loadbalancer
- `listeners` (Attributes List) Listeners to create with the loadbalancer (see [below for nested schema](#nestedatt--listeners))
- `name` (String) Name of the resource

### Read-Only

- `created_at` (String) The UTC date and timestamp when the resource was created
- `floating_ip` (Attributes) Information about floating IP (see [below for nested schema](#nestedatt--floating_ip))
- `id` (String) ID of the resource
- `operating_status` (String) Operating status of the resource
- `provisioning_status` (String) Provisioning status of the resource
- `region` (String) Region of the resource
- `updated_at` (String) UTC date and timestamp when the resource was created
- `vip_address` (String) IP address of the Virtual IP
- `vip_network_id` (String) Openstack ID of the network for the Virtual IP
- `vip_subnet_id` (String) ID of the subnet for the Virtual IP

<a id="nestedatt--network"></a>

### Nested Schema for `network`

Required:

- `private` (Attributes) Information to private network (see [below for nested schema](#nestedatt--network--private))

<a id="nestedatt--network--private"></a>

### Nested Schema for `network.private`

Required:

- `network` (Attributes) Network to associate (see [below for nested schema](#nestedatt--network--private--network))

Optional:

- `floating_ip` (Attributes) Floating IP to associate (see [below for nested schema](#nestedatt--network--private--floating_ip))
- `floating_ip_create` (Attributes) Floating IP to create (see [below for nested schema](#nestedatt--network--private--floating_ip_create))
- `gateway` (Attributes) Gateway to associate (see [below for nested schema](#nestedatt--network--private--gateway))
- `gateway_create` (Attributes) Gateway to create (see [below for nested schema](#nestedatt--network--private--gateway_create))

<a id="nestedatt--network--private--network"></a>

### Nested Schema for `network.private.network`

Required:

- `id` (String) Private network ID
- `subnet_id` (String) Subnet ID

<a id="nestedatt--network--private--floating_ip"></a>

### Nested Schema for `network.private.floating_ip`

Optional:

- `id` (String) ID of the floatingIp

<a id="nestedatt--network--private--floating_ip_create"></a>

### Nested Schema for `network.private.floating_ip_create`

Optional:

- `description` (String) Description for the floatingIp

<a id="nestedatt--network--private--gateway"></a>

### Nested Schema for `network.private.gateway`

Optional:

- `id` (String) ID of the gateway

<a id="nestedatt--network--private--gateway_create"></a>

### Nested Schema for `network.private.gateway_create`

Optional:

- `model` (String) Model of the gateway
- `name` (String) Name of the gateway

<a id="nestedatt--listeners"></a>

### Nested Schema for `listeners`

Required:

- `port` (Number) Listener port
- `protocol` (String) Protocol for the listener

Optional:

- `allowed_cidrs` (List of String) The allowed CIDRs
- `description` (String) The description of the listener
- `name` (String) Name of the listener
- `pool` (Attributes) Listener pool (see [below for nested schema](#nestedatt--listeners--pool))
- `secret_id` (String) Secret ID to get certificate for SSL listener creation
- `timeout_client_data` (Number) Timeout client data of the listener
- `timeout_member_data` (Number) Timeout member data of the listener
- `tls_versions` (List of String) TLS versions of the listener

<a id="nestedatt--listeners--pool"></a>

### Nested Schema for `listeners.pool`

Optional:

- `algorithm` (String) Pool algorithm to split traffic between members
- `health_monitor` (Attributes) Pool health monitor (see [below for nested schema](#nestedatt--listeners--pool--health_monitor))
- `members` (Attributes List) Pool members (see [below for nested schema](#nestedatt--listeners--pool--members))
- `name` (String) Name of the pool
- `protocol` (String) Protocol for the pool
- `session_persistence` (Attributes) Pool session persistence (see [below for nested schema](#nestedatt--listeners--pool--session_persistence))

<a id="nestedatt--listeners--pool--health_monitor"></a>

### Nested Schema for `listeners.pool.health_monitor`

Optional:

- `delay` (Number) Duration between sending probes to members, in seconds
- `http_configuration` (Attributes) Monitor HTTP configuration (see [below for nested schema](#nestedatt--listeners--pool--health_monitor--http_configuration))
- `max_retries` (Number) Number of successful checks before changing the operating status of the member to ONLINE
- `max_retries_down` (Number) Number of allowed check failures before changing the operating status of the member to ERROR
- `monitor_type` (String) Type of the monitor
- `name` (String) The name of the resource
- `operating_status` (String) The operating status of the resource
- `provisioning_status` (String) The provisioning status of the resource
- `timeout` (Number) Maximum time, in seconds, that a monitor waits to connect before it times out. This value must be less than the delay value

<a id="nestedatt--listeners--pool--health_monitor--http_configuration"></a>

### Nested Schema for `listeners.pool.health_monitor.http_configuration`

Optional:

- `domain_name` (String) Domain name, which be injected into the HTTP Host Header to the backend server for HTTP health check
- `expected_codes` (String) Status codes expected in response from the member to declare it healthy; The list of HTTP status codes expected in response from the member to declare it healthy. Specify one of the following values: * A single value, such as 200; * A list, such as 200, 202; * A range, such as 200-204
- `http_method` (String) HTTP method that the health monitor uses for requests
- `http_version` (String) HTTP version that the health monitor uses for requests
- `url_path` (String) HTTP URL path of the request sent by the monitor to test the health of a backend member

<a id="nestedatt--listeners--pool--members"></a>

### Nested Schema for `listeners.pool.members`

Optional:

- `address` (String) IP address of the resource
- `name` (String) Name of the member
- `protocol_port` (Number) Protocol port number for the resource
- `weight` (Number) Weight of a member determines the portion of requests or connections it services compared to the other members of the pool. Between 1 and 256.

<a id="nestedatt--listeners--pool--session_persistence"></a>

### Nested Schema for `listeners.pool.session_persistence`

Optional:

- `cookie_name` (String) Cookie name, only applicable to session persistence through cookie
- `type` (String) Type of session persistence

<a id="nestedatt--floating_ip"></a>

### Nested Schema for `floating_ip`

Read-Only:

- `id` (String) ID of the resource
- `ip` (String) IP Address of the resource

## Import

A load balancer in a public cloud project can be imported using the `service_name`, `region_name` and `id` attributes. Using the following configuration:

{{tffile "examples/resources/cloud_project_loadbalancer/example_3.tf"}}

You can then run:

```bash
$ terraform plan -generate-config-out=lb.tf
$ terraform apply
```

The file `lb.tf` will then contain the imported resource's configuration, that can be copied next to the `import` block above. See https://developer.hashicorp.com/terraform/language/import/generating-configuration for more details.
