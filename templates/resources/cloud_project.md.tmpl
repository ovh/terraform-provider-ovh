---
subcategory: "Cloud Project"
---

{{/* This template serves as a starting point for documentation generation, and can be customized with hardcoded values and/or doc gen templates.

For example, the {{ .SchemaMarkdown }} template can be used to replace manual schema documentation if descriptions of schema attributes are added in the provider source code. */ -}}

# ovh_cloud_project

Orders a public cloud project.

## Important

-> **NOTE** To order a product through Terraform, your account needs to have a default payment method defined. This can be done in the [OVHcloud Control Panel](https://www.ovh.com/manager/#/dedicated/billing/payment/method) or via API with the [/me/payment/method](https://api.ovh.com/console/#/me/payment/method~GET) endpoint.

~> **WARNING** `BANK_ACCOUNT` is not supported anymore, please update your default payment method to `SEPA_DIRECT_DEBIT`

## Example Usage

{{tffile "examples/resources/cloud_project/example_1.tf"}}

-> **WARNING** Currently, the OVHcloud Terraform provider does not support deletion of a public cloud project in the US. Removal is possible by manually deleting the project and then manually removing the public cloud project from terraform state.

## HDS Certification

If you want to add the certification HDS option at project creation (you must have a business support level on your account), you can add hds datasource and the plan_option configuration on the `ovh_cloud_project`.

{{tffile "examples/resources/cloud_project/example_2.tf"}}

## Associate an existing vRack to a new cloud project

You may want to associate an already-existing vRack to the cloud project at creation time. To do so, you can use the following plan configuration:

{{tffile "examples/resources/cloud_project/example_3.tf"}}

## Argument Reference

The following arguments are supported:

- `urn` - The URN of the cloud project
- `description` - A description associated with the user.
- `ovh_subsidiary` - (Required) OVHcloud Subsidiary. Country of OVHcloud legal entity you'll be billed by. List of supported subsidiaries available on API at [/1.0/me.json under `models.nichandle.OvhSubsidiaryEnum`](https://eu.api.ovh.com/1.0/me.json)
- `plan` - (Required) Product Plan to order
  - `duration` - (Required) duration
  - `plan_code` - (Required) Plan code. This value must be adapted depending on your `OVH_ENDPOINT` value. It's `project.2018` for `ovh-{eu,ca}` and `project` when using `ovh-us`.
  - `pricing_mode` - (Required) Pricing model identifier
  - `catalog_name` - Catalog name
  - `configuration` - (Optional) Representation of a configuration item for personalizing product
    - `label` - (Required) Identifier of the resource
    - `value` - (Required) Path to the resource in API.OVH.COM
- `plan_option` - (Optional) Product Plan to order
  - `duration` - (Required) duration
  - `plan_code` - (Required) Plan code
  - `pricing_mode` - (Required) Pricing model identifier
  - `catalog_name` - Catalog name
  - `configuration` - (Optional) Representation of a configuration item for personalizing product
    - `label` - (Required) Identifier of the resource
    - `value` - (Required) Path to the resource in API.OVH.COM

## Attributes Reference

`id` is set to the order Id. In addition, the following attributes are exported:

- `access` - project access right for the identity that trigger the terraform script.
- `description` - Project description
- `order` - Details about the order that was used to create the public cloud project
  - `date` - date
  - `order_id` - order id, the same as the `id`
  - `expiration_date` - expiration date
  - `details` - Information about a Bill entry
    - `description` - description
    - `order_detail_id` - order detail id
    - `domain` - expiration date
    - `quantity` - quantity
- `project_name` - openstack project name
- `project_id` - openstack project id
- `status` - project status

## Import

Cloud project can be imported using the `project_id`.

Using the following configuration:

{{tffile "examples/resources/cloud_project/example_4.tf"}}

You can then run:

```bash
$ terraform plan -generate-config-out=cloudproject.tf
$ terraform apply
```

The file `cloudproject.tf` will then contain the imported resource's configuration, that can be copied next to the `import` block above. See https://developer.hashicorp.com/terraform/language/import/generating-configuration for more details.
