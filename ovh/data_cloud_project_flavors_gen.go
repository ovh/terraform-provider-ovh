// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	ovhtypes "github.com/ovh/terraform-provider-ovh/ovh/types"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func CloudProjectFlavorsDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"flavors": schema.SetNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"available": schema.BoolAttribute{
						CustomType:          ovhtypes.TfBoolType{},
						Computed:            true,
						Description:         "Available in stock",
						MarkdownDescription: "Available in stock",
					},
					"capabilities": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"enabled": schema.BoolAttribute{
									CustomType:          ovhtypes.TfBoolType{},
									Computed:            true,
									Description:         "Is the capability enabled",
									MarkdownDescription: "Is the capability enabled",
								},
								"name": schema.StringAttribute{
									CustomType:          ovhtypes.TfStringType{},
									Computed:            true,
									Description:         "Name of the capability",
									MarkdownDescription: "Name of the capability",
								},
							},
							CustomType: CloudProjectFlavorCapabilitiesType{
								ObjectType: types.ObjectType{
									AttrTypes: CloudProjectFlavorCapabilitiesValue{}.AttributeTypes(ctx),
								},
							},
						},
						CustomType:          ovhtypes.NewTfListNestedType[CloudProjectFlavorCapabilitiesValue](ctx),
						Computed:            true,
						Description:         "Capabilities of the flavor",
						MarkdownDescription: "Capabilities of the flavor",
					},
					"disk": schema.Int64Attribute{
						CustomType:          ovhtypes.TfInt64Type{},
						Computed:            true,
						Description:         "Number of disks",
						MarkdownDescription: "Number of disks",
					},
					"id": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Flavor id",
						MarkdownDescription: "Flavor id",
					},
					"inbound_bandwidth": schema.Int64Attribute{
						CustomType:          ovhtypes.TfInt64Type{},
						Computed:            true,
						Description:         "Max capacity of inbound traffic in Mbit/s",
						MarkdownDescription: "Max capacity of inbound traffic in Mbit/s",
					},
					"name": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Flavor name",
						MarkdownDescription: "Flavor name",
					},
					"os_type": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "OS to install on",
						MarkdownDescription: "OS to install on",
					},
					"outbound_bandwidth": schema.Int64Attribute{
						CustomType:          ovhtypes.TfInt64Type{},
						Computed:            true,
						Description:         "Max capacity of outbound traffic in Mbit/s",
						MarkdownDescription: "Max capacity of outbound traffic in Mbit/s",
					},
					"plan_codes": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"hourly": schema.StringAttribute{
								CustomType:          ovhtypes.TfStringType{},
								Computed:            true,
								Description:         "Plan code to order hourly instance",
								MarkdownDescription: "Plan code to order hourly instance",
							},
							"monthly": schema.StringAttribute{
								CustomType:          ovhtypes.TfStringType{},
								Computed:            true,
								Description:         "Plan code to order monthly instance",
								MarkdownDescription: "Plan code to order monthly instance",
							},
						},
						CustomType: CloudProjectFlavorPlanCodesType{
							ObjectType: types.ObjectType{
								AttrTypes: CloudProjectFlavorPlanCodesValue{}.AttributeTypes(ctx),
							},
						},
						Computed:            true,
						Description:         "Plan codes to order instances",
						MarkdownDescription: "Plan codes to order instances",
					},
					"quota": schema.Int64Attribute{
						CustomType:          ovhtypes.TfInt64Type{},
						Computed:            true,
						Description:         "Number instance you can spawn with your actual quota",
						MarkdownDescription: "Number instance you can spawn with your actual quota",
					},
					"ram": schema.Int64Attribute{
						CustomType:          ovhtypes.TfInt64Type{},
						Computed:            true,
						Description:         "Ram quantity (Gio)",
						MarkdownDescription: "Ram quantity (Gio)",
					},
					"region": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Flavor region",
						MarkdownDescription: "Flavor region",
					},
					"type": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Flavor type",
						MarkdownDescription: "Flavor type",
					},
					"vcpus": schema.Int64Attribute{
						CustomType:          ovhtypes.TfInt64Type{},
						Computed:            true,
						Description:         "Number of VCPUs",
						MarkdownDescription: "Number of VCPUs",
					},
				},
				CustomType: CloudProjectFlavorType{
					ObjectType: types.ObjectType{
						AttrTypes: CloudProjectFlavorValue{}.AttributeTypes(ctx),
					},
				},
			},
			CustomType: ovhtypes.NewTfListNestedType[CloudProjectFlavorValue](ctx),
			Computed:   true,
		},
		"region": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Flavor region",
			MarkdownDescription: "Flavor region",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
	}

	return schema.Schema{
		Attributes: attrs,
	}
}

type CloudProjectFlavorsModel struct {
	Flavors     ovhtypes.TfListNestedValue[CloudProjectFlavorValue] `tfsdk:"flavors" json:"cloudProjectFlavor"`
	Region      ovhtypes.TfStringValue                              `tfsdk:"region" json:"region"`
	ServiceName ovhtypes.TfStringValue                              `tfsdk:"service_name" json:"serviceName"`
}

func (v *CloudProjectFlavorsModel) MergeWith(other *CloudProjectFlavorsModel) {
	if (v.Flavors.IsUnknown() || v.Flavors.IsNull()) && !other.Flavors.IsUnknown() {
		v.Flavors = other.Flavors
	}

	if (v.Region.IsUnknown() || v.Region.IsNull()) && !other.Region.IsUnknown() {
		v.Region = other.Region
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}
}

var _ basetypes.ObjectTypable = CloudProjectFlavorType{}

type CloudProjectFlavorType struct {
	basetypes.ObjectType
}

func (t CloudProjectFlavorType) Equal(o attr.Type) bool {
	other, ok := o.(CloudProjectFlavorType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CloudProjectFlavorType) String() string {
	return "CloudProjectFlavorType"
}

func (t CloudProjectFlavorType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	availableAttribute, ok := attributes["available"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`available is missing from object`)

		return nil, diags
	}

	availableVal, ok := availableAttribute.(ovhtypes.TfBoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`available expected to be ovhtypes.TfBoolValue, was: %T`, availableAttribute))
	}

	capabilitiesAttribute, ok := attributes["capabilities"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`capabilities is missing from object`)

		return nil, diags
	}

	capabilitiesVal, ok := capabilitiesAttribute.(ovhtypes.TfListNestedValue[CloudProjectFlavorCapabilitiesValue])

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`capabilities expected to be ovhtypes.TfListNestedValue[CloudProjectFlavorCapabilitiesValue], was: %T`, capabilitiesAttribute))
	}

	diskAttribute, ok := attributes["disk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disk is missing from object`)

		return nil, diags
	}

	diskVal, ok := diskAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disk expected to be ovhtypes.TfInt64Value, was: %T`, diskAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	inboundBandwidthAttribute, ok := attributes["inbound_bandwidth"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`inbound_bandwidth is missing from object`)

		return nil, diags
	}

	inboundBandwidthVal, ok := inboundBandwidthAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`inbound_bandwidth expected to be ovhtypes.TfInt64Value, was: %T`, inboundBandwidthAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be ovhtypes.TfStringValue, was: %T`, nameAttribute))
	}

	osTypeAttribute, ok := attributes["os_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`os_type is missing from object`)

		return nil, diags
	}

	osTypeVal, ok := osTypeAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`os_type expected to be ovhtypes.TfStringValue, was: %T`, osTypeAttribute))
	}

	outboundBandwidthAttribute, ok := attributes["outbound_bandwidth"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`outbound_bandwidth is missing from object`)

		return nil, diags
	}

	outboundBandwidthVal, ok := outboundBandwidthAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`outbound_bandwidth expected to be ovhtypes.TfInt64Value, was: %T`, outboundBandwidthAttribute))
	}

	planCodesAttribute, ok := attributes["plan_codes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plan_codes is missing from object`)

		return nil, diags
	}

	planCodesVal, ok := planCodesAttribute.(CloudProjectFlavorPlanCodesValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plan_codes expected to be CloudProjectFlavorPlanCodesValue, was: %T`, planCodesAttribute))
	}

	quotaAttribute, ok := attributes["quota"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`quota is missing from object`)

		return nil, diags
	}

	quotaVal, ok := quotaAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`quota expected to be ovhtypes.TfInt64Value, was: %T`, quotaAttribute))
	}

	ramAttribute, ok := attributes["ram"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ram is missing from object`)

		return nil, diags
	}

	ramVal, ok := ramAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ram expected to be ovhtypes.TfInt64Value, was: %T`, ramAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return nil, diags
	}

	regionVal, ok := regionAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be ovhtypes.TfStringValue, was: %T`, regionAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be ovhtypes.TfStringValue, was: %T`, typeAttribute))
	}

	vcpusAttribute, ok := attributes["vcpus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcpus is missing from object`)

		return nil, diags
	}

	vcpusVal, ok := vcpusAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcpus expected to be ovhtypes.TfInt64Value, was: %T`, vcpusAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CloudProjectFlavorValue{
		Available:              availableVal,
		Capabilities:           capabilitiesVal,
		Disk:                   diskVal,
		Id:                     idVal,
		InboundBandwidth:       inboundBandwidthVal,
		Name:                   nameVal,
		OsType:                 osTypeVal,
		OutboundBandwidth:      outboundBandwidthVal,
		PlanCodes:              planCodesVal,
		Quota:                  quotaVal,
		Ram:                    ramVal,
		Region:                 regionVal,
		CloudProjectFlavorType: typeVal,
		Vcpus:                  vcpusVal,
		state:                  attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectFlavorValueNull() CloudProjectFlavorValue {
	return CloudProjectFlavorValue{
		state: attr.ValueStateNull,
	}
}

func NewCloudProjectFlavorValueUnknown() CloudProjectFlavorValue {
	return CloudProjectFlavorValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCloudProjectFlavorValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CloudProjectFlavorValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CloudProjectFlavorValue Attribute Value",
				"While creating a CloudProjectFlavorValue value, a missing attribute value was detected. "+
					"A CloudProjectFlavorValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectFlavorValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CloudProjectFlavorValue Attribute Type",
				"While creating a CloudProjectFlavorValue value, an invalid attribute value was detected. "+
					"A CloudProjectFlavorValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectFlavorValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CloudProjectFlavorValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CloudProjectFlavorValue Attribute Value",
				"While creating a CloudProjectFlavorValue value, an extra attribute value was detected. "+
					"A CloudProjectFlavorValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CloudProjectFlavorValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCloudProjectFlavorValueUnknown(), diags
	}

	availableAttribute, ok := attributes["available"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`available is missing from object`)

		return NewCloudProjectFlavorValueUnknown(), diags
	}

	availableVal, ok := availableAttribute.(ovhtypes.TfBoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`available expected to be ovhtypes.TfBoolValue, was: %T`, availableAttribute))
	}

	capabilitiesAttribute, ok := attributes["capabilities"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`capabilities is missing from object`)

		return NewCloudProjectFlavorValueUnknown(), diags
	}

	capabilitiesVal, ok := capabilitiesAttribute.(ovhtypes.TfListNestedValue[CloudProjectFlavorCapabilitiesValue])

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`capabilities expected to be ovhtypes.TfListNestedValue[CloudProjectFlavorCapabilitiesValue], was: %T`, capabilitiesAttribute))
	}

	diskAttribute, ok := attributes["disk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disk is missing from object`)

		return NewCloudProjectFlavorValueUnknown(), diags
	}

	diskVal, ok := diskAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disk expected to be ovhtypes.TfInt64Value, was: %T`, diskAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewCloudProjectFlavorValueUnknown(), diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	inboundBandwidthAttribute, ok := attributes["inbound_bandwidth"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`inbound_bandwidth is missing from object`)

		return NewCloudProjectFlavorValueUnknown(), diags
	}

	inboundBandwidthVal, ok := inboundBandwidthAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`inbound_bandwidth expected to be ovhtypes.TfInt64Value, was: %T`, inboundBandwidthAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewCloudProjectFlavorValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be ovhtypes.TfStringValue, was: %T`, nameAttribute))
	}

	osTypeAttribute, ok := attributes["os_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`os_type is missing from object`)

		return NewCloudProjectFlavorValueUnknown(), diags
	}

	osTypeVal, ok := osTypeAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`os_type expected to be ovhtypes.TfStringValue, was: %T`, osTypeAttribute))
	}

	outboundBandwidthAttribute, ok := attributes["outbound_bandwidth"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`outbound_bandwidth is missing from object`)

		return NewCloudProjectFlavorValueUnknown(), diags
	}

	outboundBandwidthVal, ok := outboundBandwidthAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`outbound_bandwidth expected to be ovhtypes.TfInt64Value, was: %T`, outboundBandwidthAttribute))
	}

	planCodesAttribute, ok := attributes["plan_codes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plan_codes is missing from object`)

		return NewCloudProjectFlavorValueUnknown(), diags
	}

	planCodesVal, ok := planCodesAttribute.(CloudProjectFlavorPlanCodesValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plan_codes expected to be CloudProjectFlavorPlanCodesValue, was: %T`, planCodesAttribute))
	}

	quotaAttribute, ok := attributes["quota"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`quota is missing from object`)

		return NewCloudProjectFlavorValueUnknown(), diags
	}

	quotaVal, ok := quotaAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`quota expected to be ovhtypes.TfInt64Value, was: %T`, quotaAttribute))
	}

	ramAttribute, ok := attributes["ram"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ram is missing from object`)

		return NewCloudProjectFlavorValueUnknown(), diags
	}

	ramVal, ok := ramAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ram expected to be ovhtypes.TfInt64Value, was: %T`, ramAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return NewCloudProjectFlavorValueUnknown(), diags
	}

	regionVal, ok := regionAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be ovhtypes.TfStringValue, was: %T`, regionAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewCloudProjectFlavorValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be ovhtypes.TfStringValue, was: %T`, typeAttribute))
	}

	vcpusAttribute, ok := attributes["vcpus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcpus is missing from object`)

		return NewCloudProjectFlavorValueUnknown(), diags
	}

	vcpusVal, ok := vcpusAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcpus expected to be ovhtypes.TfInt64Value, was: %T`, vcpusAttribute))
	}

	if diags.HasError() {
		return NewCloudProjectFlavorValueUnknown(), diags
	}

	return CloudProjectFlavorValue{
		Available:              availableVal,
		Capabilities:           capabilitiesVal,
		Disk:                   diskVal,
		Id:                     idVal,
		InboundBandwidth:       inboundBandwidthVal,
		Name:                   nameVal,
		OsType:                 osTypeVal,
		OutboundBandwidth:      outboundBandwidthVal,
		PlanCodes:              planCodesVal,
		Quota:                  quotaVal,
		Ram:                    ramVal,
		Region:                 regionVal,
		CloudProjectFlavorType: typeVal,
		Vcpus:                  vcpusVal,
		state:                  attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectFlavorValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CloudProjectFlavorValue {
	object, diags := NewCloudProjectFlavorValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCloudProjectFlavorValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CloudProjectFlavorType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCloudProjectFlavorValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCloudProjectFlavorValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCloudProjectFlavorValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCloudProjectFlavorValueMust(CloudProjectFlavorValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CloudProjectFlavorType) ValueType(ctx context.Context) attr.Value {
	return CloudProjectFlavorValue{}
}

var _ basetypes.ObjectValuable = CloudProjectFlavorValue{}

type CloudProjectFlavorValue struct {
	Available              ovhtypes.TfBoolValue                                            `tfsdk:"available" json:"available"`
	Capabilities           ovhtypes.TfListNestedValue[CloudProjectFlavorCapabilitiesValue] `tfsdk:"capabilities" json:"capabilities"`
	Disk                   ovhtypes.TfInt64Value                                           `tfsdk:"disk" json:"disk"`
	Id                     ovhtypes.TfStringValue                                          `tfsdk:"id" json:"id"`
	InboundBandwidth       ovhtypes.TfInt64Value                                           `tfsdk:"inbound_bandwidth" json:"inboundBandwidth"`
	Name                   ovhtypes.TfStringValue                                          `tfsdk:"name" json:"name"`
	OsType                 ovhtypes.TfStringValue                                          `tfsdk:"os_type" json:"osType"`
	OutboundBandwidth      ovhtypes.TfInt64Value                                           `tfsdk:"outbound_bandwidth" json:"outboundBandwidth"`
	PlanCodes              CloudProjectFlavorPlanCodesValue                                `tfsdk:"plan_codes" json:"planCodes"`
	Quota                  ovhtypes.TfInt64Value                                           `tfsdk:"quota" json:"quota"`
	Ram                    ovhtypes.TfInt64Value                                           `tfsdk:"ram" json:"ram"`
	Region                 ovhtypes.TfStringValue                                          `tfsdk:"region" json:"region"`
	CloudProjectFlavorType ovhtypes.TfStringValue                                          `tfsdk:"type" json:"type"`
	Vcpus                  ovhtypes.TfInt64Value                                           `tfsdk:"vcpus" json:"vcpus"`
	state                  attr.ValueState
}

func (v *CloudProjectFlavorValue) UnmarshalJSON(data []byte) error {
	type JsonCloudProjectFlavorValue CloudProjectFlavorValue

	var tmp JsonCloudProjectFlavorValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.Available = tmp.Available
	v.Capabilities = tmp.Capabilities
	v.Disk = tmp.Disk
	v.Id = tmp.Id
	v.InboundBandwidth = tmp.InboundBandwidth
	v.Name = tmp.Name
	v.OsType = tmp.OsType
	v.OutboundBandwidth = tmp.OutboundBandwidth
	v.PlanCodes = tmp.PlanCodes
	v.Quota = tmp.Quota
	v.Ram = tmp.Ram
	v.Region = tmp.Region
	v.CloudProjectFlavorType = tmp.CloudProjectFlavorType
	v.Vcpus = tmp.Vcpus

	v.state = attr.ValueStateKnown

	return nil
}

func (v *CloudProjectFlavorValue) MergeWith(other *CloudProjectFlavorValue) {

	if (v.Available.IsUnknown() || v.Available.IsNull()) && !other.Available.IsUnknown() {
		v.Available = other.Available
	}

	if (v.Capabilities.IsUnknown() || v.Capabilities.IsNull()) && !other.Capabilities.IsUnknown() {
		v.Capabilities = other.Capabilities
	}

	if (v.Disk.IsUnknown() || v.Disk.IsNull()) && !other.Disk.IsUnknown() {
		v.Disk = other.Disk
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.InboundBandwidth.IsUnknown() || v.InboundBandwidth.IsNull()) && !other.InboundBandwidth.IsUnknown() {
		v.InboundBandwidth = other.InboundBandwidth
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.OsType.IsUnknown() || v.OsType.IsNull()) && !other.OsType.IsUnknown() {
		v.OsType = other.OsType
	}

	if (v.OutboundBandwidth.IsUnknown() || v.OutboundBandwidth.IsNull()) && !other.OutboundBandwidth.IsUnknown() {
		v.OutboundBandwidth = other.OutboundBandwidth
	}

	if (v.PlanCodes.IsUnknown() || v.PlanCodes.IsNull()) && !other.PlanCodes.IsUnknown() {
		v.PlanCodes = other.PlanCodes
	}

	if (v.Quota.IsUnknown() || v.Quota.IsNull()) && !other.Quota.IsUnknown() {
		v.Quota = other.Quota
	}

	if (v.Ram.IsUnknown() || v.Ram.IsNull()) && !other.Ram.IsUnknown() {
		v.Ram = other.Ram
	}

	if (v.Region.IsUnknown() || v.Region.IsNull()) && !other.Region.IsUnknown() {
		v.Region = other.Region
	}

	if (v.CloudProjectFlavorType.IsUnknown() || v.CloudProjectFlavorType.IsNull()) && !other.CloudProjectFlavorType.IsUnknown() {
		v.CloudProjectFlavorType = other.CloudProjectFlavorType
	}

	if (v.Vcpus.IsUnknown() || v.Vcpus.IsNull()) && !other.Vcpus.IsUnknown() {
		v.Vcpus = other.Vcpus
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v CloudProjectFlavorValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"available":         v.Available,
		"capabilities":      v.Capabilities,
		"disk":              v.Disk,
		"id":                v.Id,
		"inboundBandwidth":  v.InboundBandwidth,
		"name":              v.Name,
		"osType":            v.OsType,
		"outboundBandwidth": v.OutboundBandwidth,
		"planCodes":         v.PlanCodes,
		"quota":             v.Quota,
		"ram":               v.Ram,
		"region":            v.Region,
		"type":              v.CloudProjectFlavorType,
		"vcpus":             v.Vcpus,
	}
}
func (v CloudProjectFlavorValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 14)

	var val tftypes.Value
	var err error

	attrTypes["available"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["capabilities"] = basetypes.ListType{
		ElemType: CloudProjectFlavorCapabilitiesValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["disk"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["inbound_bandwidth"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["os_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["outbound_bandwidth"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["plan_codes"] = basetypes.ObjectType{
		AttrTypes: CloudProjectFlavorPlanCodesValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["quota"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["ram"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["region"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vcpus"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 14)

		val, err = v.Available.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["available"] = val

		val, err = v.Capabilities.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["capabilities"] = val

		val, err = v.Disk.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["disk"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.InboundBandwidth.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["inbound_bandwidth"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.OsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["os_type"] = val

		val, err = v.OutboundBandwidth.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["outbound_bandwidth"] = val

		val, err = v.PlanCodes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["plan_codes"] = val

		val, err = v.Quota.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["quota"] = val

		val, err = v.Ram.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ram"] = val

		val, err = v.Region.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["region"] = val

		val, err = v.CloudProjectFlavorType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.Vcpus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vcpus"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CloudProjectFlavorValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CloudProjectFlavorValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CloudProjectFlavorValue) String() string {
	return "CloudProjectFlavorValue"
}

func (v CloudProjectFlavorValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"available":          ovhtypes.TfBoolType{},
			"capabilities":       ovhtypes.NewTfListNestedType[CloudProjectFlavorCapabilitiesValue](ctx),
			"disk":               ovhtypes.TfInt64Type{},
			"id":                 ovhtypes.TfStringType{},
			"inbound_bandwidth":  ovhtypes.TfInt64Type{},
			"name":               ovhtypes.TfStringType{},
			"os_type":            ovhtypes.TfStringType{},
			"outbound_bandwidth": ovhtypes.TfInt64Type{},
			"plan_codes": CloudProjectFlavorPlanCodesType{
				basetypes.ObjectType{
					AttrTypes: CloudProjectFlavorPlanCodesValue{}.AttributeTypes(ctx),
				},
			},
			"quota":  ovhtypes.TfInt64Type{},
			"ram":    ovhtypes.TfInt64Type{},
			"region": ovhtypes.TfStringType{},
			"type":   ovhtypes.TfStringType{},
			"vcpus":  ovhtypes.TfInt64Type{},
		},
		map[string]attr.Value{
			"available":          v.Available,
			"capabilities":       v.Capabilities,
			"disk":               v.Disk,
			"id":                 v.Id,
			"inbound_bandwidth":  v.InboundBandwidth,
			"name":               v.Name,
			"os_type":            v.OsType,
			"outbound_bandwidth": v.OutboundBandwidth,
			"plan_codes":         v.PlanCodes,
			"quota":              v.Quota,
			"ram":                v.Ram,
			"region":             v.Region,
			"type":               v.CloudProjectFlavorType,
			"vcpus":              v.Vcpus,
		})

	return objVal, diags
}

func (v CloudProjectFlavorValue) Equal(o attr.Value) bool {
	other, ok := o.(CloudProjectFlavorValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Available.Equal(other.Available) {
		return false
	}

	if !v.Capabilities.Equal(other.Capabilities) {
		return false
	}

	if !v.Disk.Equal(other.Disk) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.InboundBandwidth.Equal(other.InboundBandwidth) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.OsType.Equal(other.OsType) {
		return false
	}

	if !v.OutboundBandwidth.Equal(other.OutboundBandwidth) {
		return false
	}

	if !v.PlanCodes.Equal(other.PlanCodes) {
		return false
	}

	if !v.Quota.Equal(other.Quota) {
		return false
	}

	if !v.Ram.Equal(other.Ram) {
		return false
	}

	if !v.Region.Equal(other.Region) {
		return false
	}

	if !v.CloudProjectFlavorType.Equal(other.CloudProjectFlavorType) {
		return false
	}

	if !v.Vcpus.Equal(other.Vcpus) {
		return false
	}

	return true
}

func (v CloudProjectFlavorValue) Type(ctx context.Context) attr.Type {
	return CloudProjectFlavorType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CloudProjectFlavorValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"available":          ovhtypes.TfBoolType{},
		"capabilities":       ovhtypes.NewTfListNestedType[CloudProjectFlavorCapabilitiesValue](ctx),
		"disk":               ovhtypes.TfInt64Type{},
		"id":                 ovhtypes.TfStringType{},
		"inbound_bandwidth":  ovhtypes.TfInt64Type{},
		"name":               ovhtypes.TfStringType{},
		"os_type":            ovhtypes.TfStringType{},
		"outbound_bandwidth": ovhtypes.TfInt64Type{},
		"plan_codes":         CloudProjectFlavorPlanCodesValue{}.Type(ctx),
		"quota":              ovhtypes.TfInt64Type{},
		"ram":                ovhtypes.TfInt64Type{},
		"region":             ovhtypes.TfStringType{},
		"type":               ovhtypes.TfStringType{},
		"vcpus":              ovhtypes.TfInt64Type{},
	}
}

var _ basetypes.ObjectTypable = CloudProjectFlavorCapabilitiesType{}

type CloudProjectFlavorCapabilitiesType struct {
	basetypes.ObjectType
}

func (t CloudProjectFlavorCapabilitiesType) Equal(o attr.Type) bool {
	other, ok := o.(CloudProjectFlavorCapabilitiesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CloudProjectFlavorCapabilitiesType) String() string {
	return "CloudProjectFlavorCapabilitiesType"
}

func (t CloudProjectFlavorCapabilitiesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(ovhtypes.TfBoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be ovhtypes.TfBoolValue, was: %T`, enabledAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be ovhtypes.TfStringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CloudProjectFlavorCapabilitiesValue{
		Enabled: enabledVal,
		Name:    nameVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectFlavorCapabilitiesValueNull() CloudProjectFlavorCapabilitiesValue {
	return CloudProjectFlavorCapabilitiesValue{
		state: attr.ValueStateNull,
	}
}

func NewCloudProjectFlavorCapabilitiesValueUnknown() CloudProjectFlavorCapabilitiesValue {
	return CloudProjectFlavorCapabilitiesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCloudProjectFlavorCapabilitiesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CloudProjectFlavorCapabilitiesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CloudProjectFlavorCapabilitiesValue Attribute Value",
				"While creating a CloudProjectFlavorCapabilitiesValue value, a missing attribute value was detected. "+
					"A CloudProjectFlavorCapabilitiesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectFlavorCapabilitiesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CloudProjectFlavorCapabilitiesValue Attribute Type",
				"While creating a CloudProjectFlavorCapabilitiesValue value, an invalid attribute value was detected. "+
					"A CloudProjectFlavorCapabilitiesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectFlavorCapabilitiesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CloudProjectFlavorCapabilitiesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CloudProjectFlavorCapabilitiesValue Attribute Value",
				"While creating a CloudProjectFlavorCapabilitiesValue value, an extra attribute value was detected. "+
					"A CloudProjectFlavorCapabilitiesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CloudProjectFlavorCapabilitiesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCloudProjectFlavorCapabilitiesValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewCloudProjectFlavorCapabilitiesValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(ovhtypes.TfBoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be ovhtypes.TfBoolValue, was: %T`, enabledAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewCloudProjectFlavorCapabilitiesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be ovhtypes.TfStringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewCloudProjectFlavorCapabilitiesValueUnknown(), diags
	}

	return CloudProjectFlavorCapabilitiesValue{
		Enabled: enabledVal,
		Name:    nameVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectFlavorCapabilitiesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CloudProjectFlavorCapabilitiesValue {
	object, diags := NewCloudProjectFlavorCapabilitiesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCloudProjectFlavorCapabilitiesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CloudProjectFlavorCapabilitiesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCloudProjectFlavorCapabilitiesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCloudProjectFlavorCapabilitiesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCloudProjectFlavorCapabilitiesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCloudProjectFlavorCapabilitiesValueMust(CloudProjectFlavorCapabilitiesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CloudProjectFlavorCapabilitiesType) ValueType(ctx context.Context) attr.Value {
	return CloudProjectFlavorCapabilitiesValue{}
}

var _ basetypes.ObjectValuable = CloudProjectFlavorCapabilitiesValue{}

type CloudProjectFlavorCapabilitiesValue struct {
	Enabled ovhtypes.TfBoolValue   `tfsdk:"enabled" json:"enabled"`
	Name    ovhtypes.TfStringValue `tfsdk:"name" json:"name"`
	state   attr.ValueState
}

func (v *CloudProjectFlavorCapabilitiesValue) UnmarshalJSON(data []byte) error {
	type JsonCloudProjectFlavorCapabilitiesValue CloudProjectFlavorCapabilitiesValue

	var tmp JsonCloudProjectFlavorCapabilitiesValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.Enabled = tmp.Enabled
	v.Name = tmp.Name

	v.state = attr.ValueStateKnown

	return nil
}

func (v *CloudProjectFlavorCapabilitiesValue) MergeWith(other *CloudProjectFlavorCapabilitiesValue) {

	if (v.Enabled.IsUnknown() || v.Enabled.IsNull()) && !other.Enabled.IsUnknown() {
		v.Enabled = other.Enabled
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v CloudProjectFlavorCapabilitiesValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"enabled": v.Enabled,
		"name":    v.Name,
	}
}
func (v CloudProjectFlavorCapabilitiesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CloudProjectFlavorCapabilitiesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CloudProjectFlavorCapabilitiesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CloudProjectFlavorCapabilitiesValue) String() string {
	return "CloudProjectFlavorCapabilitiesValue"
}

func (v CloudProjectFlavorCapabilitiesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"enabled": ovhtypes.TfBoolType{},
			"name":    ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"enabled": v.Enabled,
			"name":    v.Name,
		})

	return objVal, diags
}

func (v CloudProjectFlavorCapabilitiesValue) Equal(o attr.Value) bool {
	other, ok := o.(CloudProjectFlavorCapabilitiesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v CloudProjectFlavorCapabilitiesValue) Type(ctx context.Context) attr.Type {
	return CloudProjectFlavorCapabilitiesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CloudProjectFlavorCapabilitiesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled": ovhtypes.TfBoolType{},
		"name":    ovhtypes.TfStringType{},
	}
}

var _ basetypes.ObjectTypable = CloudProjectFlavorPlanCodesType{}

type CloudProjectFlavorPlanCodesType struct {
	basetypes.ObjectType
}

func (t CloudProjectFlavorPlanCodesType) Equal(o attr.Type) bool {
	other, ok := o.(CloudProjectFlavorPlanCodesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CloudProjectFlavorPlanCodesType) String() string {
	return "CloudProjectFlavorPlanCodesType"
}

func (t CloudProjectFlavorPlanCodesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	hourlyAttribute, ok := attributes["hourly"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hourly is missing from object`)

		return nil, diags
	}

	hourlyVal, ok := hourlyAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hourly expected to be ovhtypes.TfStringValue, was: %T`, hourlyAttribute))
	}

	monthlyAttribute, ok := attributes["monthly"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`monthly is missing from object`)

		return nil, diags
	}

	monthlyVal, ok := monthlyAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`monthly expected to be ovhtypes.TfStringValue, was: %T`, monthlyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CloudProjectFlavorPlanCodesValue{
		Hourly:  hourlyVal,
		Monthly: monthlyVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectFlavorPlanCodesValueNull() CloudProjectFlavorPlanCodesValue {
	return CloudProjectFlavorPlanCodesValue{
		state: attr.ValueStateNull,
	}
}

func NewCloudProjectFlavorPlanCodesValueUnknown() CloudProjectFlavorPlanCodesValue {
	return CloudProjectFlavorPlanCodesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCloudProjectFlavorPlanCodesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CloudProjectFlavorPlanCodesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CloudProjectFlavorPlanCodesValue Attribute Value",
				"While creating a CloudProjectFlavorPlanCodesValue value, a missing attribute value was detected. "+
					"A CloudProjectFlavorPlanCodesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectFlavorPlanCodesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CloudProjectFlavorPlanCodesValue Attribute Type",
				"While creating a CloudProjectFlavorPlanCodesValue value, an invalid attribute value was detected. "+
					"A CloudProjectFlavorPlanCodesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectFlavorPlanCodesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CloudProjectFlavorPlanCodesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CloudProjectFlavorPlanCodesValue Attribute Value",
				"While creating a CloudProjectFlavorPlanCodesValue value, an extra attribute value was detected. "+
					"A CloudProjectFlavorPlanCodesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CloudProjectFlavorPlanCodesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCloudProjectFlavorPlanCodesValueUnknown(), diags
	}

	hourlyAttribute, ok := attributes["hourly"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hourly is missing from object`)

		return NewCloudProjectFlavorPlanCodesValueUnknown(), diags
	}

	hourlyVal, ok := hourlyAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hourly expected to be ovhtypes.TfStringValue, was: %T`, hourlyAttribute))
	}

	monthlyAttribute, ok := attributes["monthly"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`monthly is missing from object`)

		return NewCloudProjectFlavorPlanCodesValueUnknown(), diags
	}

	monthlyVal, ok := monthlyAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`monthly expected to be ovhtypes.TfStringValue, was: %T`, monthlyAttribute))
	}

	if diags.HasError() {
		return NewCloudProjectFlavorPlanCodesValueUnknown(), diags
	}

	return CloudProjectFlavorPlanCodesValue{
		Hourly:  hourlyVal,
		Monthly: monthlyVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectFlavorPlanCodesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CloudProjectFlavorPlanCodesValue {
	object, diags := NewCloudProjectFlavorPlanCodesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCloudProjectFlavorPlanCodesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CloudProjectFlavorPlanCodesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCloudProjectFlavorPlanCodesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCloudProjectFlavorPlanCodesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCloudProjectFlavorPlanCodesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCloudProjectFlavorPlanCodesValueMust(CloudProjectFlavorPlanCodesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CloudProjectFlavorPlanCodesType) ValueType(ctx context.Context) attr.Value {
	return CloudProjectFlavorPlanCodesValue{}
}

var _ basetypes.ObjectValuable = CloudProjectFlavorPlanCodesValue{}

type CloudProjectFlavorPlanCodesValue struct {
	Hourly  ovhtypes.TfStringValue `tfsdk:"hourly" json:"hourly"`
	Monthly ovhtypes.TfStringValue `tfsdk:"monthly" json:"monthly"`
	state   attr.ValueState
}

func (v *CloudProjectFlavorPlanCodesValue) UnmarshalJSON(data []byte) error {
	type JsonCloudProjectFlavorPlanCodesValue CloudProjectFlavorPlanCodesValue

	var tmp JsonCloudProjectFlavorPlanCodesValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.Hourly = tmp.Hourly
	v.Monthly = tmp.Monthly

	v.state = attr.ValueStateKnown

	return nil
}

func (v *CloudProjectFlavorPlanCodesValue) MergeWith(other *CloudProjectFlavorPlanCodesValue) {

	if (v.Hourly.IsUnknown() || v.Hourly.IsNull()) && !other.Hourly.IsUnknown() {
		v.Hourly = other.Hourly
	}

	if (v.Monthly.IsUnknown() || v.Monthly.IsNull()) && !other.Monthly.IsUnknown() {
		v.Monthly = other.Monthly
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v CloudProjectFlavorPlanCodesValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"hourly":  v.Hourly,
		"monthly": v.Monthly,
	}
}
func (v CloudProjectFlavorPlanCodesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["hourly"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["monthly"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Hourly.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hourly"] = val

		val, err = v.Monthly.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["monthly"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CloudProjectFlavorPlanCodesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CloudProjectFlavorPlanCodesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CloudProjectFlavorPlanCodesValue) String() string {
	return "CloudProjectFlavorPlanCodesValue"
}

func (v CloudProjectFlavorPlanCodesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"hourly":  ovhtypes.TfStringType{},
			"monthly": ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"hourly":  v.Hourly,
			"monthly": v.Monthly,
		})

	return objVal, diags
}

func (v CloudProjectFlavorPlanCodesValue) Equal(o attr.Value) bool {
	other, ok := o.(CloudProjectFlavorPlanCodesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Hourly.Equal(other.Hourly) {
		return false
	}

	if !v.Monthly.Equal(other.Monthly) {
		return false
	}

	return true
}

func (v CloudProjectFlavorPlanCodesValue) Type(ctx context.Context) attr.Type {
	return CloudProjectFlavorPlanCodesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CloudProjectFlavorPlanCodesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"hourly":  ovhtypes.TfStringType{},
		"monthly": ovhtypes.TfStringType{},
	}
}
