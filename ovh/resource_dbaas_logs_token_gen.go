// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	ovhtypes "github.com/ovh/terraform-provider-ovh/ovh/types"
)

func DbaasLogsTokenResourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"cluster_id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Cluster ID",
			MarkdownDescription: "Cluster ID",
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},
		"created_at": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Token creation",
			MarkdownDescription: "Token creation",
		},
		"name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Token name",
			MarkdownDescription: "Token name",
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},
		"token_id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Token used",
			MarkdownDescription: "Token used",
		},
		"updated_at": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Token last update",
			MarkdownDescription: "Token last update",
		},
		"value": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Token value",
			MarkdownDescription: "Token value",
			Sensitive:           true,
		},
	}

	return schema.Schema{
		Attributes: attrs,
	}
}

type DbaasLogsTokenReadModel struct {
	AliasId         ovhtypes.TfStringValue `tfsdk:"alias_id" json:"aliasId"`
	ClusterId       ovhtypes.TfStringValue `tfsdk:"cluster_id" json:"clusterId"`
	CreatedAt       ovhtypes.TfStringValue `tfsdk:"created_at" json:"createdAt"`
	DashboardId     ovhtypes.TfStringValue `tfsdk:"dashboard_id" json:"dashboardId"`
	EncryptionKeyId ovhtypes.TfStringValue `tfsdk:"encryption_key_id" json:"encryptionKeyId"`
	IndexId         ovhtypes.TfStringValue `tfsdk:"index_id" json:"indexId"`
	InputId         ovhtypes.TfStringValue `tfsdk:"input_id" json:"inputId"`
	Name            ovhtypes.TfStringValue `tfsdk:"name" json:"name"`
	OperationId     ovhtypes.TfStringValue `tfsdk:"operation_id" json:"operationId"`
	OsdId           ovhtypes.TfStringValue `tfsdk:"osd_id" json:"osdId"`
	RoleId          ovhtypes.TfStringValue `tfsdk:"role_id" json:"roleId"`
	ServiceName     ovhtypes.TfStringValue `tfsdk:"service_name" json:"serviceName"`
	State           ovhtypes.TfStringValue `tfsdk:"state" json:"state"`
	StreamId        ovhtypes.TfStringValue `tfsdk:"stream_id" json:"streamId"`
	SubscriptionId  ovhtypes.TfStringValue `tfsdk:"subscription_id" json:"subscriptionId"`
	TokenId         ovhtypes.TfStringValue `tfsdk:"token_id" json:"tokenId"`
	UpdatedAt       ovhtypes.TfStringValue `tfsdk:"updated_at" json:"updatedAt"`
	Value           ovhtypes.TfStringValue `tfsdk:"value" json:"value"`
}

func (v *DbaasLogsTokenReadModel) toModel() *DbaasLogsTokenModel {
	return &DbaasLogsTokenModel{
		ClusterId:   v.ClusterId,
		CreatedAt:   v.CreatedAt,
		Name:        v.Name,
		ServiceName: v.ServiceName,
		TokenId:     v.TokenId,
		UpdatedAt:   v.UpdatedAt,
		Value:       v.Value,
	}
}

type DbaasLogsTokenModel struct {
	ClusterId   ovhtypes.TfStringValue `tfsdk:"cluster_id" json:"clusterId"`
	CreatedAt   ovhtypes.TfStringValue `tfsdk:"created_at" json:"createdAt"`
	Name        ovhtypes.TfStringValue `tfsdk:"name" json:"name"`
	ServiceName ovhtypes.TfStringValue `tfsdk:"service_name" json:"serviceName"`
	TokenId     ovhtypes.TfStringValue `tfsdk:"token_id" json:"tokenId"`
	UpdatedAt   ovhtypes.TfStringValue `tfsdk:"updated_at" json:"updatedAt"`
	Value       ovhtypes.TfStringValue `tfsdk:"value" json:"value"`
}

func (v *DbaasLogsTokenModel) MergeWith(other *DbaasLogsTokenModel) {
	if (v.ClusterId.IsUnknown() || v.ClusterId.IsNull()) && !other.ClusterId.IsUnknown() {
		v.ClusterId = other.ClusterId
	}

	if (v.CreatedAt.IsUnknown() || v.CreatedAt.IsNull()) && !other.CreatedAt.IsUnknown() {
		v.CreatedAt = other.CreatedAt
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.TokenId.IsUnknown() || v.TokenId.IsNull()) && !other.TokenId.IsUnknown() {
		v.TokenId = other.TokenId
	}

	if (v.UpdatedAt.IsUnknown() || v.UpdatedAt.IsNull()) && !other.UpdatedAt.IsUnknown() {
		v.UpdatedAt = other.UpdatedAt
	}

	if (v.Value.IsUnknown() || v.Value.IsNull()) && !other.Value.IsUnknown() {
		v.Value = other.Value
	}
}

type DbaasLogsTokenWritableModel struct {
	ClusterId *ovhtypes.TfStringValue `tfsdk:"cluster_id" json:"clusterId,omitempty"`
	Name      *ovhtypes.TfStringValue `tfsdk:"name" json:"name,omitempty"`
}

func (v DbaasLogsTokenModel) ToCreate() *DbaasLogsTokenWritableModel {
	res := &DbaasLogsTokenWritableModel{}

	if !v.ClusterId.IsUnknown() {
		res.ClusterId = &v.ClusterId
	}

	if !v.Name.IsUnknown() {
		res.Name = &v.Name
	}

	return res
}
