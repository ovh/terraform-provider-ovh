// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"
)

func CloudProjectStorageObjectsDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"objects": schema.SetNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"etag": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "ETag",
						MarkdownDescription: "ETag",
					},
					"is_delete_marker": schema.BoolAttribute{
						CustomType:          ovhtypes.TfBoolType{},
						Computed:            true,
						Description:         "Whether this object is a delete marker",
						MarkdownDescription: "Whether this object is a delete marker",
					},
					"is_latest": schema.BoolAttribute{
						CustomType:          ovhtypes.TfBoolType{},
						Computed:            true,
						Description:         "Whether this is the latest version of the object",
						MarkdownDescription: "Whether this is the latest version of the object",
					},
					"key": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Key",
						MarkdownDescription: "Key",
					},
					"last_modified": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Last modification date",
						MarkdownDescription: "Last modification date",
					},
					"size": schema.Int64Attribute{
						CustomType:          ovhtypes.TfInt64Type{},
						Computed:            true,
						Description:         "Size (bytes)",
						MarkdownDescription: "Size (bytes)",
					},
					"storage_class": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Storage class",
						MarkdownDescription: "Storage class",
					},
					"version_id": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Version ID of the object",
						MarkdownDescription: "Version ID of the object",
					},
				},
				CustomType: CloudProjectStorageObjectsType{
					ObjectType: types.ObjectType{
						AttrTypes: CloudProjectStorageObjectsValue{}.AttributeTypes(ctx),
					},
				},
			},
			CustomType: ovhtypes.NewTfListNestedType[CloudProjectStorageObjectsValue](ctx),
			Computed:   true,
		},
		"key_marker": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Description:         "Key to start with when listing objects",
			MarkdownDescription: "Key to start with when listing objects",
		},
		"limit": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Optional:            true,
			Description:         "Limit the number of objects returned (1000 maximum, defaults to 1000)",
			MarkdownDescription: "Limit the number of objects returned (1000 maximum, defaults to 1000)",
		},
		"name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Name",
			MarkdownDescription: "Name",
		},
		"prefix": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Description:         "List objects whose key begins with this prefix",
			MarkdownDescription: "List objects whose key begins with this prefix",
		},
		"region_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Region name",
			MarkdownDescription: "Region name",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
		"version_id_marker": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Description:         "Version ID to start listing from",
			MarkdownDescription: "Version ID to start listing from",
		},
		"with_versions": schema.BoolAttribute{
			CustomType:          ovhtypes.TfBoolType{},
			Optional:            true,
			Description:         "List object versions",
			MarkdownDescription: "List object versions",
		},
	}

	return schema.Schema{
		Attributes: attrs,
	}
}

type CloudProjectStorageObjectsModel struct {
	Objects         ovhtypes.TfListNestedValue[CloudProjectStorageObjectsValue] `tfsdk:"objects" json:"objects"`
	KeyMarker       ovhtypes.TfStringValue                                      `tfsdk:"key_marker" json:"keyMarker"`
	Limit           ovhtypes.TfInt64Value                                       `tfsdk:"limit" json:"limit"`
	Name            ovhtypes.TfStringValue                                      `tfsdk:"name" json:"name"`
	Prefix          ovhtypes.TfStringValue                                      `tfsdk:"prefix" json:"prefix"`
	RegionName      ovhtypes.TfStringValue                                      `tfsdk:"region_name" json:"regionName"`
	ServiceName     ovhtypes.TfStringValue                                      `tfsdk:"service_name" json:"serviceName"`
	VersionIdMarker ovhtypes.TfStringValue                                      `tfsdk:"version_id_marker" json:"versionIdMarker"`
	WithVersions    ovhtypes.TfBoolValue                                        `tfsdk:"with_versions" json:"withVersions"`
}

func (v *CloudProjectStorageObjectsModel) MergeWith(other *CloudProjectStorageObjectsModel) {
	if (v.Objects.IsUnknown() || v.Objects.IsNull()) && !other.Objects.IsUnknown() {
		v.Objects = other.Objects
	}

	if (v.KeyMarker.IsUnknown() || v.KeyMarker.IsNull()) && !other.KeyMarker.IsUnknown() {
		v.KeyMarker = other.KeyMarker
	}

	if (v.Limit.IsUnknown() || v.Limit.IsNull()) && !other.Limit.IsUnknown() {
		v.Limit = other.Limit
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.Prefix.IsUnknown() || v.Prefix.IsNull()) && !other.Prefix.IsUnknown() {
		v.Prefix = other.Prefix
	}

	if (v.RegionName.IsUnknown() || v.RegionName.IsNull()) && !other.RegionName.IsUnknown() {
		v.RegionName = other.RegionName
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.VersionIdMarker.IsUnknown() || v.VersionIdMarker.IsNull()) && !other.VersionIdMarker.IsUnknown() {
		v.VersionIdMarker = other.VersionIdMarker
	}

	if (v.WithVersions.IsUnknown() || v.WithVersions.IsNull()) && !other.WithVersions.IsUnknown() {
		v.WithVersions = other.WithVersions
	}
}

var _ basetypes.ObjectTypable = CloudProjectStorageObjectsType{}

type CloudProjectStorageObjectsType struct {
	basetypes.ObjectType
}

func (t CloudProjectStorageObjectsType) Equal(o attr.Type) bool {
	other, ok := o.(CloudProjectStorageObjectsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CloudProjectStorageObjectsType) String() string {
	return "CloudProjectStorageObjectsType"
}

func (t CloudProjectStorageObjectsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	etagAttribute, ok := attributes["etag"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`etag is missing from object`)

		return nil, diags
	}

	etagVal, ok := etagAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`etag expected to be ovhtypes.TfStringValue, was: %T`, etagAttribute))
	}

	isDeleteMarkerAttribute, ok := attributes["is_delete_marker"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_delete_marker is missing from object`)

		return nil, diags
	}

	isDeleteMarkerVal, ok := isDeleteMarkerAttribute.(ovhtypes.TfBoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_delete_marker expected to be ovhtypes.TfBoolValue, was: %T`, isDeleteMarkerAttribute))
	}

	isLatestAttribute, ok := attributes["is_latest"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_latest is missing from object`)

		return nil, diags
	}

	isLatestVal, ok := isLatestAttribute.(ovhtypes.TfBoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_latest expected to be ovhtypes.TfBoolValue, was: %T`, isLatestAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be ovhtypes.TfStringValue, was: %T`, keyAttribute))
	}

	lastModifiedAttribute, ok := attributes["last_modified"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_modified is missing from object`)

		return nil, diags
	}

	lastModifiedVal, ok := lastModifiedAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_modified expected to be ovhtypes.TfStringValue, was: %T`, lastModifiedAttribute))
	}

	sizeAttribute, ok := attributes["size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`size is missing from object`)

		return nil, diags
	}

	sizeVal, ok := sizeAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`size expected to be ovhtypes.TfInt64Value, was: %T`, sizeAttribute))
	}

	storageClassAttribute, ok := attributes["storage_class"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_class is missing from object`)

		return nil, diags
	}

	storageClassVal, ok := storageClassAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_class expected to be ovhtypes.TfStringValue, was: %T`, storageClassAttribute))
	}

	versionIdAttribute, ok := attributes["version_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version_id is missing from object`)

		return nil, diags
	}

	versionIdVal, ok := versionIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version_id expected to be ovhtypes.TfStringValue, was: %T`, versionIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CloudProjectStorageObjectsValue{
		Etag:           etagVal,
		IsDeleteMarker: isDeleteMarkerVal,
		IsLatest:       isLatestVal,
		Key:            keyVal,
		LastModified:   lastModifiedVal,
		Size:           sizeVal,
		StorageClass:   storageClassVal,
		VersionId:      versionIdVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectStorageObjectsValueNull() CloudProjectStorageObjectsValue {
	return CloudProjectStorageObjectsValue{
		state: attr.ValueStateNull,
	}
}

func NewCloudProjectStorageObjectsValueUnknown() CloudProjectStorageObjectsValue {
	return CloudProjectStorageObjectsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCloudProjectStorageObjectsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CloudProjectStorageObjectsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CloudProjectStorageObjectsValue Attribute Value",
				"While creating a CloudProjectStorageObjectsValue value, a missing attribute value was detected. "+
					"A CloudProjectStorageObjectsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectStorageObjectsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CloudProjectStorageObjectsValue Attribute Type",
				"While creating a CloudProjectStorageObjectsValue value, an invalid attribute value was detected. "+
					"A CloudProjectStorageObjectsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectStorageObjectsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CloudProjectStorageObjectsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CloudProjectStorageObjectsValue Attribute Value",
				"While creating a CloudProjectStorageObjectsValue value, an extra attribute value was detected. "+
					"A CloudProjectStorageObjectsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CloudProjectStorageObjectsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCloudProjectStorageObjectsValueUnknown(), diags
	}

	etagAttribute, ok := attributes["etag"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`etag is missing from object`)

		return NewCloudProjectStorageObjectsValueUnknown(), diags
	}

	etagVal, ok := etagAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`etag expected to be ovhtypes.TfStringValue, was: %T`, etagAttribute))
	}

	isDeleteMarkerAttribute, ok := attributes["is_delete_marker"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_delete_marker is missing from object`)

		return NewCloudProjectStorageObjectsValueUnknown(), diags
	}

	isDeleteMarkerVal, ok := isDeleteMarkerAttribute.(ovhtypes.TfBoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_delete_marker expected to be ovhtypes.TfBoolValue, was: %T`, isDeleteMarkerAttribute))
	}

	isLatestAttribute, ok := attributes["is_latest"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_latest is missing from object`)

		return NewCloudProjectStorageObjectsValueUnknown(), diags
	}

	isLatestVal, ok := isLatestAttribute.(ovhtypes.TfBoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_latest expected to be ovhtypes.TfBoolValue, was: %T`, isLatestAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewCloudProjectStorageObjectsValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be ovhtypes.TfStringValue, was: %T`, keyAttribute))
	}

	lastModifiedAttribute, ok := attributes["last_modified"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`last_modified is missing from object`)

		return NewCloudProjectStorageObjectsValueUnknown(), diags
	}

	lastModifiedVal, ok := lastModifiedAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`last_modified expected to be ovhtypes.TfStringValue, was: %T`, lastModifiedAttribute))
	}

	sizeAttribute, ok := attributes["size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`size is missing from object`)

		return NewCloudProjectStorageObjectsValueUnknown(), diags
	}

	sizeVal, ok := sizeAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`size expected to be ovhtypes.TfInt64Value, was: %T`, sizeAttribute))
	}

	storageClassAttribute, ok := attributes["storage_class"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_class is missing from object`)

		return NewCloudProjectStorageObjectsValueUnknown(), diags
	}

	storageClassVal, ok := storageClassAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_class expected to be ovhtypes.TfStringValue, was: %T`, storageClassAttribute))
	}

	versionIdAttribute, ok := attributes["version_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version_id is missing from object`)

		return NewCloudProjectStorageObjectsValueUnknown(), diags
	}

	versionIdVal, ok := versionIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version_id expected to be ovhtypes.TfStringValue, was: %T`, versionIdAttribute))
	}

	if diags.HasError() {
		return NewCloudProjectStorageObjectsValueUnknown(), diags
	}

	return CloudProjectStorageObjectsValue{
		Etag:           etagVal,
		IsDeleteMarker: isDeleteMarkerVal,
		IsLatest:       isLatestVal,
		Key:            keyVal,
		LastModified:   lastModifiedVal,
		Size:           sizeVal,
		StorageClass:   storageClassVal,
		VersionId:      versionIdVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectStorageObjectsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CloudProjectStorageObjectsValue {
	object, diags := NewCloudProjectStorageObjectsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCloudProjectStorageObjectsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CloudProjectStorageObjectsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCloudProjectStorageObjectsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCloudProjectStorageObjectsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCloudProjectStorageObjectsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCloudProjectStorageObjectsValueMust(CloudProjectStorageObjectsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CloudProjectStorageObjectsType) ValueType(ctx context.Context) attr.Value {
	return CloudProjectStorageObjectsValue{}
}

var _ basetypes.ObjectValuable = CloudProjectStorageObjectsValue{}

type CloudProjectStorageObjectsValue struct {
	Etag           ovhtypes.TfStringValue `tfsdk:"etag" json:"etag"`
	IsDeleteMarker ovhtypes.TfBoolValue   `tfsdk:"is_delete_marker" json:"isDeleteMarker"`
	IsLatest       ovhtypes.TfBoolValue   `tfsdk:"is_latest" json:"isLatest"`
	Key            ovhtypes.TfStringValue `tfsdk:"key" json:"key"`
	LastModified   ovhtypes.TfStringValue `tfsdk:"last_modified" json:"lastModified"`
	Size           ovhtypes.TfInt64Value  `tfsdk:"size" json:"size"`
	StorageClass   ovhtypes.TfStringValue `tfsdk:"storage_class" json:"storageClass"`
	VersionId      ovhtypes.TfStringValue `tfsdk:"version_id" json:"versionId"`
	state          attr.ValueState
}

func (v *CloudProjectStorageObjectsValue) UnmarshalJSON(data []byte) error {
	type JsonCloudProjectStorageObjectsValue CloudProjectStorageObjectsValue

	var tmp JsonCloudProjectStorageObjectsValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.Etag = tmp.Etag
	v.IsDeleteMarker = tmp.IsDeleteMarker
	v.IsLatest = tmp.IsLatest
	v.Key = tmp.Key
	v.LastModified = tmp.LastModified
	v.Size = tmp.Size
	v.StorageClass = tmp.StorageClass
	v.VersionId = tmp.VersionId

	v.state = attr.ValueStateKnown

	return nil
}

func (v *CloudProjectStorageObjectsValue) MergeWith(other *CloudProjectStorageObjectsValue) {

	if (v.Etag.IsUnknown() || v.Etag.IsNull()) && !other.Etag.IsUnknown() {
		v.Etag = other.Etag
	}

	if (v.IsDeleteMarker.IsUnknown() || v.IsDeleteMarker.IsNull()) && !other.IsDeleteMarker.IsUnknown() {
		v.IsDeleteMarker = other.IsDeleteMarker
	}

	if (v.IsLatest.IsUnknown() || v.IsLatest.IsNull()) && !other.IsLatest.IsUnknown() {
		v.IsLatest = other.IsLatest
	}

	if (v.Key.IsUnknown() || v.Key.IsNull()) && !other.Key.IsUnknown() {
		v.Key = other.Key
	}

	if (v.LastModified.IsUnknown() || v.LastModified.IsNull()) && !other.LastModified.IsUnknown() {
		v.LastModified = other.LastModified
	}

	if (v.Size.IsUnknown() || v.Size.IsNull()) && !other.Size.IsUnknown() {
		v.Size = other.Size
	}

	if (v.StorageClass.IsUnknown() || v.StorageClass.IsNull()) && !other.StorageClass.IsUnknown() {
		v.StorageClass = other.StorageClass
	}

	if (v.VersionId.IsUnknown() || v.VersionId.IsNull()) && !other.VersionId.IsUnknown() {
		v.VersionId = other.VersionId
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v CloudProjectStorageObjectsValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"etag":           v.Etag,
		"isDeleteMarker": v.IsDeleteMarker,
		"isLatest":       v.IsLatest,
		"key":            v.Key,
		"lastModified":   v.LastModified,
		"size":           v.Size,
		"storageClass":   v.StorageClass,
		"versionId":      v.VersionId,
	}
}
func (v CloudProjectStorageObjectsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 8)

	var val tftypes.Value
	var err error

	attrTypes["etag"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["is_delete_marker"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["is_latest"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["last_modified"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["size"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["storage_class"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 8)

		val, err = v.Etag.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["etag"] = val

		val, err = v.IsDeleteMarker.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_delete_marker"] = val

		val, err = v.IsLatest.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_latest"] = val

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.LastModified.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["last_modified"] = val

		val, err = v.Size.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["size"] = val

		val, err = v.StorageClass.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["storage_class"] = val

		val, err = v.VersionId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CloudProjectStorageObjectsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CloudProjectStorageObjectsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CloudProjectStorageObjectsValue) String() string {
	return "CloudProjectStorageObjectsValue"
}

func (v CloudProjectStorageObjectsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"etag":             ovhtypes.TfStringType{},
			"is_delete_marker": ovhtypes.TfBoolType{},
			"is_latest":        ovhtypes.TfBoolType{},
			"key":              ovhtypes.TfStringType{},
			"last_modified":    ovhtypes.TfStringType{},
			"size":             ovhtypes.TfInt64Type{},
			"storage_class":    ovhtypes.TfStringType{},
			"version_id":       ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"etag":             v.Etag,
			"is_delete_marker": v.IsDeleteMarker,
			"is_latest":        v.IsLatest,
			"key":              v.Key,
			"last_modified":    v.LastModified,
			"size":             v.Size,
			"storage_class":    v.StorageClass,
			"version_id":       v.VersionId,
		})

	return objVal, diags
}

func (v CloudProjectStorageObjectsValue) Equal(o attr.Value) bool {
	other, ok := o.(CloudProjectStorageObjectsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Etag.Equal(other.Etag) {
		return false
	}

	if !v.IsDeleteMarker.Equal(other.IsDeleteMarker) {
		return false
	}

	if !v.IsLatest.Equal(other.IsLatest) {
		return false
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.LastModified.Equal(other.LastModified) {
		return false
	}

	if !v.Size.Equal(other.Size) {
		return false
	}

	if !v.StorageClass.Equal(other.StorageClass) {
		return false
	}

	if !v.VersionId.Equal(other.VersionId) {
		return false
	}

	return true
}

func (v CloudProjectStorageObjectsValue) Type(ctx context.Context) attr.Type {
	return CloudProjectStorageObjectsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CloudProjectStorageObjectsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"etag":             ovhtypes.TfStringType{},
		"is_delete_marker": ovhtypes.TfBoolType{},
		"is_latest":        ovhtypes.TfBoolType{},
		"key":              ovhtypes.TfStringType{},
		"last_modified":    ovhtypes.TfStringType{},
		"size":             ovhtypes.TfInt64Type{},
		"storage_class":    ovhtypes.TfStringType{},
		"version_id":       ovhtypes.TfStringType{},
	}
}
