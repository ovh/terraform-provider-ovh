// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"

	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
)

func CloudProjectSshKeyResourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"finger_print": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "SSH key fingerprint",
			MarkdownDescription: "SSH key fingerprint",
		},
		"id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "SSH key id",
			MarkdownDescription: "SSH key id",
		},
		"name": schema.StringAttribute{
			CustomType: ovhtypes.TfStringType{},
			Required:   true,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
			Description:         "SSH key name",
			MarkdownDescription: "SSH key name",
		},
		"public_key": schema.StringAttribute{
			CustomType: ovhtypes.TfStringType{},
			Required:   true,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
			Description:         "SSH public key",
			MarkdownDescription: "SSH public key",
		},
		"region": schema.StringAttribute{
			CustomType: ovhtypes.TfStringType{},
			Optional:   true,
			Computed:   true,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
			Description:         "Region to create SSH key",
			MarkdownDescription: "Region to create SSH key",
		},
		"regions": schema.ListAttribute{
			CustomType:          ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
			Computed:            true,
			Description:         "SSH key regions",
			MarkdownDescription: "SSH key regions",
		},
		"service_name": schema.StringAttribute{
			CustomType: ovhtypes.TfStringType{},
			Required:   true,
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
	}

	return schema.Schema{
		Description: "",
		Attributes:  attrs,
	}
}

type CloudProjectSshKeyModel struct {
	FingerPrint ovhtypes.TfStringValue                             `tfsdk:"finger_print" json:"fingerPrint"`
	Id          ovhtypes.TfStringValue                             `tfsdk:"id" json:"id"`
	Name        ovhtypes.TfStringValue                             `tfsdk:"name" json:"name"`
	PublicKey   ovhtypes.TfStringValue                             `tfsdk:"public_key" json:"publicKey"`
	Region      ovhtypes.TfStringValue                             `tfsdk:"region" json:"region"`
	Regions     ovhtypes.TfListNestedValue[ovhtypes.TfStringValue] `tfsdk:"regions" json:"regions"`
	ServiceName ovhtypes.TfStringValue                             `tfsdk:"service_name" json:"serviceName"`
}

func (v *CloudProjectSshKeyModel) MergeWith(other *CloudProjectSshKeyModel) {

	if (v.FingerPrint.IsUnknown() || v.FingerPrint.IsNull()) && !other.FingerPrint.IsUnknown() {
		v.FingerPrint = other.FingerPrint
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.PublicKey.IsUnknown() || v.PublicKey.IsNull()) && !other.PublicKey.IsUnknown() {
		v.PublicKey = other.PublicKey
	}

	if (v.Region.IsUnknown() || v.Region.IsNull()) && !other.Region.IsUnknown() {
		v.Region = other.Region
	}

	if (v.Regions.IsUnknown() || v.Regions.IsNull()) && !other.Regions.IsUnknown() {
		v.Regions = other.Regions
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

}

func (v CloudProjectSshKeyModel) ToCreate() *CloudProjectSshKeyModel {
	res := &CloudProjectSshKeyModel{}

	if !v.Name.IsUnknown() {
		res.Name = v.Name
	}

	if !v.PublicKey.IsUnknown() {
		res.PublicKey = v.PublicKey
	}

	if !v.Region.IsUnknown() {
		res.Region = v.Region
	}

	return res
}

func (v *CloudProjectSshKeyModel) MarshalJSON() ([]byte, error) {
	toMarshal := map[string]any{}
	if !v.Name.IsNull() && !v.Name.IsUnknown() {
		toMarshal["name"] = v.Name
	}
	if !v.PublicKey.IsNull() && !v.PublicKey.IsUnknown() {
		toMarshal["publicKey"] = v.PublicKey
	}
	if !v.Region.IsNull() && !v.Region.IsUnknown() {
		toMarshal["region"] = v.Region
	}

	return json.Marshal(toMarshal)
}
