// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"
)

func VrackIpv6RoutedSubrangeResourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Routed subrange id",
			MarkdownDescription: "Routed subrange id",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "The internal name of your vrack",
			MarkdownDescription: "The internal name of your vrack",
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},
		"block": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Your IP v6 block",
			MarkdownDescription: "Your IP v6 block",
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},
		"nexthop": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "IPv6 address (e.g., 2001:41d0:1:1994::1)",
			MarkdownDescription: "IPv6 address (e.g., 2001:41d0:1:1994::1)",
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},
		"routed_subrange": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "IPv6 CIDR notation (e.g., 2001:41d0::/128)",
			MarkdownDescription: "IPv6 CIDR notation (e.g., 2001:41d0::/128)",
			PlanModifiers: []planmodifier.String{
				stringplanmodifier.RequiresReplace(),
			},
		},
	}

	return schema.Schema{
		Description: "",
		Attributes:  attrs,
	}
}

type VrackIpv6RoutedSubrangeModel struct {
	Id             ovhtypes.TfStringValue `tfsdk:"id" json:"id"`
	Block          ovhtypes.TfStringValue `tfsdk:"block" json:"block"`
	Nexthop        ovhtypes.TfStringValue `tfsdk:"nexthop" json:"nexthop"`
	RoutedSubrange ovhtypes.TfStringValue `tfsdk:"routed_subrange" json:"routedSubrange"`
	ServiceName    ovhtypes.TfStringValue `tfsdk:"service_name" json:"serviceName"`
}

func (v *VrackIpv6RoutedSubrangeModel) MergeWith(other *VrackIpv6RoutedSubrangeModel) {

	v.Id = ovhtypes.NewTfStringValue(
		fmt.Sprintf("vrack_%s-block_%s-routed_subrange_%s", other.ServiceName, other.Block.ValueString(), other.RoutedSubrange.ValueString()))

	if (v.Block.IsUnknown() || v.Block.IsNull()) && !other.Block.IsUnknown() {
		v.Block = other.Block
	}

	if (v.Nexthop.IsUnknown() || v.Nexthop.IsNull()) && !other.Nexthop.IsUnknown() {
		v.Nexthop = other.Nexthop
	}

	if (v.RoutedSubrange.IsUnknown() || v.RoutedSubrange.IsNull()) && !other.RoutedSubrange.IsUnknown() {
		v.RoutedSubrange = other.RoutedSubrange
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

}

func (v VrackIpv6RoutedSubrangeModel) ToCreate() *VrackIpv6RoutedSubrangeModel {
	res := &VrackIpv6RoutedSubrangeModel{}

	if !v.Nexthop.IsUnknown() {
		res.Nexthop = v.Nexthop
	}

	if !v.RoutedSubrange.IsUnknown() {
		res.RoutedSubrange = v.RoutedSubrange
	}

	return res
}

func (v *VrackIpv6RoutedSubrangeModel) MarshalJSON() ([]byte, error) {
	toMarshal := map[string]any{}
	if !v.Nexthop.IsNull() && !v.Nexthop.IsUnknown() {
		toMarshal["nexthop"] = v.Nexthop
	}
	if !v.RoutedSubrange.IsNull() && !v.RoutedSubrange.IsUnknown() {
		toMarshal["routedSubrange"] = v.RoutedSubrange
	}

	return json.Marshal(toMarshal)
}
