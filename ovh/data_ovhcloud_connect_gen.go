// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/types"
	ovhtypes "github.com/ovh/terraform-provider-ovh/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OvhcloudConnectDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"bandwidth": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Service bandwidth",
			MarkdownDescription: "Service bandwidth",
		},
		"description": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Service description",
			MarkdownDescription: "Service description",
		},
		"iam": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"display_name": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Resource display name",
					MarkdownDescription: "Resource display name",
				},
				"id": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Unique identifier of the resource",
					MarkdownDescription: "Unique identifier of the resource",
				},
				"tags": schema.MapAttribute{
					CustomType:          ovhtypes.NewTfMapNestedType[ovhtypes.TfStringValue](ctx),
					Computed:            true,
					Description:         "Resource tags. Tags that were internally computed are prefixed with ovh:",
					MarkdownDescription: "Resource tags. Tags that were internally computed are prefixed with ovh:",
				},
				"urn": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Unique resource name used in policies",
					MarkdownDescription: "Unique resource name used in policies",
				},
			},
			CustomType: IamType{
				ObjectType: types.ObjectType{
					AttrTypes: IamValue{}.AttributeTypes(ctx),
				},
			},
			Computed:            true,
			Description:         "IAM resource metadata",
			MarkdownDescription: "IAM resource metadata",
		},
		"interface_list": schema.ListAttribute{
			CustomType:          ovhtypes.NewTfListNestedType[ovhtypes.TfInt64Value](ctx),
			Computed:            true,
			Description:         "List of interfaces linked to a service",
			MarkdownDescription: "List of interfaces linked to a service",
		},
		"pop": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Pop reference where the service is delivered",
			MarkdownDescription: "Pop reference where the service is delivered",
		},
		"port_quantity": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Port quantity",
			MarkdownDescription: "Port quantity",
		},
		"product": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Product name of the service",
			MarkdownDescription: "Product name of the service",
		},
		"provider_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Service provider",
			MarkdownDescription: "Service provider",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
		"status": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Service status",
			MarkdownDescription: "Service status",
		},
		"uuid": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Service UUID",
			MarkdownDescription: "Service UUID",
		},
		"vrack": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "vrack linked to the service",
			MarkdownDescription: "vrack linked to the service",
		},
	}

	return schema.Schema{
		Attributes: attrs,
	}
}

type OvhcloudConnectModel struct {
	Bandwidth     ovhtypes.TfStringValue                            `tfsdk:"bandwidth" json:"bandwidth"`
	Description   ovhtypes.TfStringValue                            `tfsdk:"description" json:"description"`
	Iam           IamValue                                          `tfsdk:"iam" json:"iam"`
	InterfaceList ovhtypes.TfListNestedValue[ovhtypes.TfInt64Value] `tfsdk:"interface_list" json:"interfaceList"`
	Pop           ovhtypes.TfStringValue                            `tfsdk:"pop" json:"pop"`
	PortQuantity  ovhtypes.TfStringValue                            `tfsdk:"port_quantity" json:"portQuantity"`
	Product       ovhtypes.TfStringValue                            `tfsdk:"product" json:"product"`
	ProviderName  ovhtypes.TfStringValue                            `tfsdk:"provider_name" json:"provider"`
	ServiceName   ovhtypes.TfStringValue                            `tfsdk:"service_name" json:"serviceName"`
	Status        ovhtypes.TfStringValue                            `tfsdk:"status" json:"status"`
	Uuid          ovhtypes.TfStringValue                            `tfsdk:"uuid" json:"uuid"`
	Vrack         ovhtypes.TfStringValue                            `tfsdk:"vrack" json:"vrack"`
}

func (v *OvhcloudConnectModel) MergeWith(other *OvhcloudConnectModel) {

	if (v.Bandwidth.IsUnknown() || v.Bandwidth.IsNull()) && !other.Bandwidth.IsUnknown() {
		v.Bandwidth = other.Bandwidth
	}

	if (v.Description.IsUnknown() || v.Description.IsNull()) && !other.Description.IsUnknown() {
		v.Description = other.Description
	}

	if (v.Iam.IsUnknown() || v.Iam.IsNull()) && !other.Iam.IsUnknown() {
		v.Iam = other.Iam
	}

	if (v.InterfaceList.IsUnknown() || v.InterfaceList.IsNull()) && !other.InterfaceList.IsUnknown() {
		v.InterfaceList = other.InterfaceList
	}

	if (v.Pop.IsUnknown() || v.Pop.IsNull()) && !other.Pop.IsUnknown() {
		v.Pop = other.Pop
	}

	if (v.PortQuantity.IsUnknown() || v.PortQuantity.IsNull()) && !other.PortQuantity.IsUnknown() {
		v.PortQuantity = other.PortQuantity
	}

	if (v.Product.IsUnknown() || v.Product.IsNull()) && !other.Product.IsUnknown() {
		v.Product = other.Product
	}

	if (v.ProviderName.IsUnknown() || v.ProviderName.IsNull()) && !other.ProviderName.IsUnknown() {
		v.ProviderName = other.ProviderName
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.Status.IsUnknown() || v.Status.IsNull()) && !other.Status.IsUnknown() {
		v.Status = other.Status
	}

	if (v.Uuid.IsUnknown() || v.Uuid.IsNull()) && !other.Uuid.IsUnknown() {
		v.Uuid = other.Uuid
	}

	if (v.Vrack.IsUnknown() || v.Vrack.IsNull()) && !other.Vrack.IsUnknown() {
		v.Vrack = other.Vrack
	}

}
