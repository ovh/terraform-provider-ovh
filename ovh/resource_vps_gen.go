// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	ovhtypes "github.com/ovh/terraform-provider-ovh/ovh/types"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func VpsResourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"cluster": schema.StringAttribute{
			CustomType: ovhtypes.TfStringType{},
			Computed:   true,
		},
		"display_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Set the name displayed in Manager for your VPS (max 50 chars)",
			MarkdownDescription: "Set the name displayed in Manager for your VPS (max 50 chars)",
		},
		"iam": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"display_name": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Resource display name",
					MarkdownDescription: "Resource display name",
				},
				"id": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Unique identifier of the resource",
					MarkdownDescription: "Unique identifier of the resource",
				},
				"tags": schema.MapAttribute{
					CustomType:          ovhtypes.NewTfMapNestedType[ovhtypes.TfStringValue](ctx),
					Computed:            true,
					Description:         "Resource tags. Tags that were internally computed are prefixed with ovh:",
					MarkdownDescription: "Resource tags. Tags that were internally computed are prefixed with ovh:",
				},
				"urn": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Unique resource name used in policies",
					MarkdownDescription: "Unique resource name used in policies",
				},
			},
			CustomType: IamType{
				ObjectType: types.ObjectType{
					AttrTypes: IamValue{}.AttributeTypes(ctx),
				},
			},
			Computed:            true,
			Description:         "IAM resource metadata",
			MarkdownDescription: "IAM resource metadata",
		},
		"keymap": schema.StringAttribute{
			CustomType:  ovhtypes.TfStringType{},
			Optional:    true,
			Computed:    true,
			Description: "KVM keyboard layout on VPS Cloud",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"fr",
					"us",
				),
			},
		},
		"memory_limit": schema.Int64Attribute{
			CustomType: ovhtypes.TfInt64Type{},
			Optional:   true,
			Computed:   true,
		},
		"model": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"available_options": schema.ListAttribute{
					CustomType: ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
					Optional:   true,
					Computed:   true,
				},
				"datacenter": schema.ListAttribute{
					CustomType: ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
					Optional:   true,
					Computed:   true,
				},
				"disk": schema.Int64Attribute{
					CustomType: ovhtypes.TfInt64Type{},
					Optional:   true,
					Computed:   true,
				},
				"maximum_additionnal_ip": schema.Int64Attribute{
					CustomType: ovhtypes.TfInt64Type{},
					Optional:   true,
					Computed:   true,
				},
				"memory": schema.Int64Attribute{
					CustomType: ovhtypes.TfInt64Type{},
					Optional:   true,
					Computed:   true,
				},
				"name": schema.StringAttribute{
					CustomType: ovhtypes.TfStringType{},
					Optional:   true,
					Computed:   true,
				},
				"offer": schema.StringAttribute{
					CustomType: ovhtypes.TfStringType{},
					Optional:   true,
					Computed:   true,
				},
				"vcore": schema.Int64Attribute{
					CustomType: ovhtypes.TfInt64Type{},
					Optional:   true,
					Computed:   true,
				},
				"version": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Optional:            true,
					Computed:            true,
					Description:         "All versions that VPS can have",
					MarkdownDescription: "All versions that VPS can have",
					Validators: []validator.String{
						stringvalidator.OneOf(
							"2013v1",
							"2014v1",
							"2015v1",
							"2017v1",
							"2017v2",
							"2017v3",
							"2018v1",
							"2018v2",
							"2019v1",
						),
					},
				},
			},
			CustomType: ModelType{
				ObjectType: types.ObjectType{
					AttrTypes: ModelValue{}.AttributeTypes(ctx),
				},
			},
			Optional:            true,
			Computed:            true,
			Description:         "A structure describing characteristics of a VPS model",
			MarkdownDescription: "A structure describing characteristics of a VPS model",
		},
		"monitoring_ip_blocks": schema.ListAttribute{
			CustomType:          ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
			Optional:            true,
			Computed:            true,
			Description:         "Ip blocks for OVH monitoring servers",
			MarkdownDescription: "Ip blocks for OVH monitoring servers",
		},
		"name": schema.StringAttribute{
			CustomType: ovhtypes.TfStringType{},
			Optional:   true,
			Computed:   true,
		},
		"netboot_mode": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "All values a VPS netboot mode can be in",
			MarkdownDescription: "All values a VPS netboot mode can be in",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"local",
					"rescue",
				),
			},
		},
		"offer_type": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "All offers a VPS can have",
			MarkdownDescription: "All offers a VPS can have",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"beta-classic",
					"classic",
					"cloud",
					"cloudram",
					"game-classic",
					"lowlat",
					"ssd",
				),
			},
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "The internal name of your VPS offer",
			MarkdownDescription: "The internal name of your VPS offer",
		},
		"sla_monitoring": schema.BoolAttribute{
			CustomType: ovhtypes.TfBoolType{},
			Optional:   true,
			Computed:   true,
		},
		"state": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "All states a VPS can be in",
			MarkdownDescription: "All states a VPS can be in",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"backuping",
					"installing",
					"maintenance",
					"rebooting",
					"rescued",
					"running",
					"stopped",
					"stopping",
					"upgrading",
				),
			},
		},
		"vcore": schema.Int64Attribute{
			CustomType: ovhtypes.TfInt64Type{},
			Optional:   true,
			Computed:   true,
		},
		"zone": schema.StringAttribute{
			CustomType: ovhtypes.TfStringType{},
			Optional:   true,
			Computed:   true,
		},
	}

	// Add order attributes
	for k, v := range OrderResourceSchema(ctx).Attributes {
		attrs[k] = v
	}

	return schema.Schema{
		Attributes: attrs,
	}
}

type VpsModel struct {
	Cluster            ovhtypes.TfStringValue                             `tfsdk:"cluster" json:"cluster"`
	DisplayName        ovhtypes.TfStringValue                             `tfsdk:"display_name" json:"displayName"`
	Iam                IamValue                                           `tfsdk:"iam" json:"iam"`
	Keymap             ovhtypes.TfStringValue                             `tfsdk:"keymap" json:"keymap"`
	MemoryLimit        ovhtypes.TfInt64Value                              `tfsdk:"memory_limit" json:"memoryLimit"`
	Model              ModelValue                                         `tfsdk:"model" json:"model"`
	MonitoringIpBlocks ovhtypes.TfListNestedValue[ovhtypes.TfStringValue] `tfsdk:"monitoring_ip_blocks" json:"monitoringIpBlocks"`
	Name               ovhtypes.TfStringValue                             `tfsdk:"name" json:"name"`
	NetbootMode        ovhtypes.TfStringValue                             `tfsdk:"netboot_mode" json:"netbootMode"`
	OfferType          ovhtypes.TfStringValue                             `tfsdk:"offer_type" json:"offerType"`
	ServiceName        ovhtypes.TfStringValue                             `tfsdk:"service_name" json:"serviceName"`
	SlaMonitoring      ovhtypes.TfBoolValue                               `tfsdk:"sla_monitoring" json:"slaMonitoring"`
	State              ovhtypes.TfStringValue                             `tfsdk:"state" json:"state"`
	Vcore              ovhtypes.TfInt64Value                              `tfsdk:"vcore" json:"vcore"`
	Zone               ovhtypes.TfStringValue                             `tfsdk:"zone" json:"zone"`
	// Fields used for order
	Order         OrderValue                                  `tfsdk:"order" json:"order"`
	OvhSubsidiary ovhtypes.TfStringValue                      `tfsdk:"ovh_subsidiary" json:"ovhSubsidiary"`
	Plan          ovhtypes.TfListNestedValue[PlanValue]       `tfsdk:"plan" json:"plan"`
	PlanOption    ovhtypes.TfListNestedValue[PlanOptionValue] `tfsdk:"plan_option" json:"planOption"`
}

func (v *VpsModel) ToOrder() *OrderModel {
	return &OrderModel{
		Order:         v.Order,
		OvhSubsidiary: v.OvhSubsidiary,
		Plan:          v.Plan,
		PlanOption:    v.PlanOption,
	}
}

func (v *VpsModel) MergeWith(other *VpsModel) {
	if (v.Cluster.IsUnknown() || v.Cluster.IsNull()) && !other.Cluster.IsUnknown() {
		v.Cluster = other.Cluster
	}

	if (v.DisplayName.IsUnknown() || v.DisplayName.IsNull()) && !other.DisplayName.IsUnknown() {
		v.DisplayName = other.DisplayName
	}

	if v.Iam.IsUnknown() && !other.Iam.IsUnknown() {
		v.Iam = other.Iam
	} else if !other.Iam.IsUnknown() {
		v.Iam.MergeWith(&other.Iam)
	}

	if (v.Keymap.IsUnknown() || v.Keymap.IsNull()) && !other.Keymap.IsUnknown() {
		v.Keymap = other.Keymap
	}

	if (v.MemoryLimit.IsUnknown() || v.MemoryLimit.IsNull()) && !other.MemoryLimit.IsUnknown() {
		v.MemoryLimit = other.MemoryLimit
	}

	if v.Model.IsUnknown() && !other.Model.IsUnknown() {
		v.Model = other.Model
	} else if !other.Model.IsUnknown() {
		v.Model.MergeWith(&other.Model)
	}

	if (v.MonitoringIpBlocks.IsUnknown() || v.MonitoringIpBlocks.IsNull()) && !other.MonitoringIpBlocks.IsUnknown() {
		v.MonitoringIpBlocks = other.MonitoringIpBlocks
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.NetbootMode.IsUnknown() || v.NetbootMode.IsNull()) && !other.NetbootMode.IsUnknown() {
		v.NetbootMode = other.NetbootMode
	}

	if (v.OfferType.IsUnknown() || v.OfferType.IsNull()) && !other.OfferType.IsUnknown() {
		v.OfferType = other.OfferType
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.SlaMonitoring.IsUnknown() || v.SlaMonitoring.IsNull()) && !other.SlaMonitoring.IsUnknown() {
		v.SlaMonitoring = other.SlaMonitoring
	}

	if (v.State.IsUnknown() || v.State.IsNull()) && !other.State.IsUnknown() {
		v.State = other.State
	}

	if (v.Vcore.IsUnknown() || v.Vcore.IsNull()) && !other.Vcore.IsUnknown() {
		v.Vcore = other.Vcore
	}

	if (v.Zone.IsUnknown() || v.Zone.IsNull()) && !other.Zone.IsUnknown() {
		v.Zone = other.Zone
	}

	if v.Order.IsUnknown() && !other.Order.IsUnknown() {
		v.Order = other.Order
	} else if !other.Order.IsUnknown() {
		v.Order.MergeWith(&other.Order)
	}

	if (v.OvhSubsidiary.IsUnknown() || v.OvhSubsidiary.IsNull()) && !other.OvhSubsidiary.IsUnknown() {
		v.OvhSubsidiary = other.OvhSubsidiary
	}

	if (v.Plan.IsUnknown() || v.Plan.IsNull()) && !other.Plan.IsUnknown() {
		v.Plan = other.Plan
	}

	if (v.PlanOption.IsUnknown() || v.PlanOption.IsNull()) && !other.PlanOption.IsUnknown() {
		v.PlanOption = other.PlanOption
	}
}

type VpsWritableModel struct {
	DisplayName   *ovhtypes.TfStringValue `tfsdk:"display_name" json:"displayName,omitempty"`
	NetbootMode   *ovhtypes.TfStringValue `tfsdk:"netboot_mode" json:"netbootMode,omitempty"`
	SlaMonitoring *ovhtypes.TfBoolValue   `tfsdk:"sla_monitoring" json:"slaMonitoring,omitempty"`
}

func (v VpsModel) ToCreate() *VpsWritableModel {
	res := &VpsWritableModel{}

	if !v.DisplayName.IsUnknown() {
		res.DisplayName = &v.DisplayName
	}

	if !v.NetbootMode.IsUnknown() {
		res.NetbootMode = &v.NetbootMode
	}

	if !v.SlaMonitoring.IsUnknown() {
		res.SlaMonitoring = &v.SlaMonitoring
	}

	return res
}

func (v VpsModel) ToUpdate() *VpsWritableModel {
	res := &VpsWritableModel{}

	if !v.DisplayName.IsUnknown() {
		res.DisplayName = &v.DisplayName
	}

	if !v.NetbootMode.IsUnknown() {
		res.NetbootMode = &v.NetbootMode
	}

	return res
}

var _ basetypes.ObjectTypable = ModelType{}

type ModelType struct {
	basetypes.ObjectType
}

func (t ModelType) Equal(o attr.Type) bool {
	other, ok := o.(ModelType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ModelType) String() string {
	return "ModelType"
}

func (t ModelType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	availableOptionsAttribute, ok := attributes["available_options"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`available_options is missing from object`)

		return nil, diags
	}

	availableOptionsVal, ok := availableOptionsAttribute.(ovhtypes.TfListNestedValue[ovhtypes.TfStringValue])

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`available_options expected to be ovhtypes.TfListNestedValue[ovhtypes.TfStringValue], was: %T`, availableOptionsAttribute))
	}

	datacenterAttribute, ok := attributes["datacenter"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`datacenter is missing from object`)

		return nil, diags
	}

	datacenterVal, ok := datacenterAttribute.(ovhtypes.TfListNestedValue[ovhtypes.TfStringValue])

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`datacenter expected to be ovhtypes.TfListNestedValue[ovhtypes.TfStringValue], was: %T`, datacenterAttribute))
	}

	diskAttribute, ok := attributes["disk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disk is missing from object`)

		return nil, diags
	}

	diskVal, ok := diskAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disk expected to be ovhtypes.TfInt64Value, was: %T`, diskAttribute))
	}

	maximumAdditionnalIpAttribute, ok := attributes["maximum_additionnal_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`maximum_additionnal_ip is missing from object`)

		return nil, diags
	}

	maximumAdditionnalIpVal, ok := maximumAdditionnalIpAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`maximum_additionnal_ip expected to be ovhtypes.TfInt64Value, was: %T`, maximumAdditionnalIpAttribute))
	}

	memoryAttribute, ok := attributes["memory"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`memory is missing from object`)

		return nil, diags
	}

	memoryVal, ok := memoryAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`memory expected to be ovhtypes.TfInt64Value, was: %T`, memoryAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be ovhtypes.TfStringValue, was: %T`, nameAttribute))
	}

	offerAttribute, ok := attributes["offer"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offer is missing from object`)

		return nil, diags
	}

	offerVal, ok := offerAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offer expected to be ovhtypes.TfStringValue, was: %T`, offerAttribute))
	}

	vcoreAttribute, ok := attributes["vcore"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcore is missing from object`)

		return nil, diags
	}

	vcoreVal, ok := vcoreAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcore expected to be ovhtypes.TfInt64Value, was: %T`, vcoreAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be ovhtypes.TfStringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ModelValue{
		AvailableOptions:     availableOptionsVal,
		Datacenter:           datacenterVal,
		Disk:                 diskVal,
		MaximumAdditionnalIp: maximumAdditionnalIpVal,
		Memory:               memoryVal,
		Name:                 nameVal,
		Offer:                offerVal,
		Vcore:                vcoreVal,
		Version:              versionVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewModelValueNull() ModelValue {
	return ModelValue{
		state: attr.ValueStateNull,
	}
}

func NewModelValueUnknown() ModelValue {
	return ModelValue{
		state: attr.ValueStateUnknown,
	}
}

func NewModelValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ModelValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ModelValue Attribute Value",
				"While creating a ModelValue value, a missing attribute value was detected. "+
					"A ModelValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ModelValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ModelValue Attribute Type",
				"While creating a ModelValue value, an invalid attribute value was detected. "+
					"A ModelValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ModelValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ModelValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ModelValue Attribute Value",
				"While creating a ModelValue value, an extra attribute value was detected. "+
					"A ModelValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ModelValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewModelValueUnknown(), diags
	}

	availableOptionsAttribute, ok := attributes["available_options"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`available_options is missing from object`)

		return NewModelValueUnknown(), diags
	}

	availableOptionsVal, ok := availableOptionsAttribute.(ovhtypes.TfListNestedValue[ovhtypes.TfStringValue])

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`available_options expected to be ovhtypes.TfListNestedValue[ovhtypes.TfStringValue], was: %T`, availableOptionsAttribute))
	}

	datacenterAttribute, ok := attributes["datacenter"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`datacenter is missing from object`)

		return NewModelValueUnknown(), diags
	}

	datacenterVal, ok := datacenterAttribute.(ovhtypes.TfListNestedValue[ovhtypes.TfStringValue])

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`datacenter expected to be ovhtypes.TfListNestedValue[ovhtypes.TfStringValue], was: %T`, datacenterAttribute))
	}

	diskAttribute, ok := attributes["disk"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disk is missing from object`)

		return NewModelValueUnknown(), diags
	}

	diskVal, ok := diskAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disk expected to be ovhtypes.TfInt64Value, was: %T`, diskAttribute))
	}

	maximumAdditionnalIpAttribute, ok := attributes["maximum_additionnal_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`maximum_additionnal_ip is missing from object`)

		return NewModelValueUnknown(), diags
	}

	maximumAdditionnalIpVal, ok := maximumAdditionnalIpAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`maximum_additionnal_ip expected to be ovhtypes.TfInt64Value, was: %T`, maximumAdditionnalIpAttribute))
	}

	memoryAttribute, ok := attributes["memory"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`memory is missing from object`)

		return NewModelValueUnknown(), diags
	}

	memoryVal, ok := memoryAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`memory expected to be ovhtypes.TfInt64Value, was: %T`, memoryAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewModelValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be ovhtypes.TfStringValue, was: %T`, nameAttribute))
	}

	offerAttribute, ok := attributes["offer"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`offer is missing from object`)

		return NewModelValueUnknown(), diags
	}

	offerVal, ok := offerAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`offer expected to be ovhtypes.TfStringValue, was: %T`, offerAttribute))
	}

	vcoreAttribute, ok := attributes["vcore"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcore is missing from object`)

		return NewModelValueUnknown(), diags
	}

	vcoreVal, ok := vcoreAttribute.(ovhtypes.TfInt64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcore expected to be ovhtypes.TfInt64Value, was: %T`, vcoreAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewModelValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be ovhtypes.TfStringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewModelValueUnknown(), diags
	}

	return ModelValue{
		AvailableOptions:     availableOptionsVal,
		Datacenter:           datacenterVal,
		Disk:                 diskVal,
		MaximumAdditionnalIp: maximumAdditionnalIpVal,
		Memory:               memoryVal,
		Name:                 nameVal,
		Offer:                offerVal,
		Vcore:                vcoreVal,
		Version:              versionVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewModelValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ModelValue {
	object, diags := NewModelValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewModelValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ModelType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewModelValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewModelValueUnknown(), nil
	}

	if in.IsNull() {
		return NewModelValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewModelValueMust(ModelValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ModelType) ValueType(ctx context.Context) attr.Value {
	return ModelValue{}
}

var _ basetypes.ObjectValuable = ModelValue{}

type ModelValue struct {
	AvailableOptions     ovhtypes.TfListNestedValue[ovhtypes.TfStringValue] `tfsdk:"available_options" json:"availableOptions"`
	Datacenter           ovhtypes.TfListNestedValue[ovhtypes.TfStringValue] `tfsdk:"datacenter" json:"datacenter"`
	Disk                 ovhtypes.TfInt64Value                              `tfsdk:"disk" json:"disk"`
	MaximumAdditionnalIp ovhtypes.TfInt64Value                              `tfsdk:"maximum_additionnal_ip" json:"maximumAdditionnalIp"`
	Memory               ovhtypes.TfInt64Value                              `tfsdk:"memory" json:"memory"`
	Name                 ovhtypes.TfStringValue                             `tfsdk:"name" json:"name"`
	Offer                ovhtypes.TfStringValue                             `tfsdk:"offer" json:"offer"`
	Vcore                ovhtypes.TfInt64Value                              `tfsdk:"vcore" json:"vcore"`
	Version              ovhtypes.TfStringValue                             `tfsdk:"version" json:"version"`
	state                attr.ValueState
}

func (v *ModelValue) UnmarshalJSON(data []byte) error {
	type JsonModelValue ModelValue

	var tmp JsonModelValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.AvailableOptions = tmp.AvailableOptions
	v.Datacenter = tmp.Datacenter
	v.Disk = tmp.Disk
	v.MaximumAdditionnalIp = tmp.MaximumAdditionnalIp
	v.Memory = tmp.Memory
	v.Name = tmp.Name
	v.Offer = tmp.Offer
	v.Vcore = tmp.Vcore
	v.Version = tmp.Version

	v.state = attr.ValueStateKnown

	return nil
}

func (v *ModelValue) MergeWith(other *ModelValue) {

	if (v.AvailableOptions.IsUnknown() || v.AvailableOptions.IsNull()) && !other.AvailableOptions.IsUnknown() {
		v.AvailableOptions = other.AvailableOptions
	}

	if (v.Datacenter.IsUnknown() || v.Datacenter.IsNull()) && !other.Datacenter.IsUnknown() {
		v.Datacenter = other.Datacenter
	}

	if (v.Disk.IsUnknown() || v.Disk.IsNull()) && !other.Disk.IsUnknown() {
		v.Disk = other.Disk
	}

	if (v.MaximumAdditionnalIp.IsUnknown() || v.MaximumAdditionnalIp.IsNull()) && !other.MaximumAdditionnalIp.IsUnknown() {
		v.MaximumAdditionnalIp = other.MaximumAdditionnalIp
	}

	if (v.Memory.IsUnknown() || v.Memory.IsNull()) && !other.Memory.IsUnknown() {
		v.Memory = other.Memory
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.Offer.IsUnknown() || v.Offer.IsNull()) && !other.Offer.IsUnknown() {
		v.Offer = other.Offer
	}

	if (v.Vcore.IsUnknown() || v.Vcore.IsNull()) && !other.Vcore.IsUnknown() {
		v.Vcore = other.Vcore
	}

	if (v.Version.IsUnknown() || v.Version.IsNull()) && !other.Version.IsUnknown() {
		v.Version = other.Version
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v ModelValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"availableOptions":     v.AvailableOptions,
		"datacenter":           v.Datacenter,
		"disk":                 v.Disk,
		"maximumAdditionnalIp": v.MaximumAdditionnalIp,
		"memory":               v.Memory,
		"name":                 v.Name,
		"offer":                v.Offer,
		"vcore":                v.Vcore,
		"version":              v.Version,
	}
}
func (v ModelValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["available_options"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["datacenter"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["disk"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["maximum_additionnal_ip"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["memory"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["offer"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vcore"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.AvailableOptions.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["available_options"] = val

		val, err = v.Datacenter.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["datacenter"] = val

		val, err = v.Disk.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["disk"] = val

		val, err = v.MaximumAdditionnalIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["maximum_additionnal_ip"] = val

		val, err = v.Memory.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["memory"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Offer.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["offer"] = val

		val, err = v.Vcore.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vcore"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ModelValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ModelValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ModelValue) String() string {
	return "ModelValue"
}

func (v ModelValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"available_options":      ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
			"datacenter":             ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
			"disk":                   ovhtypes.TfInt64Type{},
			"maximum_additionnal_ip": ovhtypes.TfInt64Type{},
			"memory":                 ovhtypes.TfInt64Type{},
			"name":                   ovhtypes.TfStringType{},
			"offer":                  ovhtypes.TfStringType{},
			"vcore":                  ovhtypes.TfInt64Type{},
			"version":                ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"available_options":      v.AvailableOptions,
			"datacenter":             v.Datacenter,
			"disk":                   v.Disk,
			"maximum_additionnal_ip": v.MaximumAdditionnalIp,
			"memory":                 v.Memory,
			"name":                   v.Name,
			"offer":                  v.Offer,
			"vcore":                  v.Vcore,
			"version":                v.Version,
		})

	return objVal, diags
}

func (v ModelValue) Equal(o attr.Value) bool {
	other, ok := o.(ModelValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AvailableOptions.Equal(other.AvailableOptions) {
		return false
	}

	if !v.Datacenter.Equal(other.Datacenter) {
		return false
	}

	if !v.Disk.Equal(other.Disk) {
		return false
	}

	if !v.MaximumAdditionnalIp.Equal(other.MaximumAdditionnalIp) {
		return false
	}

	if !v.Memory.Equal(other.Memory) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Offer.Equal(other.Offer) {
		return false
	}

	if !v.Vcore.Equal(other.Vcore) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v ModelValue) Type(ctx context.Context) attr.Type {
	return ModelType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ModelValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"available_options":      ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
		"datacenter":             ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
		"disk":                   ovhtypes.TfInt64Type{},
		"maximum_additionnal_ip": ovhtypes.TfInt64Type{},
		"memory":                 ovhtypes.TfInt64Type{},
		"name":                   ovhtypes.TfStringType{},
		"offer":                  ovhtypes.TfStringType{},
		"vcore":                  ovhtypes.TfInt64Type{},
		"version":                ovhtypes.TfStringType{},
	}
}

var _ basetypes.ObjectTypable = IamType{}

type IamType struct {
	basetypes.ObjectType
}

func (t IamType) Equal(o attr.Type) bool {
	other, ok := o.(IamType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t IamType) String() string {
	return "IamType"
}

func (t IamType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	displayNameAttribute, ok := attributes["display_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_name is missing from object`)

		return nil, diags
	}

	displayNameVal, ok := displayNameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_name expected to be ovhtypes.TfStringValue, was: %T`, displayNameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return nil, diags
	}

	tagsVal, ok := tagsAttribute.(ovhtypes.TfMapNestedValue[ovhtypes.TfStringValue])

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be ovhtypes.TfMapNestedValue[ovhtypes.TfStringValue], was: %T`, tagsAttribute))
	}

	urnAttribute, ok := attributes["urn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`urn is missing from object`)

		return nil, diags
	}

	urnVal, ok := urnAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`urn expected to be ovhtypes.TfStringValue, was: %T`, urnAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return IamValue{
		DisplayName: displayNameVal,
		Id:          idVal,
		Tags:        tagsVal,
		Urn:         urnVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewIamValueNull() IamValue {
	return IamValue{
		state: attr.ValueStateNull,
	}
}

func NewIamValueUnknown() IamValue {
	return IamValue{
		state: attr.ValueStateUnknown,
	}
}

func NewIamValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (IamValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing IamValue Attribute Value",
				"While creating a IamValue value, a missing attribute value was detected. "+
					"A IamValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IamValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid IamValue Attribute Type",
				"While creating a IamValue value, an invalid attribute value was detected. "+
					"A IamValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IamValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("IamValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra IamValue Attribute Value",
				"While creating a IamValue value, an extra attribute value was detected. "+
					"A IamValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra IamValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewIamValueUnknown(), diags
	}

	displayNameAttribute, ok := attributes["display_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_name is missing from object`)

		return NewIamValueUnknown(), diags
	}

	displayNameVal, ok := displayNameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_name expected to be ovhtypes.TfStringValue, was: %T`, displayNameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewIamValueUnknown(), diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return NewIamValueUnknown(), diags
	}

	tagsVal, ok := tagsAttribute.(ovhtypes.TfMapNestedValue[ovhtypes.TfStringValue])

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be ovhtypes.TfMapNestedValue[ovhtypes.TfStringValue], was: %T`, tagsAttribute))
	}

	urnAttribute, ok := attributes["urn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`urn is missing from object`)

		return NewIamValueUnknown(), diags
	}

	urnVal, ok := urnAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`urn expected to be ovhtypes.TfStringValue, was: %T`, urnAttribute))
	}

	if diags.HasError() {
		return NewIamValueUnknown(), diags
	}

	return IamValue{
		DisplayName: displayNameVal,
		Id:          idVal,
		Tags:        tagsVal,
		Urn:         urnVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewIamValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) IamValue {
	object, diags := NewIamValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewIamValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t IamType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewIamValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewIamValueUnknown(), nil
	}

	if in.IsNull() {
		return NewIamValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewIamValueMust(IamValue{}.AttributeTypes(ctx), attributes), nil
}

func (t IamType) ValueType(ctx context.Context) attr.Value {
	return IamValue{}
}

var _ basetypes.ObjectValuable = IamValue{}

type IamValue struct {
	DisplayName ovhtypes.TfStringValue                            `tfsdk:"display_name" json:"displayName"`
	Id          ovhtypes.TfStringValue                            `tfsdk:"id" json:"id"`
	Tags        ovhtypes.TfMapNestedValue[ovhtypes.TfStringValue] `tfsdk:"tags" json:"tags"`
	Urn         ovhtypes.TfStringValue                            `tfsdk:"urn" json:"urn"`
	state       attr.ValueState
}

type IamWritableValue struct {
	*IamValue   `json:"-"`
	DisplayName *ovhtypes.TfStringValue                            `json:"displayName,omitempty"`
	Id          *ovhtypes.TfStringValue                            `json:"id,omitempty"`
	Tags        *ovhtypes.TfMapNestedValue[ovhtypes.TfStringValue] `json:"tags,omitempty"`
	Urn         *ovhtypes.TfStringValue                            `json:"urn,omitempty"`
}

func (v IamValue) ToCreate() *IamWritableValue {
	res := &IamWritableValue{}

	if !v.Id.IsNull() {
		res.Id = &v.Id
	}

	if !v.Tags.IsNull() {
		res.Tags = &v.Tags
	}

	if !v.Urn.IsNull() {
		res.Urn = &v.Urn
	}

	if !v.DisplayName.IsNull() {
		res.DisplayName = &v.DisplayName
	}

	return res
}

func (v *IamValue) UnmarshalJSON(data []byte) error {
	type JsonIamValue IamValue

	var tmp JsonIamValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.DisplayName = tmp.DisplayName
	v.Id = tmp.Id
	v.Tags = tmp.Tags
	v.Urn = tmp.Urn

	v.state = attr.ValueStateKnown

	return nil
}

func (v *IamValue) MergeWith(other *IamValue) {

	if (v.DisplayName.IsUnknown() || v.DisplayName.IsNull()) && !other.DisplayName.IsUnknown() {
		v.DisplayName = other.DisplayName
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Tags.IsUnknown() || v.Tags.IsNull()) && !other.Tags.IsUnknown() {
		v.Tags = other.Tags
	}

	if (v.Urn.IsUnknown() || v.Urn.IsNull()) && !other.Urn.IsUnknown() {
		v.Urn = other.Urn
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v IamValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"displayName": v.DisplayName,
		"id":          v.Id,
		"tags":        v.Tags,
		"urn":         v.Urn,
	}
}
func (v IamValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["display_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tags"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["urn"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.DisplayName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display_name"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Tags.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tags"] = val

		val, err = v.Urn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["urn"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v IamValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v IamValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v IamValue) String() string {
	return "IamValue"
}

func (v IamValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"display_name": ovhtypes.TfStringType{},
			"id":           ovhtypes.TfStringType{},
			"tags":         ovhtypes.NewTfMapNestedType[ovhtypes.TfStringValue](ctx),
			"urn":          ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"display_name": v.DisplayName,
			"id":           v.Id,
			"tags":         v.Tags,
			"urn":          v.Urn,
		})

	return objVal, diags
}

func (v IamValue) Equal(o attr.Value) bool {
	other, ok := o.(IamValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DisplayName.Equal(other.DisplayName) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Tags.Equal(other.Tags) {
		return false
	}

	if !v.Urn.Equal(other.Urn) {
		return false
	}

	return true
}

func (v IamValue) Type(ctx context.Context) attr.Type {
	return IamType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v IamValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"display_name": ovhtypes.TfStringType{},
		"id":           ovhtypes.TfStringType{},
		"tags":         ovhtypes.NewTfMapNestedType[ovhtypes.TfStringValue](ctx),
		"urn":          ovhtypes.TfStringType{},
	}
}
