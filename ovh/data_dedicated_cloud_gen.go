// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func DedicatedCloudDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"advanced_security": schema.BoolAttribute{
			CustomType:          ovhtypes.TfBoolType{},
			Computed:            true,
			Description:         "Advanced security state",
			MarkdownDescription: "Advanced security state",
		},
		"bandwidth": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "The current bandwidth of your VMware on OVHcloud",
			MarkdownDescription: "The current bandwidth of your VMware on OVHcloud",
		},
		"billing_type": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Billing type of your VMware on OVHcloud",
			MarkdownDescription: "Billing type of your VMware on OVHcloud",
		},
		"can_migrate_to_vcd": schema.BoolAttribute{
			CustomType:          ovhtypes.TfBoolType{},
			Computed:            true,
			Description:         "Can the PCC be migrated to VCD",
			MarkdownDescription: "Can the PCC be migrated to VCD",
		},
		"certified_interface_url": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Url to the VMware on OVHcloud certified interface",
			MarkdownDescription: "Url to the VMware on OVHcloud certified interface",
		},
		"commercial_range": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "The current version of your VMware on OVHcloud",
			MarkdownDescription: "The current version of your VMware on OVHcloud",
		},
		"description": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Description of your VMware on OVHcloud",
			MarkdownDescription: "Description of your VMware on OVHcloud",
		},
		"generation": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Generation of your VMware on OVHcloud",
			MarkdownDescription: "Generation of your VMware on OVHcloud",
		},
		"iam": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"display_name": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Resource display name",
					MarkdownDescription: "Resource display name",
				},
				"id": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Unique identifier of the resource",
					MarkdownDescription: "Unique identifier of the resource",
				},
				"tags": schema.MapAttribute{
					CustomType:          ovhtypes.NewTfMapNestedType[ovhtypes.TfStringValue](ctx),
					Computed:            true,
					Description:         "Resource tags. Tags that were internally computed are prefixed with ovh:",
					MarkdownDescription: "Resource tags. Tags that were internally computed are prefixed with ovh:",
				},
				"urn": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Unique resource name used in policies",
					MarkdownDescription: "Unique resource name used in policies",
				},
			},
			CustomType: IamType{
				ObjectType: types.ObjectType{
					AttrTypes: IamValue{}.AttributeTypes(ctx),
				},
			},
			Computed:            true,
			Description:         "IAM resource metadata",
			MarkdownDescription: "IAM resource metadata",
		},
		"location": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Datacenter where your VMware on OVHcloud is physically located",
			MarkdownDescription: "Datacenter where your VMware on OVHcloud is physically located",
		},
		"management_interface": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "The management interface name",
			MarkdownDescription: "The management interface name",
		},
		"product_reference": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "The reference universe information for your VMware on OVHcloud",
			MarkdownDescription: "The reference universe information for your VMware on OVHcloud",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Domain of the service",
			MarkdownDescription: "Domain of the service",
		},
		"service_pack_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Name of the current service pack",
			MarkdownDescription: "Name of the current service pack",
		},
		"spla": schema.BoolAttribute{
			CustomType:          ovhtypes.TfBoolType{},
			Computed:            true,
			Description:         "SPLA licensing state",
			MarkdownDescription: "SPLA licensing state",
		},
		"ssl_v3": schema.BoolAttribute{
			CustomType:          ovhtypes.TfBoolType{},
			Computed:            true,
			Description:         "Enable SSL v3 support. Warning : this option is not recommended as it was recognized as a security breach. If this is enabled, we advise you to enable the filtered User access policy",
			MarkdownDescription: "Enable SSL v3 support. Warning : this option is not recommended as it was recognized as a security breach. If this is enabled, we advise you to enable the filtered User access policy",
		},
		"state": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Current state of your VMware on OVHcloud",
			MarkdownDescription: "Current state of your VMware on OVHcloud",
		},
		"user_access_policy": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Access policy of your VMware on OVHcloud : opened to every IPs or filtered",
			MarkdownDescription: "Access policy of your VMware on OVHcloud : opened to every IPs or filtered",
		},
		"user_limit_concurrent_session": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Computed:            true,
			Description:         "The maximum amount of connected users allowed on the VMware on OVHcloud management interface",
			MarkdownDescription: "The maximum amount of connected users allowed on the VMware on OVHcloud management interface",
		},
		"user_logout_policy": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Which user will be disconnected first in case of quota of maximum connection is reached",
			MarkdownDescription: "Which user will be disconnected first in case of quota of maximum connection is reached",
		},
		"user_session_timeout": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Computed:            true,
			Description:         "The timeout (in seconds) for the user sessions on the VMware on OVHcloud management interface. 0 value disable the timeout",
			MarkdownDescription: "The timeout (in seconds) for the user sessions on the VMware on OVHcloud management interface. 0 value disable the timeout",
		},
		"v_scope_url": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Url to the VMware on OVHcloud vScope interface",
			MarkdownDescription: "Url to the VMware on OVHcloud vScope interface",
		},
		"version": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"build": schema.StringAttribute{
					CustomType: ovhtypes.TfStringType{},
					Computed:   true,
				},
				"major": schema.StringAttribute{
					CustomType: ovhtypes.TfStringType{},
					Computed:   true,
				},
				"minor": schema.StringAttribute{
					CustomType: ovhtypes.TfStringType{},
					Computed:   true,
				},
			},
			CustomType: VersionType{
				ObjectType: types.ObjectType{
					AttrTypes: VersionValue{}.AttributeTypes(ctx),
				},
			},
			Computed:            true,
			Description:         "Version of the management interface",
			MarkdownDescription: "Version of the management interface",
		},
		"web_interface_url": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Url to the VMware on OVHcloud web interface",
			MarkdownDescription: "Url to the VMware on OVHcloud web interface",
		},
	}

	return schema.Schema{
		Description: "Get VMware on OVHcloud",
		Attributes:  attrs,
	}
}

type DedicatedCloudModel struct {
	AdvancedSecurity           ovhtypes.TfBoolValue   `tfsdk:"advanced_security" json:"advancedSecurity"`
	Bandwidth                  ovhtypes.TfStringValue `tfsdk:"bandwidth" json:"bandwidth"`
	BillingType                ovhtypes.TfStringValue `tfsdk:"billing_type" json:"billingType"`
	CanMigrateToVcd            ovhtypes.TfBoolValue   `tfsdk:"can_migrate_to_vcd" json:"canMigrateToVcd"`
	CertifiedInterfaceUrl      ovhtypes.TfStringValue `tfsdk:"certified_interface_url" json:"certifiedInterfaceUrl"`
	CommercialRange            ovhtypes.TfStringValue `tfsdk:"commercial_range" json:"commercialRange"`
	Description                ovhtypes.TfStringValue `tfsdk:"description" json:"description"`
	Generation                 ovhtypes.TfStringValue `tfsdk:"generation" json:"generation"`
	Iam                        IamValue               `tfsdk:"iam" json:"iam"`
	Location                   ovhtypes.TfStringValue `tfsdk:"location" json:"location"`
	ManagementInterface        ovhtypes.TfStringValue `tfsdk:"management_interface" json:"managementInterface"`
	ProductReference           ovhtypes.TfStringValue `tfsdk:"product_reference" json:"productReference"`
	ServiceName                ovhtypes.TfStringValue `tfsdk:"service_name" json:"serviceName"`
	ServicePackName            ovhtypes.TfStringValue `tfsdk:"service_pack_name" json:"servicePackName"`
	Spla                       ovhtypes.TfBoolValue   `tfsdk:"spla" json:"spla"`
	SslV3                      ovhtypes.TfBoolValue   `tfsdk:"ssl_v3" json:"sslV3"`
	State                      ovhtypes.TfStringValue `tfsdk:"state" json:"state"`
	UserAccessPolicy           ovhtypes.TfStringValue `tfsdk:"user_access_policy" json:"userAccessPolicy"`
	UserLimitConcurrentSession ovhtypes.TfInt64Value  `tfsdk:"user_limit_concurrent_session" json:"userLimitConcurrentSession"`
	UserLogoutPolicy           ovhtypes.TfStringValue `tfsdk:"user_logout_policy" json:"userLogoutPolicy"`
	UserSessionTimeout         ovhtypes.TfInt64Value  `tfsdk:"user_session_timeout" json:"userSessionTimeout"`
	VScopeUrl                  ovhtypes.TfStringValue `tfsdk:"v_scope_url" json:"vScopeUrl"`
	Version                    VersionValue           `tfsdk:"version" json:"version"`
	WebInterfaceUrl            ovhtypes.TfStringValue `tfsdk:"web_interface_url" json:"webInterfaceUrl"`
}

func (v *DedicatedCloudModel) MergeWith(other *DedicatedCloudModel) {

	if (v.AdvancedSecurity.IsUnknown() || v.AdvancedSecurity.IsNull()) && !other.AdvancedSecurity.IsUnknown() {
		v.AdvancedSecurity = other.AdvancedSecurity
	}

	if (v.Bandwidth.IsUnknown() || v.Bandwidth.IsNull()) && !other.Bandwidth.IsUnknown() {
		v.Bandwidth = other.Bandwidth
	}

	if (v.BillingType.IsUnknown() || v.BillingType.IsNull()) && !other.BillingType.IsUnknown() {
		v.BillingType = other.BillingType
	}

	if (v.CanMigrateToVcd.IsUnknown() || v.CanMigrateToVcd.IsNull()) && !other.CanMigrateToVcd.IsUnknown() {
		v.CanMigrateToVcd = other.CanMigrateToVcd
	}

	if (v.CertifiedInterfaceUrl.IsUnknown() || v.CertifiedInterfaceUrl.IsNull()) && !other.CertifiedInterfaceUrl.IsUnknown() {
		v.CertifiedInterfaceUrl = other.CertifiedInterfaceUrl
	}

	if (v.CommercialRange.IsUnknown() || v.CommercialRange.IsNull()) && !other.CommercialRange.IsUnknown() {
		v.CommercialRange = other.CommercialRange
	}

	if (v.Description.IsUnknown() || v.Description.IsNull()) && !other.Description.IsUnknown() {
		v.Description = other.Description
	}

	if (v.Generation.IsUnknown() || v.Generation.IsNull()) && !other.Generation.IsUnknown() {
		v.Generation = other.Generation
	}

	if (v.Iam.IsUnknown() || v.Iam.IsNull()) && !other.Iam.IsUnknown() {
		v.Iam = other.Iam
	}

	if (v.Location.IsUnknown() || v.Location.IsNull()) && !other.Location.IsUnknown() {
		v.Location = other.Location
	}

	if (v.ManagementInterface.IsUnknown() || v.ManagementInterface.IsNull()) && !other.ManagementInterface.IsUnknown() {
		v.ManagementInterface = other.ManagementInterface
	}

	if (v.ProductReference.IsUnknown() || v.ProductReference.IsNull()) && !other.ProductReference.IsUnknown() {
		v.ProductReference = other.ProductReference
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.ServicePackName.IsUnknown() || v.ServicePackName.IsNull()) && !other.ServicePackName.IsUnknown() {
		v.ServicePackName = other.ServicePackName
	}

	if (v.Spla.IsUnknown() || v.Spla.IsNull()) && !other.Spla.IsUnknown() {
		v.Spla = other.Spla
	}

	if (v.SslV3.IsUnknown() || v.SslV3.IsNull()) && !other.SslV3.IsUnknown() {
		v.SslV3 = other.SslV3
	}

	if (v.State.IsUnknown() || v.State.IsNull()) && !other.State.IsUnknown() {
		v.State = other.State
	}

	if (v.UserAccessPolicy.IsUnknown() || v.UserAccessPolicy.IsNull()) && !other.UserAccessPolicy.IsUnknown() {
		v.UserAccessPolicy = other.UserAccessPolicy
	}

	if (v.UserLimitConcurrentSession.IsUnknown() || v.UserLimitConcurrentSession.IsNull()) && !other.UserLimitConcurrentSession.IsUnknown() {
		v.UserLimitConcurrentSession = other.UserLimitConcurrentSession
	}

	if (v.UserLogoutPolicy.IsUnknown() || v.UserLogoutPolicy.IsNull()) && !other.UserLogoutPolicy.IsUnknown() {
		v.UserLogoutPolicy = other.UserLogoutPolicy
	}

	if (v.UserSessionTimeout.IsUnknown() || v.UserSessionTimeout.IsNull()) && !other.UserSessionTimeout.IsUnknown() {
		v.UserSessionTimeout = other.UserSessionTimeout
	}

	if (v.VScopeUrl.IsUnknown() || v.VScopeUrl.IsNull()) && !other.VScopeUrl.IsUnknown() {
		v.VScopeUrl = other.VScopeUrl
	}

	if (v.Version.IsUnknown() || v.Version.IsNull()) && !other.Version.IsUnknown() {
		v.Version = other.Version
	}

	if (v.WebInterfaceUrl.IsUnknown() || v.WebInterfaceUrl.IsNull()) && !other.WebInterfaceUrl.IsUnknown() {
		v.WebInterfaceUrl = other.WebInterfaceUrl
	}

}

var _ basetypes.ObjectTypable = VersionType{}

type VersionType struct {
	basetypes.ObjectType
}

func (t VersionType) Equal(o attr.Type) bool {
	other, ok := o.(VersionType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t VersionType) String() string {
	return "VersionType"
}

func (t VersionType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	buildAttribute, ok := attributes["build"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`build is missing from object`)

		return nil, diags
	}

	buildVal, ok := buildAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`build expected to be ovhtypes.TfStringValue, was: %T`, buildAttribute))
	}

	majorAttribute, ok := attributes["major"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`major is missing from object`)

		return nil, diags
	}

	majorVal, ok := majorAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`major expected to be ovhtypes.TfStringValue, was: %T`, majorAttribute))
	}

	minorAttribute, ok := attributes["minor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minor is missing from object`)

		return nil, diags
	}

	minorVal, ok := minorAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minor expected to be ovhtypes.TfStringValue, was: %T`, minorAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return VersionValue{
		Build: buildVal,
		Major: majorVal,
		Minor: minorVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewVersionValueNull() VersionValue {
	return VersionValue{
		state: attr.ValueStateNull,
	}
}

func NewVersionValueUnknown() VersionValue {
	return VersionValue{
		state: attr.ValueStateUnknown,
	}
}

func NewVersionValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (VersionValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing VersionValue Attribute Value",
				"While creating a VersionValue value, a missing attribute value was detected. "+
					"A VersionValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VersionValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid VersionValue Attribute Type",
				"While creating a VersionValue value, an invalid attribute value was detected. "+
					"A VersionValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VersionValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("VersionValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra VersionValue Attribute Value",
				"While creating a VersionValue value, an extra attribute value was detected. "+
					"A VersionValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra VersionValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewVersionValueUnknown(), diags
	}

	buildAttribute, ok := attributes["build"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`build is missing from object`)

		return NewVersionValueUnknown(), diags
	}

	buildVal, ok := buildAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`build expected to be ovhtypes.TfStringValue, was: %T`, buildAttribute))
	}

	majorAttribute, ok := attributes["major"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`major is missing from object`)

		return NewVersionValueUnknown(), diags
	}

	majorVal, ok := majorAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`major expected to be ovhtypes.TfStringValue, was: %T`, majorAttribute))
	}

	minorAttribute, ok := attributes["minor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`minor is missing from object`)

		return NewVersionValueUnknown(), diags
	}

	minorVal, ok := minorAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`minor expected to be ovhtypes.TfStringValue, was: %T`, minorAttribute))
	}

	if diags.HasError() {
		return NewVersionValueUnknown(), diags
	}

	return VersionValue{
		Build: buildVal,
		Major: majorVal,
		Minor: minorVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewVersionValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) VersionValue {
	object, diags := NewVersionValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewVersionValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t VersionType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewVersionValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewVersionValueUnknown(), nil
	}

	if in.IsNull() {
		return NewVersionValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewVersionValueMust(VersionValue{}.AttributeTypes(ctx), attributes), nil
}

func (t VersionType) ValueType(ctx context.Context) attr.Value {
	return VersionValue{}
}

var _ basetypes.ObjectValuable = VersionValue{}

type VersionValue struct {
	Build ovhtypes.TfStringValue `tfsdk:"build" json:"build"`
	Major ovhtypes.TfStringValue `tfsdk:"major" json:"major"`
	Minor ovhtypes.TfStringValue `tfsdk:"minor" json:"minor"`
	state attr.ValueState
}

func (v *VersionValue) UnmarshalJSON(data []byte) error {
	type JsonVersionValue VersionValue

	var tmp JsonVersionValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.Build = tmp.Build
	v.Major = tmp.Major
	v.Minor = tmp.Minor

	v.state = attr.ValueStateKnown

	return nil
}

func (v *VersionValue) MergeWith(other *VersionValue) {

	if (v.Build.IsUnknown() || v.Build.IsNull()) && !other.Build.IsUnknown() {
		v.Build = other.Build
	}

	if (v.Major.IsUnknown() || v.Major.IsNull()) && !other.Major.IsUnknown() {
		v.Major = other.Major
	}

	if (v.Minor.IsUnknown() || v.Minor.IsNull()) && !other.Minor.IsUnknown() {
		v.Minor = other.Minor
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v VersionValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"build": v.Build,
		"major": v.Major,
		"minor": v.Minor,
	}
}
func (v VersionValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["build"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["major"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["minor"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Build.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["build"] = val

		val, err = v.Major.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["major"] = val

		val, err = v.Minor.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["minor"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v VersionValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v VersionValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v VersionValue) String() string {
	return "VersionValue"
}

func (v VersionValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"build": ovhtypes.TfStringType{},
			"major": ovhtypes.TfStringType{},
			"minor": ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"build": v.Build,
			"major": v.Major,
			"minor": v.Minor,
		})

	return objVal, diags
}

func (v VersionValue) Equal(o attr.Value) bool {
	other, ok := o.(VersionValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Build.Equal(other.Build) {
		return false
	}

	if !v.Major.Equal(other.Major) {
		return false
	}

	if !v.Minor.Equal(other.Minor) {
		return false
	}

	return true
}

func (v VersionValue) Type(ctx context.Context) attr.Type {
	return VersionType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v VersionValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"build": ovhtypes.TfStringType{},
		"major": ovhtypes.TfStringType{},
		"minor": ovhtypes.TfStringType{},
	}
}
