// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	ovhtypes "github.com/ovh/terraform-provider-ovh/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
)

func IploadbalancingUdpFrontendResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"dedicated_ipfo": schema.ListAttribute{
				CustomType:          ovhtypes.NewTfListNestedType[ovhtypes.TfStringValue](ctx),
				Optional:            true,
				Description:         "Only attach frontend on these ip. No restriction if null",
				MarkdownDescription: "Only attach frontend on these ip. No restriction if null",
			},
			"default_farm_id": schema.Int64Attribute{
				CustomType:          ovhtypes.TfInt64Type{},
				Optional:            true,
				Description:         "Default UDP Farm of your frontend",
				MarkdownDescription: "Default UDP Farm of your frontend",
			},
			"disabled": schema.BoolAttribute{
				CustomType:          ovhtypes.TfBoolType{},
				Optional:            true,
				Description:         "Disable your frontend. Default: 'false'",
				MarkdownDescription: "Disable your frontend. Default: 'false'",
			},
			"display_name": schema.StringAttribute{
				CustomType:          ovhtypes.TfStringType{},
				Optional:            true,
				Description:         "Human readable name for your frontend, this field is for you",
				MarkdownDescription: "Human readable name for your frontend, this field is for you",
			},
			"frontend_id": schema.Int64Attribute{
				CustomType:          ovhtypes.TfInt64Type{},
				Computed:            true,
				Description:         "Id of your frontend",
				MarkdownDescription: "Id of your frontend",
			},
			"port": schema.StringAttribute{
				CustomType:          ovhtypes.TfStringType{},
				Required:            true,
				Description:         "Port(s) attached to your frontend. Supports single port (numerical value), range (2 dash-delimited increasing ports) and comma-separated list of 'single port' and/or 'range'. Each port must be in the [1;49151] range.",
				MarkdownDescription: "Port(s) attached to your frontend. Supports single port (numerical value), range (2 dash-delimited increasing ports) and comma-separated list of 'single port' and/or 'range'. Each port must be in the [1;49151] range.",
			},
			"service_name": schema.StringAttribute{
				CustomType:          ovhtypes.TfStringType{},
				Required:            true,
				Description:         "The internal name of your IP load balancing",
				MarkdownDescription: "The internal name of your IP load balancing",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"zone": schema.StringAttribute{
				CustomType:          ovhtypes.TfStringType{},
				Required:            true,
				Description:         "Zone of your frontend. Use \"all\" for all owned zone.",
				MarkdownDescription: "Zone of your frontend. Use \"all\" for all owned zone.",
			},
		},
	}
}

type IploadbalancingUdpFrontendModel struct {
	DedicatedIpfo ovhtypes.TfListNestedValue[ovhtypes.TfStringValue] `tfsdk:"dedicated_ipfo" json:"dedicatedIpfo"`
	DefaultFarmId ovhtypes.TfInt64Value                              `tfsdk:"default_farm_id" json:"defaultFarmId"`
	Disabled      ovhtypes.TfBoolValue                               `tfsdk:"disabled" json:"disabled"`
	DisplayName   ovhtypes.TfStringValue                             `tfsdk:"display_name" json:"displayName"`
	FrontendId    ovhtypes.TfInt64Value                              `tfsdk:"frontend_id" json:"frontendId"`
	Port          ovhtypes.TfStringValue                             `tfsdk:"port" json:"port"`
	ServiceName   ovhtypes.TfStringValue                             `tfsdk:"service_name" json:"serviceName"`
	Zone          ovhtypes.TfStringValue                             `tfsdk:"zone" json:"zone"`
}

func (v *IploadbalancingUdpFrontendModel) MergeWith(other *IploadbalancingUdpFrontendModel) {

	if (v.DedicatedIpfo.IsUnknown() || v.DedicatedIpfo.IsNull()) && !other.DedicatedIpfo.IsUnknown() {
		v.DedicatedIpfo = other.DedicatedIpfo
	}

	if (v.DefaultFarmId.IsUnknown() || v.DefaultFarmId.IsNull()) && !other.DefaultFarmId.IsUnknown() {
		v.DefaultFarmId = other.DefaultFarmId
	}

	if (v.Disabled.IsUnknown() || v.Disabled.IsNull()) && !other.Disabled.IsUnknown() {
		v.Disabled = other.Disabled
	}

	if (v.DisplayName.IsUnknown() || v.DisplayName.IsNull()) && !other.DisplayName.IsUnknown() {
		v.DisplayName = other.DisplayName
	}

	if (v.FrontendId.IsUnknown() || v.FrontendId.IsNull()) && !other.FrontendId.IsUnknown() {
		v.FrontendId = other.FrontendId
	}

	if (v.Port.IsUnknown() || v.Port.IsNull()) && !other.Port.IsUnknown() {
		v.Port = other.Port
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.Zone.IsUnknown() || v.Zone.IsNull()) && !other.Zone.IsUnknown() {
		v.Zone = other.Zone
	}

}

type IploadbalancingUdpFrontendWritableModel struct {
	DedicatedIpfo *ovhtypes.TfListNestedValue[ovhtypes.TfStringValue] `tfsdk:"dedicated_ipfo" json:"dedicatedIpfo,omitempty"`
	DefaultFarmId *ovhtypes.TfInt64Value                              `tfsdk:"default_farm_id" json:"defaultFarmId,omitempty"`
	Disabled      *ovhtypes.TfBoolValue                               `tfsdk:"disabled" json:"disabled,omitempty"`
	DisplayName   *ovhtypes.TfStringValue                             `tfsdk:"display_name" json:"displayName,omitempty"`
	Port          *ovhtypes.TfStringValue                             `tfsdk:"port" json:"port,omitempty"`
	Zone          *ovhtypes.TfStringValue                             `tfsdk:"zone" json:"zone,omitempty"`
}

func (v IploadbalancingUdpFrontendModel) ToCreate() *IploadbalancingUdpFrontendWritableModel {
	res := &IploadbalancingUdpFrontendWritableModel{}

	if !v.DedicatedIpfo.IsUnknown() {
		res.DedicatedIpfo = &v.DedicatedIpfo
	}

	if !v.DefaultFarmId.IsUnknown() {
		res.DefaultFarmId = &v.DefaultFarmId
	}

	if !v.Disabled.IsUnknown() {
		res.Disabled = &v.Disabled
	}

	if !v.DisplayName.IsUnknown() {
		res.DisplayName = &v.DisplayName
	}

	if !v.Port.IsUnknown() {
		res.Port = &v.Port
	}

	if !v.Zone.IsUnknown() {
		res.Zone = &v.Zone
	}

	return res
}

func (v IploadbalancingUdpFrontendModel) ToUpdate() *IploadbalancingUdpFrontendWritableModel {
	res := &IploadbalancingUdpFrontendWritableModel{}

	if !v.DedicatedIpfo.IsUnknown() {
		res.DedicatedIpfo = &v.DedicatedIpfo
	}

	if !v.DefaultFarmId.IsUnknown() {
		res.DefaultFarmId = &v.DefaultFarmId
	}

	if !v.Disabled.IsUnknown() {
		res.Disabled = &v.Disabled
	}

	if !v.DisplayName.IsUnknown() {
		res.DisplayName = &v.DisplayName
	}

	if !v.Port.IsUnknown() {
		res.Port = &v.Port
	}

	if !v.Zone.IsUnknown() {
		res.Zone = &v.Zone
	}

	return res
}
