// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	ovhtypes "github.com/ovh/terraform-provider-ovh/ovh/types"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func CloudProjectFloatingipsDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"cloud_project_floatingips": schema.SetNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"associated_entity": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"gateway_id": schema.StringAttribute{
								CustomType:          ovhtypes.TfStringType{},
								Computed:            true,
								Description:         "ID of the gateway",
								MarkdownDescription: "ID of the gateway",
							},
							"id": schema.StringAttribute{
								CustomType:          ovhtypes.TfStringType{},
								Computed:            true,
								Description:         "ID of the port",
								MarkdownDescription: "ID of the port",
							},
							"ip": schema.StringAttribute{
								CustomType:          ovhtypes.TfStringType{},
								Computed:            true,
								Description:         "IP of the port",
								MarkdownDescription: "IP of the port",
							},
							"type": schema.StringAttribute{
								CustomType:          ovhtypes.TfStringType{},
								Computed:            true,
								Description:         "Type of the port",
								MarkdownDescription: "Type of the port",
							},
						},
						CustomType: CloudProjectFloatingipsAssociatedEntityType{
							ObjectType: types.ObjectType{
								AttrTypes: CloudProjectFloatingipsAssociatedEntityValue{}.AttributeTypes(ctx),
							},
						},
						Computed:            true,
						Description:         "Associated entity with the floating ip",
						MarkdownDescription: "Associated entity with the floating ip",
					},
					"id": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "ID of the floating ip",
						MarkdownDescription: "ID of the floating ip",
					},
					"ip": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Value of the floating ip",
						MarkdownDescription: "Value of the floating ip",
					},
					"network_id": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "ID of the network",
						MarkdownDescription: "ID of the network",
					},
					"region": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Floating ip region",
						MarkdownDescription: "Floating ip region",
					},
					"status": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Status of the floating ip",
						MarkdownDescription: "Status of the floating ip",
					},
				},
				CustomType: CloudProjectFloatingipsType{
					ObjectType: types.ObjectType{
						AttrTypes: CloudProjectFloatingipsValue{}.AttributeTypes(ctx),
					},
				},
			},
			CustomType: ovhtypes.NewTfListNestedType[CloudProjectFloatingipsValue](ctx),
			Computed:   true,
		},
		"region_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Region name",
			MarkdownDescription: "Region name",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
	}

	return schema.Schema{
		Attributes: attrs,
	}
}

type CloudProjectFloatingipsModel struct {
	CloudProjectFloatingips ovhtypes.TfListNestedValue[CloudProjectFloatingipsValue] `tfsdk:"cloud_project_floatingips" json:"cloudProjectFloatingips"`
	RegionName              ovhtypes.TfStringValue                                   `tfsdk:"region_name" json:"regionName"`
	ServiceName             ovhtypes.TfStringValue                                   `tfsdk:"service_name" json:"serviceName"`
}

func (v *CloudProjectFloatingipsModel) MergeWith(other *CloudProjectFloatingipsModel) {

	if (v.CloudProjectFloatingips.IsUnknown() || v.CloudProjectFloatingips.IsNull()) && !other.CloudProjectFloatingips.IsUnknown() {
		v.CloudProjectFloatingips = other.CloudProjectFloatingips
	}

	if (v.RegionName.IsUnknown() || v.RegionName.IsNull()) && !other.RegionName.IsUnknown() {
		v.RegionName = other.RegionName
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

}

var _ basetypes.ObjectTypable = CloudProjectFloatingipsType{}

type CloudProjectFloatingipsType struct {
	basetypes.ObjectType
}

func (t CloudProjectFloatingipsType) Equal(o attr.Type) bool {
	other, ok := o.(CloudProjectFloatingipsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CloudProjectFloatingipsType) String() string {
	return "CloudProjectFloatingipsType"
}

func (t CloudProjectFloatingipsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	associatedEntityAttribute, ok := attributes["associated_entity"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`associated_entity is missing from object`)

		return nil, diags
	}

	associatedEntityVal, ok := associatedEntityAttribute.(CloudProjectFloatingipsAssociatedEntityValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`associated_entity expected to be CloudProjectFloatingipsAssociatedEntityValue, was: %T`, associatedEntityAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return nil, diags
	}

	ipVal, ok := ipAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be ovhtypes.TfStringValue, was: %T`, ipAttribute))
	}

	networkIdAttribute, ok := attributes["network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_id is missing from object`)

		return nil, diags
	}

	networkIdVal, ok := networkIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_id expected to be ovhtypes.TfStringValue, was: %T`, networkIdAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return nil, diags
	}

	regionVal, ok := regionAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be ovhtypes.TfStringValue, was: %T`, regionAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be ovhtypes.TfStringValue, was: %T`, statusAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CloudProjectFloatingipsValue{
		AssociatedEntity: associatedEntityVal,
		Id:               idVal,
		Ip:               ipVal,
		NetworkId:        networkIdVal,
		Region:           regionVal,
		Status:           statusVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectFloatingipsValueNull() CloudProjectFloatingipsValue {
	return CloudProjectFloatingipsValue{
		state: attr.ValueStateNull,
	}
}

func NewCloudProjectFloatingipsValueUnknown() CloudProjectFloatingipsValue {
	return CloudProjectFloatingipsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCloudProjectFloatingipsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CloudProjectFloatingipsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CloudProjectFloatingipsValue Attribute Value",
				"While creating a CloudProjectFloatingipsValue value, a missing attribute value was detected. "+
					"A CloudProjectFloatingipsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectFloatingipsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CloudProjectFloatingipsValue Attribute Type",
				"While creating a CloudProjectFloatingipsValue value, an invalid attribute value was detected. "+
					"A CloudProjectFloatingipsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectFloatingipsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CloudProjectFloatingipsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CloudProjectFloatingipsValue Attribute Value",
				"While creating a CloudProjectFloatingipsValue value, an extra attribute value was detected. "+
					"A CloudProjectFloatingipsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CloudProjectFloatingipsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCloudProjectFloatingipsValueUnknown(), diags
	}

	associatedEntityAttribute, ok := attributes["associated_entity"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`associated_entity is missing from object`)

		return NewCloudProjectFloatingipsValueUnknown(), diags
	}

	associatedEntityVal, ok := associatedEntityAttribute.(CloudProjectFloatingipsAssociatedEntityValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`associated_entity expected to be CloudProjectFloatingipsAssociatedEntityValue, was: %T`, associatedEntityAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewCloudProjectFloatingipsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return NewCloudProjectFloatingipsValueUnknown(), diags
	}

	ipVal, ok := ipAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be ovhtypes.TfStringValue, was: %T`, ipAttribute))
	}

	networkIdAttribute, ok := attributes["network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`network_id is missing from object`)

		return NewCloudProjectFloatingipsValueUnknown(), diags
	}

	networkIdVal, ok := networkIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`network_id expected to be ovhtypes.TfStringValue, was: %T`, networkIdAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return NewCloudProjectFloatingipsValueUnknown(), diags
	}

	regionVal, ok := regionAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be ovhtypes.TfStringValue, was: %T`, regionAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewCloudProjectFloatingipsValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be ovhtypes.TfStringValue, was: %T`, statusAttribute))
	}

	if diags.HasError() {
		return NewCloudProjectFloatingipsValueUnknown(), diags
	}

	return CloudProjectFloatingipsValue{
		AssociatedEntity: associatedEntityVal,
		Id:               idVal,
		Ip:               ipVal,
		NetworkId:        networkIdVal,
		Region:           regionVal,
		Status:           statusVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectFloatingipsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CloudProjectFloatingipsValue {
	object, diags := NewCloudProjectFloatingipsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCloudProjectFloatingipsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CloudProjectFloatingipsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCloudProjectFloatingipsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCloudProjectFloatingipsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCloudProjectFloatingipsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCloudProjectFloatingipsValueMust(CloudProjectFloatingipsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CloudProjectFloatingipsType) ValueType(ctx context.Context) attr.Value {
	return CloudProjectFloatingipsValue{}
}

var _ basetypes.ObjectValuable = CloudProjectFloatingipsValue{}

type CloudProjectFloatingipsValue struct {
	AssociatedEntity CloudProjectFloatingipsAssociatedEntityValue `tfsdk:"associated_entity" json:"associatedEntity"`
	Id               ovhtypes.TfStringValue                       `tfsdk:"id" json:"id"`
	Ip               ovhtypes.TfStringValue                       `tfsdk:"ip" json:"ip"`
	NetworkId        ovhtypes.TfStringValue                       `tfsdk:"network_id" json:"networkId"`
	Region           ovhtypes.TfStringValue                       `tfsdk:"region" json:"region"`
	Status           ovhtypes.TfStringValue                       `tfsdk:"status" json:"status"`
	state            attr.ValueState
}

func (v *CloudProjectFloatingipsValue) UnmarshalJSON(data []byte) error {
	type JsonCloudProjectFloatingipsValue CloudProjectFloatingipsValue

	var tmp JsonCloudProjectFloatingipsValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.AssociatedEntity = tmp.AssociatedEntity
	v.Id = tmp.Id
	v.Ip = tmp.Ip
	v.NetworkId = tmp.NetworkId
	v.Region = tmp.Region
	v.Status = tmp.Status

	v.state = attr.ValueStateKnown

	return nil
}

func (v *CloudProjectFloatingipsValue) MergeWith(other *CloudProjectFloatingipsValue) {

	if (v.AssociatedEntity.IsUnknown() || v.AssociatedEntity.IsNull()) && !other.AssociatedEntity.IsUnknown() {
		v.AssociatedEntity = other.AssociatedEntity
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Ip.IsUnknown() || v.Ip.IsNull()) && !other.Ip.IsUnknown() {
		v.Ip = other.Ip
	}

	if (v.NetworkId.IsUnknown() || v.NetworkId.IsNull()) && !other.NetworkId.IsUnknown() {
		v.NetworkId = other.NetworkId
	}

	if (v.Region.IsUnknown() || v.Region.IsNull()) && !other.Region.IsUnknown() {
		v.Region = other.Region
	}

	if (v.Status.IsUnknown() || v.Status.IsNull()) && !other.Status.IsUnknown() {
		v.Status = other.Status
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v CloudProjectFloatingipsValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"associatedEntity": v.AssociatedEntity,
		"id":               v.Id,
		"ip":               v.Ip,
		"networkId":        v.NetworkId,
		"region":           v.Region,
		"status":           v.Status,
	}
}
func (v CloudProjectFloatingipsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["associated_entity"] = basetypes.ObjectType{
		AttrTypes: CloudProjectFloatingipsAssociatedEntityValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["network_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["region"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.AssociatedEntity.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["associated_entity"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Ip.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip"] = val

		val, err = v.NetworkId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["network_id"] = val

		val, err = v.Region.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["region"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CloudProjectFloatingipsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CloudProjectFloatingipsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CloudProjectFloatingipsValue) String() string {
	return "CloudProjectFloatingipsValue"
}

func (v CloudProjectFloatingipsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"associated_entity": CloudProjectFloatingipsAssociatedEntityType{
				basetypes.ObjectType{
					AttrTypes: CloudProjectFloatingipsAssociatedEntityValue{}.AttributeTypes(ctx),
				},
			},
			"id":         ovhtypes.TfStringType{},
			"ip":         ovhtypes.TfStringType{},
			"network_id": ovhtypes.TfStringType{},
			"region":     ovhtypes.TfStringType{},
			"status":     ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"associated_entity": v.AssociatedEntity,
			"id":                v.Id,
			"ip":                v.Ip,
			"network_id":        v.NetworkId,
			"region":            v.Region,
			"status":            v.Status,
		})

	return objVal, diags
}

func (v CloudProjectFloatingipsValue) Equal(o attr.Value) bool {
	other, ok := o.(CloudProjectFloatingipsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AssociatedEntity.Equal(other.AssociatedEntity) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Ip.Equal(other.Ip) {
		return false
	}

	if !v.NetworkId.Equal(other.NetworkId) {
		return false
	}

	if !v.Region.Equal(other.Region) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	return true
}

func (v CloudProjectFloatingipsValue) Type(ctx context.Context) attr.Type {
	return CloudProjectFloatingipsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CloudProjectFloatingipsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"associated_entity": CloudProjectFloatingipsAssociatedEntityValue{}.Type(ctx),
		"id":                ovhtypes.TfStringType{},
		"ip":                ovhtypes.TfStringType{},
		"network_id":        ovhtypes.TfStringType{},
		"region":            ovhtypes.TfStringType{},
		"status":            ovhtypes.TfStringType{},
	}
}

var _ basetypes.ObjectTypable = CloudProjectFloatingipsAssociatedEntityType{}

type CloudProjectFloatingipsAssociatedEntityType struct {
	basetypes.ObjectType
}

func (t CloudProjectFloatingipsAssociatedEntityType) Equal(o attr.Type) bool {
	other, ok := o.(CloudProjectFloatingipsAssociatedEntityType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CloudProjectFloatingipsAssociatedEntityType) String() string {
	return "CloudProjectFloatingipsAssociatedEntityType"
}

func (t CloudProjectFloatingipsAssociatedEntityType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	gatewayIdAttribute, ok := attributes["gateway_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gateway_id is missing from object`)

		return nil, diags
	}

	gatewayIdVal, ok := gatewayIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gateway_id expected to be ovhtypes.TfStringValue, was: %T`, gatewayIdAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return nil, diags
	}

	ipVal, ok := ipAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be ovhtypes.TfStringValue, was: %T`, ipAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be ovhtypes.TfStringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CloudProjectFloatingipsAssociatedEntityValue{
		GatewayId: gatewayIdVal,
		Id:        idVal,
		Ip:        ipVal,
		CloudProjectFloatingipsAssociatedEntityType: typeVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectFloatingipsAssociatedEntityValueNull() CloudProjectFloatingipsAssociatedEntityValue {
	return CloudProjectFloatingipsAssociatedEntityValue{
		state: attr.ValueStateNull,
	}
}

func NewCloudProjectFloatingipsAssociatedEntityValueUnknown() CloudProjectFloatingipsAssociatedEntityValue {
	return CloudProjectFloatingipsAssociatedEntityValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCloudProjectFloatingipsAssociatedEntityValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CloudProjectFloatingipsAssociatedEntityValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CloudProjectFloatingipsAssociatedEntityValue Attribute Value",
				"While creating a CloudProjectFloatingipsAssociatedEntityValue value, a missing attribute value was detected. "+
					"A CloudProjectFloatingipsAssociatedEntityValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectFloatingipsAssociatedEntityValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CloudProjectFloatingipsAssociatedEntityValue Attribute Type",
				"While creating a CloudProjectFloatingipsAssociatedEntityValue value, an invalid attribute value was detected. "+
					"A CloudProjectFloatingipsAssociatedEntityValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectFloatingipsAssociatedEntityValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CloudProjectFloatingipsAssociatedEntityValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CloudProjectFloatingipsAssociatedEntityValue Attribute Value",
				"While creating a CloudProjectFloatingipsAssociatedEntityValue value, an extra attribute value was detected. "+
					"A CloudProjectFloatingipsAssociatedEntityValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CloudProjectFloatingipsAssociatedEntityValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCloudProjectFloatingipsAssociatedEntityValueUnknown(), diags
	}

	gatewayIdAttribute, ok := attributes["gateway_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gateway_id is missing from object`)

		return NewCloudProjectFloatingipsAssociatedEntityValueUnknown(), diags
	}

	gatewayIdVal, ok := gatewayIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gateway_id expected to be ovhtypes.TfStringValue, was: %T`, gatewayIdAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewCloudProjectFloatingipsAssociatedEntityValueUnknown(), diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return NewCloudProjectFloatingipsAssociatedEntityValueUnknown(), diags
	}

	ipVal, ok := ipAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be ovhtypes.TfStringValue, was: %T`, ipAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewCloudProjectFloatingipsAssociatedEntityValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be ovhtypes.TfStringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewCloudProjectFloatingipsAssociatedEntityValueUnknown(), diags
	}

	return CloudProjectFloatingipsAssociatedEntityValue{
		GatewayId: gatewayIdVal,
		Id:        idVal,
		Ip:        ipVal,
		CloudProjectFloatingipsAssociatedEntityType: typeVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectFloatingipsAssociatedEntityValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CloudProjectFloatingipsAssociatedEntityValue {
	object, diags := NewCloudProjectFloatingipsAssociatedEntityValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCloudProjectFloatingipsAssociatedEntityValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CloudProjectFloatingipsAssociatedEntityType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCloudProjectFloatingipsAssociatedEntityValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCloudProjectFloatingipsAssociatedEntityValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCloudProjectFloatingipsAssociatedEntityValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCloudProjectFloatingipsAssociatedEntityValueMust(CloudProjectFloatingipsAssociatedEntityValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CloudProjectFloatingipsAssociatedEntityType) ValueType(ctx context.Context) attr.Value {
	return CloudProjectFloatingipsAssociatedEntityValue{}
}

var _ basetypes.ObjectValuable = CloudProjectFloatingipsAssociatedEntityValue{}

type CloudProjectFloatingipsAssociatedEntityValue struct {
	GatewayId                                   ovhtypes.TfStringValue `tfsdk:"gateway_id" json:"gatewayId"`
	Id                                          ovhtypes.TfStringValue `tfsdk:"id" json:"id"`
	Ip                                          ovhtypes.TfStringValue `tfsdk:"ip" json:"ip"`
	CloudProjectFloatingipsAssociatedEntityType ovhtypes.TfStringValue `tfsdk:"type" json:"type"`
	state                                       attr.ValueState
}

func (v *CloudProjectFloatingipsAssociatedEntityValue) UnmarshalJSON(data []byte) error {
	type JsonCloudProjectFloatingipsAssociatedEntityValue CloudProjectFloatingipsAssociatedEntityValue

	var tmp JsonCloudProjectFloatingipsAssociatedEntityValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.GatewayId = tmp.GatewayId
	v.Id = tmp.Id
	v.Ip = tmp.Ip
	v.CloudProjectFloatingipsAssociatedEntityType = tmp.CloudProjectFloatingipsAssociatedEntityType

	v.state = attr.ValueStateKnown

	return nil
}

func (v *CloudProjectFloatingipsAssociatedEntityValue) MergeWith(other *CloudProjectFloatingipsAssociatedEntityValue) {

	if (v.GatewayId.IsUnknown() || v.GatewayId.IsNull()) && !other.GatewayId.IsUnknown() {
		v.GatewayId = other.GatewayId
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Ip.IsUnknown() || v.Ip.IsNull()) && !other.Ip.IsUnknown() {
		v.Ip = other.Ip
	}

	if (v.CloudProjectFloatingipsAssociatedEntityType.IsUnknown() || v.CloudProjectFloatingipsAssociatedEntityType.IsNull()) && !other.CloudProjectFloatingipsAssociatedEntityType.IsUnknown() {
		v.CloudProjectFloatingipsAssociatedEntityType = other.CloudProjectFloatingipsAssociatedEntityType
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v CloudProjectFloatingipsAssociatedEntityValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"gatewayId": v.GatewayId,
		"id":        v.Id,
		"ip":        v.Ip,
		"type":      v.CloudProjectFloatingipsAssociatedEntityType,
	}
}
func (v CloudProjectFloatingipsAssociatedEntityValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["gateway_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.GatewayId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gateway_id"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Ip.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip"] = val

		val, err = v.CloudProjectFloatingipsAssociatedEntityType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CloudProjectFloatingipsAssociatedEntityValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CloudProjectFloatingipsAssociatedEntityValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CloudProjectFloatingipsAssociatedEntityValue) String() string {
	return "CloudProjectFloatingipsAssociatedEntityValue"
}

func (v CloudProjectFloatingipsAssociatedEntityValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"gateway_id": ovhtypes.TfStringType{},
			"id":         ovhtypes.TfStringType{},
			"ip":         ovhtypes.TfStringType{},
			"type":       ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"gateway_id": v.GatewayId,
			"id":         v.Id,
			"ip":         v.Ip,
			"type":       v.CloudProjectFloatingipsAssociatedEntityType,
		})

	return objVal, diags
}

func (v CloudProjectFloatingipsAssociatedEntityValue) Equal(o attr.Value) bool {
	other, ok := o.(CloudProjectFloatingipsAssociatedEntityValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.GatewayId.Equal(other.GatewayId) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Ip.Equal(other.Ip) {
		return false
	}

	if !v.CloudProjectFloatingipsAssociatedEntityType.Equal(other.CloudProjectFloatingipsAssociatedEntityType) {
		return false
	}

	return true
}

func (v CloudProjectFloatingipsAssociatedEntityValue) Type(ctx context.Context) attr.Type {
	return CloudProjectFloatingipsAssociatedEntityType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CloudProjectFloatingipsAssociatedEntityValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"gateway_id": ovhtypes.TfStringType{},
		"id":         ovhtypes.TfStringType{},
		"ip":         ovhtypes.TfStringType{},
		"type":       ovhtypes.TfStringType{},
	}
}
