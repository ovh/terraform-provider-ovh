// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func VrackDedicatedCloudDatacenterResourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"datacenter": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Your dedicatedCloud datacenter name",
			MarkdownDescription: "Your dedicatedCloud datacenter name",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "The internal name of your vrack",
			MarkdownDescription: "The internal name of your vrack",
		},
		"target_service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "The internal name of your target vrack",
			MarkdownDescription: "The internal name of your target vrack",
		},
		"dedicated_cloud": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Your dedicatedCloud name",
			MarkdownDescription: "Your dedicatedCloud name",
		},
	}

	return schema.Schema{
		Attributes: attrs,
	}
}

type VrackDedicatedCloudDatacenterModel struct {
	Datacenter        ovhtypes.TfStringValue `tfsdk:"datacenter" json:"datacenter"`
	ServiceName       ovhtypes.TfStringValue `tfsdk:"service_name" json:"serviceName"`
	TargetServiceName ovhtypes.TfStringValue `tfsdk:"target_service_name" json:"targetServiceName"`
	DedicatedCloud    ovhtypes.TfStringValue `tfsdk:"dedicated_cloud" json:"dedicatedCloud"`
}

func (v *VrackDedicatedCloudDatacenterModel) MergeWith(other *VrackDedicatedCloudDatacenterModel) {
	if (v.Datacenter.IsUnknown() || v.Datacenter.IsNull()) && !other.Datacenter.IsUnknown() {
		v.Datacenter = other.Datacenter
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.TargetServiceName.IsUnknown() || v.TargetServiceName.IsNull()) && !other.TargetServiceName.IsUnknown() {
		v.TargetServiceName = other.TargetServiceName
	}

	if (v.DedicatedCloud.IsUnknown() || v.DedicatedCloud.IsNull()) && !other.DedicatedCloud.IsUnknown() {
		v.DedicatedCloud = other.DedicatedCloud
	}
}

func (v VrackDedicatedCloudDatacenterModel) ToCreate() *VrackDedicatedCloudDatacenterModel {
	res := &VrackDedicatedCloudDatacenterModel{}

	if !v.TargetServiceName.IsUnknown() {
		res.TargetServiceName = v.TargetServiceName
	}

	return res
}

func (v VrackDedicatedCloudDatacenterModel) ToUpdate() *VrackDedicatedCloudDatacenterModel {
	res := &VrackDedicatedCloudDatacenterModel{}

	if !v.TargetServiceName.IsUnknown() {
		res.TargetServiceName = v.TargetServiceName
	}

	return res
}

func (v *VrackDedicatedCloudDatacenterModel) MarshalJSON() ([]byte, error) {
	toMarshal := map[string]any{}
	if !v.TargetServiceName.IsNull() && !v.TargetServiceName.IsUnknown() {
		toMarshal["targetServiceName"] = v.TargetServiceName
	}

	return json.Marshal(toMarshal)
}
