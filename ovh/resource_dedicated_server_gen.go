// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	ovhtypes "github.com/ovh/terraform-provider-ovh/ovh/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func DedicatedServerResourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"availability_zone": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "dedicated AZ localisation",
			MarkdownDescription: "dedicated AZ localisation",
		},
		"boot_id": schema.Int64Attribute{
			CustomType: ovhtypes.TfInt64Type{},
			Optional:   true,
			Computed:   true,
		},
		"boot_script": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Ipxe script served on boot",
			MarkdownDescription: "Ipxe script served on boot",
		},
		"commercial_range": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "dedicater server commercial range",
			MarkdownDescription: "dedicater server commercial range",
		},
		"datacenter": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "dedicated datacenter localisation",
			MarkdownDescription: "dedicated datacenter localisation",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"bhs1",
					"bhs2",
					"bhs3",
					"bhs4",
					"bhs5",
					"bhs6",
					"bhs7",
					"bhs8",
					"cch01",
					"crx1",
					"crx2",
					"dc1",
					"eri1",
					"eri2",
					"gra04",
					"gra1",
					"gra2",
					"gra3",
					"gsw",
					"hdf01",
					"hil1",
					"ieb01",
					"lil1-int1",
					"lim1",
					"lim2",
					"lim3",
					"mr901",
					"p19",
					"rbx",
					"rbx-hz",
					"rbx1",
					"rbx10",
					"rbx2",
					"rbx3",
					"rbx4",
					"rbx5",
					"rbx6",
					"rbx7",
					"rbx8",
					"rbx9",
					"sbg1",
					"sbg2",
					"sbg3",
					"sbg4",
					"sbg5",
					"sgp02",
					"sgp1",
					"syd03",
					"syd1",
					"syd2",
					"vin1",
					"waw1",
					"ynm1",
					"yyz01",
				),
			},
		},
		"display_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Optional:            true,
			Description:         "The display name of your dedicated server",
			MarkdownDescription: "The display name of your dedicated server",
		},
		"iam": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"display_name": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Resource display name",
					MarkdownDescription: "Resource display name",
				},
				"id": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Unique identifier of the resource",
					MarkdownDescription: "Unique identifier of the resource",
				},
				"tags": schema.MapAttribute{
					CustomType:          ovhtypes.NewTfMapNestedType[ovhtypes.TfStringValue](ctx),
					Computed:            true,
					Description:         "Resource tags. Tags that were internally computed are prefixed with ovh:",
					MarkdownDescription: "Resource tags. Tags that were internally computed are prefixed with ovh:",
				},
				"urn": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Unique resource name used in policies",
					MarkdownDescription: "Unique resource name used in policies",
				},
			},
			CustomType: IamType{
				ObjectType: types.ObjectType{
					AttrTypes: IamValue{}.AttributeTypes(ctx),
				},
			},
			Computed:            true,
			Description:         "IAM resource metadata",
			MarkdownDescription: "IAM resource metadata",
		},
		"ip": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "dedicated server ip",
			MarkdownDescription: "dedicated server ip",
		},
		"link_speed": schema.Int64Attribute{
			CustomType: ovhtypes.TfInt64Type{},
			Computed:   true,
		},
		"monitoring": schema.BoolAttribute{
			CustomType:          ovhtypes.TfBoolType{},
			Optional:            true,
			Computed:            true,
			Description:         "Icmp monitoring state",
			MarkdownDescription: "Icmp monitoring state",
		},
		"name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "dedicated server name",
			MarkdownDescription: "dedicated server name",
		},
		"new_upgrade_system": schema.BoolAttribute{
			CustomType: ovhtypes.TfBoolType{},
			Computed:   true,
		},
		"no_intervention": schema.BoolAttribute{
			CustomType:          ovhtypes.TfBoolType{},
			Optional:            true,
			Computed:            true,
			Description:         "Prevent datacenter intervention",
			MarkdownDescription: "Prevent datacenter intervention",
		},
		"os": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Operating system",
			MarkdownDescription: "Operating system",
		},
		"power_state": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Power state of the server",
			MarkdownDescription: "Power state of the server",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"poweroff",
					"poweron",
				),
			},
		},
		"professional_use": schema.BoolAttribute{
			CustomType:          ovhtypes.TfBoolType{},
			Computed:            true,
			Description:         "Does this server have professional use option",
			MarkdownDescription: "Does this server have professional use option",
		},
		"rack": schema.StringAttribute{
			CustomType: ovhtypes.TfStringType{},
			Computed:   true,
		},
		"region": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "dedicated region localisation",
			MarkdownDescription: "dedicated region localisation",
		},
		"rescue_mail": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Custom email used to receive rescue credentials",
			MarkdownDescription: "Custom email used to receive rescue credentials",
		},
		"rescue_ssh_key": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "Public SSH Key used in the rescue mode",
			MarkdownDescription: "Public SSH Key used in the rescue mode",
		},
		"reverse": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "dedicated server reverse",
			MarkdownDescription: "dedicated server reverse",
		},
		"root_device": schema.StringAttribute{
			CustomType: ovhtypes.TfStringType{},
			Optional:   true,
			Computed:   true,
		},
		"server_id": schema.Int64Attribute{
			CustomType:          ovhtypes.TfInt64Type{},
			Computed:            true,
			Description:         "Server id",
			MarkdownDescription: "Server id",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "The internal name of your dedicated server",
			MarkdownDescription: "The internal name of your dedicated server",
		},
		"state": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Computed:            true,
			Description:         "All states a Dedicated can be in",
			MarkdownDescription: "All states a Dedicated can be in",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"error",
					"hacked",
					"hackedBlocked",
					"ok",
				),
			},
		},
		"support_level": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Dedicated server support level",
			MarkdownDescription: "Dedicated server support level",
			Validators: []validator.String{
				stringvalidator.OneOf(
					"critical",
					"fastpath",
					"gs",
					"pro",
				),
			},
		},
		"operating_system": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Optional:            true,
			Description:         "Template name",
			MarkdownDescription: "Template name",
		},
	}
	for k, v := range OrderResourceSchema(ctx).Attributes {
		attrs[k] = v
	}

	return schema.Schema{
		Attributes: attrs,
	}
}

type DedicatedServerModel struct {
	AvailabilityZone ovhtypes.TfStringValue                      `tfsdk:"availability_zone" json:"availabilityZone"`
	BootId           ovhtypes.TfInt64Value                       `tfsdk:"boot_id" json:"bootId"`
	BootScript       ovhtypes.TfStringValue                      `tfsdk:"boot_script" json:"bootScript"`
	CommercialRange  ovhtypes.TfStringValue                      `tfsdk:"commercial_range" json:"commercialRange"`
	Datacenter       ovhtypes.TfStringValue                      `tfsdk:"datacenter" json:"datacenter"`
	DisplayName      ovhtypes.TfStringValue                      `tfsdk:"display_name" json:"displayName"`
	Iam              IamValue                                    `tfsdk:"iam" json:"iam"`
	Ip               ovhtypes.TfStringValue                      `tfsdk:"ip" json:"ip"`
	LinkSpeed        ovhtypes.TfInt64Value                       `tfsdk:"link_speed" json:"linkSpeed"`
	Monitoring       ovhtypes.TfBoolValue                        `tfsdk:"monitoring" json:"monitoring"`
	Name             ovhtypes.TfStringValue                      `tfsdk:"name" json:"name"`
	NewUpgradeSystem ovhtypes.TfBoolValue                        `tfsdk:"new_upgrade_system" json:"newUpgradeSystem"`
	NoIntervention   ovhtypes.TfBoolValue                        `tfsdk:"no_intervention" json:"noIntervention"`
	Os               ovhtypes.TfStringValue                      `tfsdk:"os" json:"os"`
	PowerState       ovhtypes.TfStringValue                      `tfsdk:"power_state" json:"powerState"`
	ProfessionalUse  ovhtypes.TfBoolValue                        `tfsdk:"professional_use" json:"professionalUse"`
	Rack             ovhtypes.TfStringValue                      `tfsdk:"rack" json:"rack"`
	Region           ovhtypes.TfStringValue                      `tfsdk:"region" json:"region"`
	RescueMail       ovhtypes.TfStringValue                      `tfsdk:"rescue_mail" json:"rescueMail"`
	RescueSshKey     ovhtypes.TfStringValue                      `tfsdk:"rescue_ssh_key" json:"rescueSshKey"`
	Reverse          ovhtypes.TfStringValue                      `tfsdk:"reverse" json:"reverse"`
	RootDevice       ovhtypes.TfStringValue                      `tfsdk:"root_device" json:"rootDevice"`
	ServerId         ovhtypes.TfInt64Value                       `tfsdk:"server_id" json:"serverId"`
	ServiceName      ovhtypes.TfStringValue                      `tfsdk:"service_name" json:"serviceName"`
	State            ovhtypes.TfStringValue                      `tfsdk:"state" json:"state"`
	SupportLevel     ovhtypes.TfStringValue                      `tfsdk:"support_level" json:"supportLevel"`
	OperatingSystem  ovhtypes.TfStringValue                      `tfsdk:"operating_system" json:"operatingSystem"`
	Order            OrderValue                                  `tfsdk:"order" json:"order"`
	OvhSubsidiary    ovhtypes.TfStringValue                      `tfsdk:"ovh_subsidiary" json:"ovhSubsidiary"`
	Plan             ovhtypes.TfListNestedValue[PlanValue]       `tfsdk:"plan" json:"plan"`
	PlanOption       ovhtypes.TfListNestedValue[PlanOptionValue] `tfsdk:"plan_option" json:"planOption"`
}

func (v *DedicatedServerModel) MergeWith(other *DedicatedServerModel) {
	if (v.AvailabilityZone.IsUnknown() || v.AvailabilityZone.IsNull()) && !other.AvailabilityZone.IsUnknown() {
		v.AvailabilityZone = other.AvailabilityZone
	}

	if (v.BootId.IsUnknown() || v.BootId.IsNull()) && !other.BootId.IsUnknown() {
		v.BootId = other.BootId
	}

	if (v.BootScript.IsUnknown() || v.BootScript.IsNull()) && !other.BootScript.IsUnknown() {
		v.BootScript = other.BootScript
	}

	if (v.CommercialRange.IsUnknown() || v.CommercialRange.IsNull()) && !other.CommercialRange.IsUnknown() {
		v.CommercialRange = other.CommercialRange
	}

	if (v.Datacenter.IsUnknown() || v.Datacenter.IsNull()) && !other.Datacenter.IsUnknown() {
		v.Datacenter = other.Datacenter
	}

	if (v.DisplayName.IsUnknown() || v.DisplayName.IsNull()) && !other.DisplayName.IsUnknown() {
		v.DisplayName = other.DisplayName
	}

	if v.Iam.IsUnknown() && !other.Iam.IsUnknown() {
		v.Iam = other.Iam
	} else if !other.Iam.IsUnknown() {
		v.Iam.MergeWith(&other.Iam)
	}

	if (v.Ip.IsUnknown() || v.Ip.IsNull()) && !other.Ip.IsUnknown() {
		v.Ip = other.Ip
	}

	if (v.LinkSpeed.IsUnknown() || v.LinkSpeed.IsNull()) && !other.LinkSpeed.IsUnknown() {
		v.LinkSpeed = other.LinkSpeed
	}

	if (v.Monitoring.IsUnknown() || v.Monitoring.IsNull()) && !other.Monitoring.IsUnknown() {
		v.Monitoring = other.Monitoring
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.NewUpgradeSystem.IsUnknown() || v.NewUpgradeSystem.IsNull()) && !other.NewUpgradeSystem.IsUnknown() {
		v.NewUpgradeSystem = other.NewUpgradeSystem
	}

	if (v.NoIntervention.IsUnknown() || v.NoIntervention.IsNull()) && !other.NoIntervention.IsUnknown() {
		v.NoIntervention = other.NoIntervention
	}

	if (v.Os.IsUnknown() || v.Os.IsNull()) && !other.Os.IsUnknown() {
		v.Os = other.Os
	}

	if (v.PowerState.IsUnknown() || v.PowerState.IsNull()) && !other.PowerState.IsUnknown() {
		v.PowerState = other.PowerState
	}

	if (v.ProfessionalUse.IsUnknown() || v.ProfessionalUse.IsNull()) && !other.ProfessionalUse.IsUnknown() {
		v.ProfessionalUse = other.ProfessionalUse
	}

	if (v.Rack.IsUnknown() || v.Rack.IsNull()) && !other.Rack.IsUnknown() {
		v.Rack = other.Rack
	}

	if (v.Region.IsUnknown() || v.Region.IsNull()) && !other.Region.IsUnknown() {
		v.Region = other.Region
	}

	if (v.RescueMail.IsUnknown() || v.RescueMail.IsNull()) && !other.RescueMail.IsUnknown() {
		v.RescueMail = other.RescueMail
	}

	if (v.RescueSshKey.IsUnknown() || v.RescueSshKey.IsNull()) && !other.RescueSshKey.IsUnknown() {
		v.RescueSshKey = other.RescueSshKey
	}

	if (v.Reverse.IsUnknown() || v.Reverse.IsNull()) && !other.Reverse.IsUnknown() {
		v.Reverse = other.Reverse
	}

	if (v.RootDevice.IsUnknown() || v.RootDevice.IsNull()) && !other.RootDevice.IsUnknown() {
		v.RootDevice = other.RootDevice
	}

	if (v.ServerId.IsUnknown() || v.ServerId.IsNull()) && !other.ServerId.IsUnknown() {
		v.ServerId = other.ServerId
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

	if (v.State.IsUnknown() || v.State.IsNull()) && !other.State.IsUnknown() {
		v.State = other.State
	}

	if (v.SupportLevel.IsUnknown() || v.SupportLevel.IsNull()) && !other.SupportLevel.IsUnknown() {
		v.SupportLevel = other.SupportLevel
	}

	if (v.OperatingSystem.IsUnknown() || v.OperatingSystem.IsNull()) && !other.OperatingSystem.IsUnknown() {
		v.OperatingSystem = other.OperatingSystem
	}

	if (v.Order.IsUnknown() || v.Order.IsNull()) && !other.Order.IsUnknown() {
		v.Order = other.Order
	}

	if (v.OvhSubsidiary.IsUnknown() || v.OvhSubsidiary.IsNull()) && !other.OvhSubsidiary.IsUnknown() {
		v.OvhSubsidiary = other.OvhSubsidiary
	}

	if (v.Plan.IsUnknown() || v.Plan.IsNull()) && !other.Plan.IsUnknown() {
		v.Plan = other.Plan
	}

	if (v.PlanOption.IsUnknown() || v.PlanOption.IsNull()) && !other.PlanOption.IsUnknown() {
		v.PlanOption = other.PlanOption
	} else if !other.PlanOption.IsUnknown() && !other.PlanOption.IsNull() {
		newSlice := make([]attr.Value, 0)
		elems := v.PlanOption.Elements()
		newElems := other.PlanOption.Elements()

		if len(elems) != len(newElems) {
			v.PlanOption = other.PlanOption
		} else {
			for idx, e := range elems {
				tmp := e.(PlanOptionValue)
				tmp2 := newElems[idx].(PlanOptionValue)
				tmp.MergeWith(&tmp2)
				newSlice = append(newSlice, tmp)
			}

			v.PlanOption = ovhtypes.TfListNestedValue[PlanOptionValue]{
				ListValue: basetypes.NewListValueMust(PlanOptionValue{}.Type(context.Background()), newSlice),
			}
		}
	}
}

func (v *DedicatedServerModel) ToOrder() *OrderModel {
	return &OrderModel{
		Order:         v.Order,
		OvhSubsidiary: v.OvhSubsidiary,
		Plan:          v.Plan,
		PlanOption:    v.PlanOption,
	}
}

type DedicatedServerWritableModel struct {
	BootId          *ovhtypes.TfInt64Value  `tfsdk:"boot_id" json:"bootId,omitempty"`
	BootScript      *ovhtypes.TfStringValue `tfsdk:"boot_script" json:"bootScript,omitempty"`
	Monitoring      *ovhtypes.TfBoolValue   `tfsdk:"monitoring" json:"monitoring,omitempty"`
	NoIntervention  *ovhtypes.TfBoolValue   `tfsdk:"no_intervention" json:"noIntervention,omitempty"`
	RescueMail      *ovhtypes.TfStringValue `tfsdk:"rescue_mail" json:"rescueMail,omitempty"`
	RescueSshKey    *ovhtypes.TfStringValue `tfsdk:"rescue_ssh_key" json:"rescueSshKey,omitempty"`
	RootDevice      *ovhtypes.TfStringValue `tfsdk:"root_device" json:"rootDevice,omitempty"`
	State           *ovhtypes.TfStringValue `tfsdk:"state" json:"state,omitempty"`
	OperatingSystem *ovhtypes.TfStringValue `tfsdk:"operating_system" json:"operatingSystem,omitempty"`
}

func (v DedicatedServerModel) ToCreate() *DedicatedServerWritableModel {
	res := &DedicatedServerWritableModel{}

	if !v.BootId.IsUnknown() {
		res.BootId = &v.BootId
	}

	if !v.BootScript.IsUnknown() {
		res.BootScript = &v.BootScript
	}

	if !v.Monitoring.IsUnknown() {
		res.Monitoring = &v.Monitoring
	}

	if !v.NoIntervention.IsUnknown() {
		res.NoIntervention = &v.NoIntervention
	}

	if !v.RescueMail.IsUnknown() {
		res.RescueMail = &v.RescueMail
	}

	if !v.RescueSshKey.IsUnknown() {
		res.RescueSshKey = &v.RescueSshKey
	}

	if !v.RootDevice.IsUnknown() {
		res.RootDevice = &v.RootDevice
	}

	if !v.State.IsUnknown() {
		res.State = &v.State
	}

	return res
}

func (v DedicatedServerModel) ToReinstall() *DedicatedServerWritableModel {
	res := &DedicatedServerWritableModel{}

	if !v.OperatingSystem.IsUnknown() {
		res.OperatingSystem = &v.OperatingSystem
	}

	return res
}

func (v DedicatedServerModel) ToUpdate() *DedicatedServerWritableModel {
	res := &DedicatedServerWritableModel{}

	if !v.BootId.IsUnknown() {
		res.BootId = &v.BootId
	}

	if !v.BootScript.IsUnknown() {
		res.BootScript = &v.BootScript
	}

	if !v.Monitoring.IsUnknown() {
		res.Monitoring = &v.Monitoring
	}

	if !v.NoIntervention.IsUnknown() {
		res.NoIntervention = &v.NoIntervention
	}

	if !v.RescueMail.IsUnknown() {
		res.RescueMail = &v.RescueMail
	}

	if !v.RescueSshKey.IsUnknown() {
		res.RescueSshKey = &v.RescueSshKey
	}

	if !v.RootDevice.IsUnknown() {
		res.RootDevice = &v.RootDevice
	}

	if !v.State.IsUnknown() {
		res.State = &v.State
	}

	return res
}
