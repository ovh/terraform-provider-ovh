// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	ovhtypes "github.com/ovh/terraform-provider-ovh/ovh/types"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func CloudProjectLoadbalancersDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"loadbalancers": schema.SetNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "The UTC date and timestamp when the loadbalancer was created",
						MarkdownDescription: "The UTC date and timestamp when the loadbalancer was created",
					},
					"flavor_id": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "ID of the flavor",
						MarkdownDescription: "ID of the flavor",
					},
					"floating_ip": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"id": schema.StringAttribute{
								CustomType:          ovhtypes.TfStringType{},
								Computed:            true,
								Description:         "ID of the floating IP",
								MarkdownDescription: "ID of the floating IP",
							},
							"ip": schema.StringAttribute{
								CustomType:          ovhtypes.TfStringType{},
								Computed:            true,
								Description:         "IP Address of the floating IP",
								MarkdownDescription: "IP Address of the floating IP",
							},
						},
						CustomType: CloudProjectLoadbalancersFloatingIpType{
							ObjectType: types.ObjectType{
								AttrTypes: CloudProjectLoadbalancersFloatingIpValue{}.AttributeTypes(ctx),
							},
						},
						Computed:            true,
						Description:         "Information about floating IP",
						MarkdownDescription: "Information about floating IP",
					},
					"id": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "ID of the loadbalancer",
						MarkdownDescription: "ID of the loadbalancer",
					},
					"name": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Name of the loadbalancer",
						MarkdownDescription: "Name of the loadbalancer",
					},
					"operating_status": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Operating status of the loadbalancer",
						MarkdownDescription: "Operating status of the loadbalancer",
					},
					"provisioning_status": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Provisioning status of the loadbalancer",
						MarkdownDescription: "Provisioning status of the loadbalancer",
					},
					"region": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Region of the loadbalancer",
						MarkdownDescription: "Region of the loadbalancer",
					},
					"updated_at": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "UTC date and timestamp when the loadbalancer was updated",
						MarkdownDescription: "UTC date and timestamp when the loadbalancer was updated",
					},
					"vip_address": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "IP address of the Virtual IP",
						MarkdownDescription: "IP address of the Virtual IP",
					},
					"vip_network_id": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Openstack ID of the network for the Virtual IP",
						MarkdownDescription: "Openstack ID of the network for the Virtual IP",
					},
					"vip_subnet_id": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "ID of the subnet for the Virtual IP",
						MarkdownDescription: "ID of the subnet for the Virtual IP",
					},
				},
				CustomType: CloudProjectLoadbalancersType{
					ObjectType: types.ObjectType{
						AttrTypes: CloudProjectLoadbalancersValue{}.AttributeTypes(ctx),
					},
				},
			},
			CustomType: ovhtypes.NewTfListNestedType[CloudProjectLoadbalancersValue](ctx),
			Computed:   true,
		},
		"region_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Region name",
			MarkdownDescription: "Region name",
		},
		"service_name": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Service name",
			MarkdownDescription: "Service name",
		},
	}

	return schema.Schema{
		Attributes: attrs,
	}
}

type CloudProjectLoadbalancersModel struct {
	CloudProjectLoadbalancers ovhtypes.TfListNestedValue[CloudProjectLoadbalancersValue] `tfsdk:"loadbalancers" json:"cloudProjectLoadbalancers"`
	RegionName                ovhtypes.TfStringValue                                     `tfsdk:"region_name" json:"regionName"`
	ServiceName               ovhtypes.TfStringValue                                     `tfsdk:"service_name" json:"serviceName"`
}

func (v *CloudProjectLoadbalancersModel) MergeWith(other *CloudProjectLoadbalancersModel) {

	if (v.CloudProjectLoadbalancers.IsUnknown() || v.CloudProjectLoadbalancers.IsNull()) && !other.CloudProjectLoadbalancers.IsUnknown() {
		v.CloudProjectLoadbalancers = other.CloudProjectLoadbalancers
	}

	if (v.RegionName.IsUnknown() || v.RegionName.IsNull()) && !other.RegionName.IsUnknown() {
		v.RegionName = other.RegionName
	}

	if (v.ServiceName.IsUnknown() || v.ServiceName.IsNull()) && !other.ServiceName.IsUnknown() {
		v.ServiceName = other.ServiceName
	}

}

var _ basetypes.ObjectTypable = CloudProjectLoadbalancersType{}

type CloudProjectLoadbalancersType struct {
	basetypes.ObjectType
}

func (t CloudProjectLoadbalancersType) Equal(o attr.Type) bool {
	other, ok := o.(CloudProjectLoadbalancersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CloudProjectLoadbalancersType) String() string {
	return "CloudProjectLoadbalancersType"
}

func (t CloudProjectLoadbalancersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be ovhtypes.TfStringValue, was: %T`, createdAtAttribute))
	}

	flavorIdAttribute, ok := attributes["flavor_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`flavor_id is missing from object`)

		return nil, diags
	}

	flavorIdVal, ok := flavorIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`flavor_id expected to be ovhtypes.TfStringValue, was: %T`, flavorIdAttribute))
	}

	floatingIpAttribute, ok := attributes["floating_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`floating_ip is missing from object`)

		return nil, diags
	}

	floatingIpVal, ok := floatingIpAttribute.(CloudProjectLoadbalancersFloatingIpValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`floating_ip expected to be CloudProjectLoadbalancersFloatingIpValue, was: %T`, floatingIpAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be ovhtypes.TfStringValue, was: %T`, nameAttribute))
	}

	operatingStatusAttribute, ok := attributes["operating_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`operating_status is missing from object`)

		return nil, diags
	}

	operatingStatusVal, ok := operatingStatusAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`operating_status expected to be ovhtypes.TfStringValue, was: %T`, operatingStatusAttribute))
	}

	provisioningStatusAttribute, ok := attributes["provisioning_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provisioning_status is missing from object`)

		return nil, diags
	}

	provisioningStatusVal, ok := provisioningStatusAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provisioning_status expected to be ovhtypes.TfStringValue, was: %T`, provisioningStatusAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return nil, diags
	}

	regionVal, ok := regionAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be ovhtypes.TfStringValue, was: %T`, regionAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return nil, diags
	}

	updatedAtVal, ok := updatedAtAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be ovhtypes.TfStringValue, was: %T`, updatedAtAttribute))
	}

	vipAddressAttribute, ok := attributes["vip_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vip_address is missing from object`)

		return nil, diags
	}

	vipAddressVal, ok := vipAddressAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vip_address expected to be ovhtypes.TfStringValue, was: %T`, vipAddressAttribute))
	}

	vipNetworkIdAttribute, ok := attributes["vip_network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vip_network_id is missing from object`)

		return nil, diags
	}

	vipNetworkIdVal, ok := vipNetworkIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vip_network_id expected to be ovhtypes.TfStringValue, was: %T`, vipNetworkIdAttribute))
	}

	vipSubnetIdAttribute, ok := attributes["vip_subnet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vip_subnet_id is missing from object`)

		return nil, diags
	}

	vipSubnetIdVal, ok := vipSubnetIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vip_subnet_id expected to be ovhtypes.TfStringValue, was: %T`, vipSubnetIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CloudProjectLoadbalancersValue{
		CreatedAt:          createdAtVal,
		FlavorId:           flavorIdVal,
		FloatingIp:         floatingIpVal,
		Id:                 idVal,
		Name:               nameVal,
		OperatingStatus:    operatingStatusVal,
		ProvisioningStatus: provisioningStatusVal,
		Region:             regionVal,
		UpdatedAt:          updatedAtVal,
		VipAddress:         vipAddressVal,
		VipNetworkId:       vipNetworkIdVal,
		VipSubnetId:        vipSubnetIdVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectLoadbalancersValueNull() CloudProjectLoadbalancersValue {
	return CloudProjectLoadbalancersValue{
		state: attr.ValueStateNull,
	}
}

func NewCloudProjectLoadbalancersValueUnknown() CloudProjectLoadbalancersValue {
	return CloudProjectLoadbalancersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCloudProjectLoadbalancersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CloudProjectLoadbalancersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CloudProjectLoadbalancersValue Attribute Value",
				"While creating a CloudProjectLoadbalancersValue value, a missing attribute value was detected. "+
					"A CloudProjectLoadbalancersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectLoadbalancersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CloudProjectLoadbalancersValue Attribute Type",
				"While creating a CloudProjectLoadbalancersValue value, an invalid attribute value was detected. "+
					"A CloudProjectLoadbalancersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectLoadbalancersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CloudProjectLoadbalancersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CloudProjectLoadbalancersValue Attribute Value",
				"While creating a CloudProjectLoadbalancersValue value, an extra attribute value was detected. "+
					"A CloudProjectLoadbalancersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CloudProjectLoadbalancersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCloudProjectLoadbalancersValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewCloudProjectLoadbalancersValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be ovhtypes.TfStringValue, was: %T`, createdAtAttribute))
	}

	flavorIdAttribute, ok := attributes["flavor_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`flavor_id is missing from object`)

		return NewCloudProjectLoadbalancersValueUnknown(), diags
	}

	flavorIdVal, ok := flavorIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`flavor_id expected to be ovhtypes.TfStringValue, was: %T`, flavorIdAttribute))
	}

	floatingIpAttribute, ok := attributes["floating_ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`floating_ip is missing from object`)

		return NewCloudProjectLoadbalancersValueUnknown(), diags
	}

	floatingIpVal, ok := floatingIpAttribute.(CloudProjectLoadbalancersFloatingIpValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`floating_ip expected to be CloudProjectLoadbalancersFloatingIpValue, was: %T`, floatingIpAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewCloudProjectLoadbalancersValueUnknown(), diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewCloudProjectLoadbalancersValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be ovhtypes.TfStringValue, was: %T`, nameAttribute))
	}

	operatingStatusAttribute, ok := attributes["operating_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`operating_status is missing from object`)

		return NewCloudProjectLoadbalancersValueUnknown(), diags
	}

	operatingStatusVal, ok := operatingStatusAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`operating_status expected to be ovhtypes.TfStringValue, was: %T`, operatingStatusAttribute))
	}

	provisioningStatusAttribute, ok := attributes["provisioning_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`provisioning_status is missing from object`)

		return NewCloudProjectLoadbalancersValueUnknown(), diags
	}

	provisioningStatusVal, ok := provisioningStatusAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`provisioning_status expected to be ovhtypes.TfStringValue, was: %T`, provisioningStatusAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return NewCloudProjectLoadbalancersValueUnknown(), diags
	}

	regionVal, ok := regionAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be ovhtypes.TfStringValue, was: %T`, regionAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return NewCloudProjectLoadbalancersValueUnknown(), diags
	}

	updatedAtVal, ok := updatedAtAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be ovhtypes.TfStringValue, was: %T`, updatedAtAttribute))
	}

	vipAddressAttribute, ok := attributes["vip_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vip_address is missing from object`)

		return NewCloudProjectLoadbalancersValueUnknown(), diags
	}

	vipAddressVal, ok := vipAddressAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vip_address expected to be ovhtypes.TfStringValue, was: %T`, vipAddressAttribute))
	}

	vipNetworkIdAttribute, ok := attributes["vip_network_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vip_network_id is missing from object`)

		return NewCloudProjectLoadbalancersValueUnknown(), diags
	}

	vipNetworkIdVal, ok := vipNetworkIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vip_network_id expected to be ovhtypes.TfStringValue, was: %T`, vipNetworkIdAttribute))
	}

	vipSubnetIdAttribute, ok := attributes["vip_subnet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vip_subnet_id is missing from object`)

		return NewCloudProjectLoadbalancersValueUnknown(), diags
	}

	vipSubnetIdVal, ok := vipSubnetIdAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vip_subnet_id expected to be ovhtypes.TfStringValue, was: %T`, vipSubnetIdAttribute))
	}

	if diags.HasError() {
		return NewCloudProjectLoadbalancersValueUnknown(), diags
	}

	return CloudProjectLoadbalancersValue{
		CreatedAt:          createdAtVal,
		FlavorId:           flavorIdVal,
		FloatingIp:         floatingIpVal,
		Id:                 idVal,
		Name:               nameVal,
		OperatingStatus:    operatingStatusVal,
		ProvisioningStatus: provisioningStatusVal,
		Region:             regionVal,
		UpdatedAt:          updatedAtVal,
		VipAddress:         vipAddressVal,
		VipNetworkId:       vipNetworkIdVal,
		VipSubnetId:        vipSubnetIdVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectLoadbalancersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CloudProjectLoadbalancersValue {
	object, diags := NewCloudProjectLoadbalancersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCloudProjectLoadbalancersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CloudProjectLoadbalancersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCloudProjectLoadbalancersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCloudProjectLoadbalancersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCloudProjectLoadbalancersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCloudProjectLoadbalancersValueMust(CloudProjectLoadbalancersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CloudProjectLoadbalancersType) ValueType(ctx context.Context) attr.Value {
	return CloudProjectLoadbalancersValue{}
}

var _ basetypes.ObjectValuable = CloudProjectLoadbalancersValue{}

type CloudProjectLoadbalancersValue struct {
	CreatedAt          ovhtypes.TfStringValue                   `tfsdk:"created_at" json:"createdAt"`
	FlavorId           ovhtypes.TfStringValue                   `tfsdk:"flavor_id" json:"flavorId"`
	FloatingIp         CloudProjectLoadbalancersFloatingIpValue `tfsdk:"floating_ip" json:"floatingIp"`
	Id                 ovhtypes.TfStringValue                   `tfsdk:"id" json:"id"`
	Name               ovhtypes.TfStringValue                   `tfsdk:"name" json:"name"`
	OperatingStatus    ovhtypes.TfStringValue                   `tfsdk:"operating_status" json:"operatingStatus"`
	ProvisioningStatus ovhtypes.TfStringValue                   `tfsdk:"provisioning_status" json:"provisioningStatus"`
	Region             ovhtypes.TfStringValue                   `tfsdk:"region" json:"region"`
	UpdatedAt          ovhtypes.TfStringValue                   `tfsdk:"updated_at" json:"updatedAt"`
	VipAddress         ovhtypes.TfStringValue                   `tfsdk:"vip_address" json:"vipAddress"`
	VipNetworkId       ovhtypes.TfStringValue                   `tfsdk:"vip_network_id" json:"vipNetworkId"`
	VipSubnetId        ovhtypes.TfStringValue                   `tfsdk:"vip_subnet_id" json:"vipSubnetId"`
	state              attr.ValueState
}

func (v *CloudProjectLoadbalancersValue) UnmarshalJSON(data []byte) error {
	type JsonCloudProjectLoadbalancersValue CloudProjectLoadbalancersValue

	var tmp JsonCloudProjectLoadbalancersValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.CreatedAt = tmp.CreatedAt
	v.FlavorId = tmp.FlavorId
	v.FloatingIp = tmp.FloatingIp
	v.Id = tmp.Id
	v.Name = tmp.Name
	v.OperatingStatus = tmp.OperatingStatus
	v.ProvisioningStatus = tmp.ProvisioningStatus
	v.Region = tmp.Region
	v.UpdatedAt = tmp.UpdatedAt
	v.VipAddress = tmp.VipAddress
	v.VipNetworkId = tmp.VipNetworkId
	v.VipSubnetId = tmp.VipSubnetId

	v.state = attr.ValueStateKnown

	return nil
}

func (v *CloudProjectLoadbalancersValue) MergeWith(other *CloudProjectLoadbalancersValue) {

	if (v.CreatedAt.IsUnknown() || v.CreatedAt.IsNull()) && !other.CreatedAt.IsUnknown() {
		v.CreatedAt = other.CreatedAt
	}

	if (v.FlavorId.IsUnknown() || v.FlavorId.IsNull()) && !other.FlavorId.IsUnknown() {
		v.FlavorId = other.FlavorId
	}

	if (v.FloatingIp.IsUnknown() || v.FloatingIp.IsNull()) && !other.FloatingIp.IsUnknown() {
		v.FloatingIp = other.FloatingIp
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.OperatingStatus.IsUnknown() || v.OperatingStatus.IsNull()) && !other.OperatingStatus.IsUnknown() {
		v.OperatingStatus = other.OperatingStatus
	}

	if (v.ProvisioningStatus.IsUnknown() || v.ProvisioningStatus.IsNull()) && !other.ProvisioningStatus.IsUnknown() {
		v.ProvisioningStatus = other.ProvisioningStatus
	}

	if (v.Region.IsUnknown() || v.Region.IsNull()) && !other.Region.IsUnknown() {
		v.Region = other.Region
	}

	if (v.UpdatedAt.IsUnknown() || v.UpdatedAt.IsNull()) && !other.UpdatedAt.IsUnknown() {
		v.UpdatedAt = other.UpdatedAt
	}

	if (v.VipAddress.IsUnknown() || v.VipAddress.IsNull()) && !other.VipAddress.IsUnknown() {
		v.VipAddress = other.VipAddress
	}

	if (v.VipNetworkId.IsUnknown() || v.VipNetworkId.IsNull()) && !other.VipNetworkId.IsUnknown() {
		v.VipNetworkId = other.VipNetworkId
	}

	if (v.VipSubnetId.IsUnknown() || v.VipSubnetId.IsNull()) && !other.VipSubnetId.IsUnknown() {
		v.VipSubnetId = other.VipSubnetId
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v CloudProjectLoadbalancersValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"createdAt":          v.CreatedAt,
		"flavorId":           v.FlavorId,
		"floatingIp":         v.FloatingIp,
		"id":                 v.Id,
		"name":               v.Name,
		"operatingStatus":    v.OperatingStatus,
		"provisioningStatus": v.ProvisioningStatus,
		"region":             v.Region,
		"updatedAt":          v.UpdatedAt,
		"vipAddress":         v.VipAddress,
		"vipNetworkId":       v.VipNetworkId,
		"vipSubnetId":        v.VipSubnetId,
	}
}
func (v CloudProjectLoadbalancersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 12)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["flavor_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["floating_ip"] = basetypes.ObjectType{
		AttrTypes: CloudProjectLoadbalancersFloatingIpValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["operating_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["provisioning_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["region"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["updated_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vip_address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vip_network_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vip_subnet_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 12)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.FlavorId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["flavor_id"] = val

		val, err = v.FloatingIp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["floating_ip"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.OperatingStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["operating_status"] = val

		val, err = v.ProvisioningStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["provisioning_status"] = val

		val, err = v.Region.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["region"] = val

		val, err = v.UpdatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["updated_at"] = val

		val, err = v.VipAddress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vip_address"] = val

		val, err = v.VipNetworkId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vip_network_id"] = val

		val, err = v.VipSubnetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vip_subnet_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CloudProjectLoadbalancersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CloudProjectLoadbalancersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CloudProjectLoadbalancersValue) String() string {
	return "CloudProjectLoadbalancersValue"
}

func (v CloudProjectLoadbalancersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"created_at": ovhtypes.TfStringType{},
			"flavor_id":  ovhtypes.TfStringType{},
			"floating_ip": CloudProjectLoadbalancersFloatingIpType{
				basetypes.ObjectType{
					AttrTypes: CloudProjectLoadbalancersFloatingIpValue{}.AttributeTypes(ctx),
				},
			},
			"id":                  ovhtypes.TfStringType{},
			"name":                ovhtypes.TfStringType{},
			"operating_status":    ovhtypes.TfStringType{},
			"provisioning_status": ovhtypes.TfStringType{},
			"region":              ovhtypes.TfStringType{},
			"updated_at":          ovhtypes.TfStringType{},
			"vip_address":         ovhtypes.TfStringType{},
			"vip_network_id":      ovhtypes.TfStringType{},
			"vip_subnet_id":       ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"created_at":          v.CreatedAt,
			"flavor_id":           v.FlavorId,
			"floating_ip":         v.FloatingIp,
			"id":                  v.Id,
			"name":                v.Name,
			"operating_status":    v.OperatingStatus,
			"provisioning_status": v.ProvisioningStatus,
			"region":              v.Region,
			"updated_at":          v.UpdatedAt,
			"vip_address":         v.VipAddress,
			"vip_network_id":      v.VipNetworkId,
			"vip_subnet_id":       v.VipSubnetId,
		})

	return objVal, diags
}

func (v CloudProjectLoadbalancersValue) Equal(o attr.Value) bool {
	other, ok := o.(CloudProjectLoadbalancersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.FlavorId.Equal(other.FlavorId) {
		return false
	}

	if !v.FloatingIp.Equal(other.FloatingIp) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.OperatingStatus.Equal(other.OperatingStatus) {
		return false
	}

	if !v.ProvisioningStatus.Equal(other.ProvisioningStatus) {
		return false
	}

	if !v.Region.Equal(other.Region) {
		return false
	}

	if !v.UpdatedAt.Equal(other.UpdatedAt) {
		return false
	}

	if !v.VipAddress.Equal(other.VipAddress) {
		return false
	}

	if !v.VipNetworkId.Equal(other.VipNetworkId) {
		return false
	}

	if !v.VipSubnetId.Equal(other.VipSubnetId) {
		return false
	}

	return true
}

func (v CloudProjectLoadbalancersValue) Type(ctx context.Context) attr.Type {
	return CloudProjectLoadbalancersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CloudProjectLoadbalancersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at":          ovhtypes.TfStringType{},
		"flavor_id":           ovhtypes.TfStringType{},
		"floating_ip":         CloudProjectLoadbalancersFloatingIpValue{}.Type(ctx),
		"id":                  ovhtypes.TfStringType{},
		"name":                ovhtypes.TfStringType{},
		"operating_status":    ovhtypes.TfStringType{},
		"provisioning_status": ovhtypes.TfStringType{},
		"region":              ovhtypes.TfStringType{},
		"updated_at":          ovhtypes.TfStringType{},
		"vip_address":         ovhtypes.TfStringType{},
		"vip_network_id":      ovhtypes.TfStringType{},
		"vip_subnet_id":       ovhtypes.TfStringType{},
	}
}

var _ basetypes.ObjectTypable = CloudProjectLoadbalancersFloatingIpType{}

type CloudProjectLoadbalancersFloatingIpType struct {
	basetypes.ObjectType
}

func (t CloudProjectLoadbalancersFloatingIpType) Equal(o attr.Type) bool {
	other, ok := o.(CloudProjectLoadbalancersFloatingIpType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CloudProjectLoadbalancersFloatingIpType) String() string {
	return "CloudProjectLoadbalancersFloatingIpType"
}

func (t CloudProjectLoadbalancersFloatingIpType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return nil, diags
	}

	ipVal, ok := ipAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be ovhtypes.TfStringValue, was: %T`, ipAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CloudProjectLoadbalancersFloatingIpValue{
		Id:    idVal,
		Ip:    ipVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectLoadbalancersFloatingIpValueNull() CloudProjectLoadbalancersFloatingIpValue {
	return CloudProjectLoadbalancersFloatingIpValue{
		state: attr.ValueStateNull,
	}
}

func NewCloudProjectLoadbalancersFloatingIpValueUnknown() CloudProjectLoadbalancersFloatingIpValue {
	return CloudProjectLoadbalancersFloatingIpValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCloudProjectLoadbalancersFloatingIpValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CloudProjectLoadbalancersFloatingIpValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CloudProjectLoadbalancersFloatingIpValue Attribute Value",
				"While creating a CloudProjectLoadbalancersFloatingIpValue value, a missing attribute value was detected. "+
					"A CloudProjectLoadbalancersFloatingIpValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectLoadbalancersFloatingIpValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CloudProjectLoadbalancersFloatingIpValue Attribute Type",
				"While creating a CloudProjectLoadbalancersFloatingIpValue value, an invalid attribute value was detected. "+
					"A CloudProjectLoadbalancersFloatingIpValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CloudProjectLoadbalancersFloatingIpValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CloudProjectLoadbalancersFloatingIpValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CloudProjectLoadbalancersFloatingIpValue Attribute Value",
				"While creating a CloudProjectLoadbalancersFloatingIpValue value, an extra attribute value was detected. "+
					"A CloudProjectLoadbalancersFloatingIpValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CloudProjectLoadbalancersFloatingIpValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCloudProjectLoadbalancersFloatingIpValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewCloudProjectLoadbalancersFloatingIpValueUnknown(), diags
	}

	idVal, ok := idAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be ovhtypes.TfStringValue, was: %T`, idAttribute))
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return NewCloudProjectLoadbalancersFloatingIpValueUnknown(), diags
	}

	ipVal, ok := ipAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be ovhtypes.TfStringValue, was: %T`, ipAttribute))
	}

	if diags.HasError() {
		return NewCloudProjectLoadbalancersFloatingIpValueUnknown(), diags
	}

	return CloudProjectLoadbalancersFloatingIpValue{
		Id:    idVal,
		Ip:    ipVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewCloudProjectLoadbalancersFloatingIpValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CloudProjectLoadbalancersFloatingIpValue {
	object, diags := NewCloudProjectLoadbalancersFloatingIpValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCloudProjectLoadbalancersFloatingIpValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CloudProjectLoadbalancersFloatingIpType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCloudProjectLoadbalancersFloatingIpValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCloudProjectLoadbalancersFloatingIpValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCloudProjectLoadbalancersFloatingIpValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCloudProjectLoadbalancersFloatingIpValueMust(CloudProjectLoadbalancersFloatingIpValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CloudProjectLoadbalancersFloatingIpType) ValueType(ctx context.Context) attr.Value {
	return CloudProjectLoadbalancersFloatingIpValue{}
}

var _ basetypes.ObjectValuable = CloudProjectLoadbalancersFloatingIpValue{}

type CloudProjectLoadbalancersFloatingIpValue struct {
	Id    ovhtypes.TfStringValue `tfsdk:"id" json:"id"`
	Ip    ovhtypes.TfStringValue `tfsdk:"ip" json:"ip"`
	state attr.ValueState
}

func (v *CloudProjectLoadbalancersFloatingIpValue) UnmarshalJSON(data []byte) error {
	type JsonCloudProjectLoadbalancersFloatingIpValue CloudProjectLoadbalancersFloatingIpValue

	var tmp JsonCloudProjectLoadbalancersFloatingIpValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.Id = tmp.Id
	v.Ip = tmp.Ip

	v.state = attr.ValueStateKnown

	return nil
}

func (v *CloudProjectLoadbalancersFloatingIpValue) MergeWith(other *CloudProjectLoadbalancersFloatingIpValue) {

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.Ip.IsUnknown() || v.Ip.IsNull()) && !other.Ip.IsUnknown() {
		v.Ip = other.Ip
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v CloudProjectLoadbalancersFloatingIpValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"id": v.Id,
		"ip": v.Ip,
	}
}
func (v CloudProjectLoadbalancersFloatingIpValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Ip.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CloudProjectLoadbalancersFloatingIpValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CloudProjectLoadbalancersFloatingIpValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CloudProjectLoadbalancersFloatingIpValue) String() string {
	return "CloudProjectLoadbalancersFloatingIpValue"
}

func (v CloudProjectLoadbalancersFloatingIpValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"id": ovhtypes.TfStringType{},
			"ip": ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"id": v.Id,
			"ip": v.Ip,
		})

	return objVal, diags
}

func (v CloudProjectLoadbalancersFloatingIpValue) Equal(o attr.Value) bool {
	other, ok := o.(CloudProjectLoadbalancersFloatingIpValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Ip.Equal(other.Ip) {
		return false
	}

	return true
}

func (v CloudProjectLoadbalancersFloatingIpValue) Type(ctx context.Context) attr.Type {
	return CloudProjectLoadbalancersFloatingIpType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CloudProjectLoadbalancersFloatingIpValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id": ovhtypes.TfStringType{},
		"ip": ovhtypes.TfStringType{},
	}
}
