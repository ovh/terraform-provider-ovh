// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package ovh

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	ovhtypes "github.com/ovh/terraform-provider-ovh/v2/ovh/types"
)

func VmwareCloudDirectorOrganizationDataSourceSchema(ctx context.Context) schema.Schema {
	attrs := map[string]schema.Attribute{
		"current_state": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"api_url": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "API URL to interact with your VMware Cloud Director organization on OVHcloud",
					MarkdownDescription: "API URL to interact with your VMware Cloud Director organization on OVHcloud",
				},
				"billing_type": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Billing type of your VMware Cloud Director project",
					MarkdownDescription: "Billing type of your VMware Cloud Director project",
				},
				"description": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Description of your VMware Cloud Director organization on OVHcloud",
					MarkdownDescription: "Description of your VMware Cloud Director organization on OVHcloud",
				},
				"full_name": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Human readable full name of your VMware Cloud Director organization",
					MarkdownDescription: "Human readable full name of your VMware Cloud Director organization",
				},
				"name": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Name of your VMware Cloud Director organization",
					MarkdownDescription: "Name of your VMware Cloud Director organization",
				},
				"region": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Datacenter where your VMware Cloud Director organization is physically located",
					MarkdownDescription: "Datacenter where your VMware Cloud Director organization is physically located",
				},
				"spla": schema.BoolAttribute{
					CustomType:          ovhtypes.TfBoolType{},
					Computed:            true,
					Description:         "SPLA licensing state",
					MarkdownDescription: "SPLA licensing state",
				},
				"web_interface_url": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "URL to administrate your VMware Cloud Director organization on OVHcloud",
					MarkdownDescription: "URL to administrate your VMware Cloud Director organization on OVHcloud",
				},
			},
			CustomType: VCDOrganizationCurrentStateType{
				ObjectType: types.ObjectType{
					AttrTypes: VCDOrganizationCurrentStateValue{}.AttributeTypes(ctx),
				},
			},
			Computed:            true,
			Description:         "Current status of VMware Cloud Director organization service",
			MarkdownDescription: "Current status of VMware Cloud Director organization service",
		},
		"current_tasks": schema.ListNestedAttribute{
			NestedObject: schema.NestedAttributeObject{
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Identifier of the current task",
						MarkdownDescription: "Identifier of the current task",
					},
					"link": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Link to the task details",
						MarkdownDescription: "Link to the task details",
					},
					"status": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Current global status of the current task",
						MarkdownDescription: "Current global status of the current task",
					},
					"type": schema.StringAttribute{
						CustomType:          ovhtypes.TfStringType{},
						Computed:            true,
						Description:         "Type of the current task",
						MarkdownDescription: "Type of the current task",
					},
				},
				CustomType: CurrentTasksType{
					ObjectType: types.ObjectType{
						AttrTypes: CurrentTasksValue{}.AttributeTypes(ctx),
					},
				},
			},
			CustomType:          ovhtypes.NewTfListNestedType[CurrentTasksValue](ctx),
			Computed:            true,
			Description:         "Asynchronous operations ongoing on the VMware Cloud Director organization",
			MarkdownDescription: "Asynchronous operations ongoing on the VMware Cloud Director organization",
		},
		"iam": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"display_name": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Resource display name",
					MarkdownDescription: "Resource display name",
				},
				"id": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Unique identifier of the resource",
					MarkdownDescription: "Unique identifier of the resource",
				},
				"tags": schema.MapAttribute{
					CustomType:          ovhtypes.NewTfMapNestedType[ovhtypes.TfStringValue](ctx),
					Computed:            true,
					Description:         "Resource tags. Tags that were internally computed are prefixed with ovh:",
					MarkdownDescription: "Resource tags. Tags that were internally computed are prefixed with ovh:",
				},
				"urn": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Unique resource name used in policies",
					MarkdownDescription: "Unique resource name used in policies",
				},
			},
			CustomType: IamType{
				ObjectType: types.ObjectType{
					AttrTypes: IamValue{}.AttributeTypes(ctx),
				},
			},
			Computed:            true,
			Description:         "IAM resource metadata",
			MarkdownDescription: "IAM resource metadata",
		},
		"id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Unique identifier",
			MarkdownDescription: "Unique identifier",
		},
		"organization_id": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Required:            true,
			Description:         "Organization ID",
			MarkdownDescription: "Organization ID",
		},
		"resource_status": schema.StringAttribute{
			CustomType:          ovhtypes.TfStringType{},
			Computed:            true,
			Description:         "Reflects the readiness of the VMware Cloud Director organization. A new target specification request will be accepted only in `READY` status",
			MarkdownDescription: "Reflects the readiness of the VMware Cloud Director organization. A new target specification request will be accepted only in `READY` status",
		},
		"target_spec": schema.SingleNestedAttribute{
			Attributes: map[string]schema.Attribute{
				"description": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Description of your VMware Cloud Director organization on OVHcloud",
					MarkdownDescription: "Description of your VMware Cloud Director organization on OVHcloud",
				},
				"full_name": schema.StringAttribute{
					CustomType:          ovhtypes.TfStringType{},
					Computed:            true,
					Description:         "Human readable full name of your VMware Cloud Director organization",
					MarkdownDescription: "Human readable full name of your VMware Cloud Director organization",
				},
			},
			CustomType: VCDOrganizationTargetSpecType{
				ObjectType: types.ObjectType{
					AttrTypes: VCDOrganizationTargetSpecValue{}.AttributeTypes(ctx),
				},
			},
			Computed:            true,
			Description:         "Target specification of VMware Cloud Director organization service",
			MarkdownDescription: "Target specification of VMware Cloud Director organization service",
		},
		"updated_at": schema.StringAttribute{
			CustomType: ovhtypes.TfStringType{},
			Computed:   true,
		},
	}

	return schema.Schema{
		Description: "Get VMware Cloud Director organization details",
		Attributes:  attrs,
	}
}

type VmwareCloudDirectorOrganizationModel struct {
	CurrentState   VCDOrganizationCurrentStateValue              `tfsdk:"current_state" json:"currentState"`
	CurrentTasks   ovhtypes.TfListNestedValue[CurrentTasksValue] `tfsdk:"current_tasks" json:"currentTasks"`
	Iam            IamValue                                      `tfsdk:"iam" json:"iam"`
	Id             ovhtypes.TfStringValue                        `tfsdk:"id" json:"id"`
	OrganizationId ovhtypes.TfStringValue                        `tfsdk:"organization_id" json:"organizationId"`
	ResourceStatus ovhtypes.TfStringValue                        `tfsdk:"resource_status" json:"resourceStatus"`
	TargetSpec     VCDOrganizationTargetSpecValue                `tfsdk:"target_spec" json:"targetSpec"`
	UpdatedAt      ovhtypes.TfStringValue                        `tfsdk:"updated_at" json:"updatedAt"`
}

func (v *VmwareCloudDirectorOrganizationModel) MergeWith(other *VmwareCloudDirectorOrganizationModel) {

	if (v.CurrentState.IsUnknown() || v.CurrentState.IsNull()) && !other.CurrentState.IsUnknown() {
		v.CurrentState = other.CurrentState
	}

	if (v.CurrentTasks.IsUnknown() || v.CurrentTasks.IsNull()) && !other.CurrentTasks.IsUnknown() {
		v.CurrentTasks = other.CurrentTasks
	}

	if (v.Iam.IsUnknown() || v.Iam.IsNull()) && !other.Iam.IsUnknown() {
		v.Iam = other.Iam
	}

	if (v.Id.IsUnknown() || v.Id.IsNull()) && !other.Id.IsUnknown() {
		v.Id = other.Id
	}

	if (v.OrganizationId.IsUnknown() || v.OrganizationId.IsNull()) && !other.OrganizationId.IsUnknown() {
		v.OrganizationId = other.OrganizationId
	}

	if (v.ResourceStatus.IsUnknown() || v.ResourceStatus.IsNull()) && !other.ResourceStatus.IsUnknown() {
		v.ResourceStatus = other.ResourceStatus
	}

	if (v.TargetSpec.IsUnknown() || v.TargetSpec.IsNull()) && !other.TargetSpec.IsUnknown() {
		v.TargetSpec = other.TargetSpec
	}

	if (v.UpdatedAt.IsUnknown() || v.UpdatedAt.IsNull()) && !other.UpdatedAt.IsUnknown() {
		v.UpdatedAt = other.UpdatedAt
	}

}

var _ basetypes.ObjectTypable = VCDOrganizationCurrentStateType{}

type VCDOrganizationCurrentStateType struct {
	basetypes.ObjectType
}

func (t VCDOrganizationCurrentStateType) Equal(o attr.Type) bool {
	other, ok := o.(VCDOrganizationCurrentStateType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t VCDOrganizationCurrentStateType) String() string {
	return "VCDOrganizationCurrentStateType"
}

func (t VCDOrganizationCurrentStateType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	apiUrlAttribute, ok := attributes["api_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_url is missing from object`)

		return nil, diags
	}

	apiUrlVal, ok := apiUrlAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_url expected to be ovhtypes.TfStringValue, was: %T`, apiUrlAttribute))
	}

	billingTypeAttribute, ok := attributes["billing_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_type is missing from object`)

		return nil, diags
	}

	billingTypeVal, ok := billingTypeAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_type expected to be ovhtypes.TfStringValue, was: %T`, billingTypeAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be ovhtypes.TfStringValue, was: %T`, descriptionAttribute))
	}

	fullNameAttribute, ok := attributes["full_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`full_name is missing from object`)

		return nil, diags
	}

	fullNameVal, ok := fullNameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`full_name expected to be ovhtypes.TfStringValue, was: %T`, fullNameAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be ovhtypes.TfStringValue, was: %T`, nameAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return nil, diags
	}

	regionVal, ok := regionAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be ovhtypes.TfStringValue, was: %T`, regionAttribute))
	}

	splaAttribute, ok := attributes["spla"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`spla is missing from object`)

		return nil, diags
	}

	splaVal, ok := splaAttribute.(ovhtypes.TfBoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`spla expected to be ovhtypes.TfBoolValue, was: %T`, splaAttribute))
	}

	webInterfaceUrlAttribute, ok := attributes["web_interface_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`web_interface_url is missing from object`)

		return nil, diags
	}

	webInterfaceUrlVal, ok := webInterfaceUrlAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`web_interface_url expected to be ovhtypes.TfStringValue, was: %T`, webInterfaceUrlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return VCDOrganizationCurrentStateValue{
		ApiUrl:          apiUrlVal,
		BillingType:     billingTypeVal,
		Description:     descriptionVal,
		FullName:        fullNameVal,
		Name:            nameVal,
		Region:          regionVal,
		Spla:            splaVal,
		WebInterfaceUrl: webInterfaceUrlVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewVCDOrganizationCurrentStateValueNull() VCDOrganizationCurrentStateValue {
	return VCDOrganizationCurrentStateValue{
		state: attr.ValueStateNull,
	}
}

func NewVCDOrganizationCurrentStateValueUnknown() VCDOrganizationCurrentStateValue {
	return VCDOrganizationCurrentStateValue{
		state: attr.ValueStateUnknown,
	}
}

func NewVCDOrganizationCurrentStateValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (VCDOrganizationCurrentStateValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing VCDOrganizationCurrentStateValue Attribute Value",
				"While creating a VCDOrganizationCurrentStateValue value, a missing attribute value was detected. "+
					"A VCDOrganizationCurrentStateValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VCDOrganizationCurrentStateValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid VCDOrganizationCurrentStateValue Attribute Type",
				"While creating a VCDOrganizationCurrentStateValue value, an invalid attribute value was detected. "+
					"A VCDOrganizationCurrentStateValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VCDOrganizationCurrentStateValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("VCDOrganizationCurrentStateValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra VCDOrganizationCurrentStateValue Attribute Value",
				"While creating a VCDOrganizationCurrentStateValue value, an extra attribute value was detected. "+
					"A VCDOrganizationCurrentStateValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra VCDOrganizationCurrentStateValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewVCDOrganizationCurrentStateValueUnknown(), diags
	}

	apiUrlAttribute, ok := attributes["api_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_url is missing from object`)

		return NewVCDOrganizationCurrentStateValueUnknown(), diags
	}

	apiUrlVal, ok := apiUrlAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_url expected to be ovhtypes.TfStringValue, was: %T`, apiUrlAttribute))
	}

	billingTypeAttribute, ok := attributes["billing_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`billing_type is missing from object`)

		return NewVCDOrganizationCurrentStateValueUnknown(), diags
	}

	billingTypeVal, ok := billingTypeAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`billing_type expected to be ovhtypes.TfStringValue, was: %T`, billingTypeAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewVCDOrganizationCurrentStateValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be ovhtypes.TfStringValue, was: %T`, descriptionAttribute))
	}

	fullNameAttribute, ok := attributes["full_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`full_name is missing from object`)

		return NewVCDOrganizationCurrentStateValueUnknown(), diags
	}

	fullNameVal, ok := fullNameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`full_name expected to be ovhtypes.TfStringValue, was: %T`, fullNameAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewVCDOrganizationCurrentStateValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be ovhtypes.TfStringValue, was: %T`, nameAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return NewVCDOrganizationCurrentStateValueUnknown(), diags
	}

	regionVal, ok := regionAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be ovhtypes.TfStringValue, was: %T`, regionAttribute))
	}

	splaAttribute, ok := attributes["spla"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`spla is missing from object`)

		return NewVCDOrganizationCurrentStateValueUnknown(), diags
	}

	splaVal, ok := splaAttribute.(ovhtypes.TfBoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`spla expected to be ovhtypes.TfBoolValue, was: %T`, splaAttribute))
	}

	webInterfaceUrlAttribute, ok := attributes["web_interface_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`web_interface_url is missing from object`)

		return NewVCDOrganizationCurrentStateValueUnknown(), diags
	}

	webInterfaceUrlVal, ok := webInterfaceUrlAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`web_interface_url expected to be ovhtypes.TfStringValue, was: %T`, webInterfaceUrlAttribute))
	}

	if diags.HasError() {
		return NewVCDOrganizationCurrentStateValueUnknown(), diags
	}

	return VCDOrganizationCurrentStateValue{
		ApiUrl:          apiUrlVal,
		BillingType:     billingTypeVal,
		Description:     descriptionVal,
		FullName:        fullNameVal,
		Name:            nameVal,
		Region:          regionVal,
		Spla:            splaVal,
		WebInterfaceUrl: webInterfaceUrlVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewVCDOrganizationCurrentStateValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) VCDOrganizationCurrentStateValue {
	object, diags := NewVCDOrganizationCurrentStateValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewVCDOrganizationCurrentStateValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t VCDOrganizationCurrentStateType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewVCDOrganizationCurrentStateValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewVCDOrganizationCurrentStateValueUnknown(), nil
	}

	if in.IsNull() {
		return NewVCDOrganizationCurrentStateValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewVCDOrganizationCurrentStateValueMust(VCDOrganizationCurrentStateValue{}.AttributeTypes(ctx), attributes), nil
}

func (t VCDOrganizationCurrentStateType) ValueType(ctx context.Context) attr.Value {
	return VCDOrganizationCurrentStateValue{}
}

var _ basetypes.ObjectValuable = VCDOrganizationCurrentStateValue{}

type VCDOrganizationCurrentStateValue struct {
	ApiUrl          ovhtypes.TfStringValue `tfsdk:"api_url" json:"apiUrl"`
	BillingType     ovhtypes.TfStringValue `tfsdk:"billing_type" json:"billingType"`
	Description     ovhtypes.TfStringValue `tfsdk:"description" json:"description"`
	FullName        ovhtypes.TfStringValue `tfsdk:"full_name" json:"fullName"`
	Name            ovhtypes.TfStringValue `tfsdk:"name" json:"name"`
	Region          ovhtypes.TfStringValue `tfsdk:"region" json:"region"`
	Spla            ovhtypes.TfBoolValue   `tfsdk:"spla" json:"spla"`
	WebInterfaceUrl ovhtypes.TfStringValue `tfsdk:"web_interface_url" json:"webInterfaceUrl"`
	state           attr.ValueState
}

func (v *VCDOrganizationCurrentStateValue) UnmarshalJSON(data []byte) error {
	type JsonVCDOrganizationCurrentStateValue VCDOrganizationCurrentStateValue

	var tmp JsonVCDOrganizationCurrentStateValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.ApiUrl = tmp.ApiUrl
	v.BillingType = tmp.BillingType
	v.Description = tmp.Description
	v.FullName = tmp.FullName
	v.Name = tmp.Name
	v.Region = tmp.Region
	v.Spla = tmp.Spla
	v.WebInterfaceUrl = tmp.WebInterfaceUrl

	v.state = attr.ValueStateKnown

	return nil
}

func (v *VCDOrganizationCurrentStateValue) MergeWith(other *VCDOrganizationCurrentStateValue) {

	if (v.ApiUrl.IsUnknown() || v.ApiUrl.IsNull()) && !other.ApiUrl.IsUnknown() {
		v.ApiUrl = other.ApiUrl
	}

	if (v.BillingType.IsUnknown() || v.BillingType.IsNull()) && !other.BillingType.IsUnknown() {
		v.BillingType = other.BillingType
	}

	if (v.Description.IsUnknown() || v.Description.IsNull()) && !other.Description.IsUnknown() {
		v.Description = other.Description
	}

	if (v.FullName.IsUnknown() || v.FullName.IsNull()) && !other.FullName.IsUnknown() {
		v.FullName = other.FullName
	}

	if (v.Name.IsUnknown() || v.Name.IsNull()) && !other.Name.IsUnknown() {
		v.Name = other.Name
	}

	if (v.Region.IsUnknown() || v.Region.IsNull()) && !other.Region.IsUnknown() {
		v.Region = other.Region
	}

	if (v.Spla.IsUnknown() || v.Spla.IsNull()) && !other.Spla.IsUnknown() {
		v.Spla = other.Spla
	}

	if (v.WebInterfaceUrl.IsUnknown() || v.WebInterfaceUrl.IsNull()) && !other.WebInterfaceUrl.IsUnknown() {
		v.WebInterfaceUrl = other.WebInterfaceUrl
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v VCDOrganizationCurrentStateValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"apiUrl":          v.ApiUrl,
		"billingType":     v.BillingType,
		"description":     v.Description,
		"fullName":        v.FullName,
		"name":            v.Name,
		"region":          v.Region,
		"spla":            v.Spla,
		"webInterfaceUrl": v.WebInterfaceUrl,
	}
}
func (v VCDOrganizationCurrentStateValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 8)

	var val tftypes.Value
	var err error

	attrTypes["api_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["billing_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["full_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["region"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["spla"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["web_interface_url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 8)

		val, err = v.ApiUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["api_url"] = val

		val, err = v.BillingType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["billing_type"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.FullName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["full_name"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Region.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["region"] = val

		val, err = v.Spla.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["spla"] = val

		val, err = v.WebInterfaceUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["web_interface_url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v VCDOrganizationCurrentStateValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v VCDOrganizationCurrentStateValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v VCDOrganizationCurrentStateValue) String() string {
	return "VCDOrganizationCurrentStateValue"
}

func (v VCDOrganizationCurrentStateValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"api_url":           ovhtypes.TfStringType{},
			"billing_type":      ovhtypes.TfStringType{},
			"description":       ovhtypes.TfStringType{},
			"full_name":         ovhtypes.TfStringType{},
			"name":              ovhtypes.TfStringType{},
			"region":            ovhtypes.TfStringType{},
			"spla":              ovhtypes.TfBoolType{},
			"web_interface_url": ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"api_url":           v.ApiUrl,
			"billing_type":      v.BillingType,
			"description":       v.Description,
			"full_name":         v.FullName,
			"name":              v.Name,
			"region":            v.Region,
			"spla":              v.Spla,
			"web_interface_url": v.WebInterfaceUrl,
		})

	return objVal, diags
}

func (v VCDOrganizationCurrentStateValue) Equal(o attr.Value) bool {
	other, ok := o.(VCDOrganizationCurrentStateValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ApiUrl.Equal(other.ApiUrl) {
		return false
	}

	if !v.BillingType.Equal(other.BillingType) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.FullName.Equal(other.FullName) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Region.Equal(other.Region) {
		return false
	}

	if !v.Spla.Equal(other.Spla) {
		return false
	}

	if !v.WebInterfaceUrl.Equal(other.WebInterfaceUrl) {
		return false
	}

	return true
}

func (v VCDOrganizationCurrentStateValue) Type(ctx context.Context) attr.Type {
	return VCDOrganizationCurrentStateType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v VCDOrganizationCurrentStateValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"api_url":           ovhtypes.TfStringType{},
		"billing_type":      ovhtypes.TfStringType{},
		"description":       ovhtypes.TfStringType{},
		"full_name":         ovhtypes.TfStringType{},
		"name":              ovhtypes.TfStringType{},
		"region":            ovhtypes.TfStringType{},
		"spla":              ovhtypes.TfBoolType{},
		"web_interface_url": ovhtypes.TfStringType{},
	}
}

var _ basetypes.ObjectTypable = VCDOrganizationTargetSpecType{}

type VCDOrganizationTargetSpecType struct {
	basetypes.ObjectType
}

func (t VCDOrganizationTargetSpecType) Equal(o attr.Type) bool {
	other, ok := o.(VCDOrganizationTargetSpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t VCDOrganizationTargetSpecType) String() string {
	return "VCDOrganizationTargetSpecType"
}

func (t VCDOrganizationTargetSpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be ovhtypes.TfStringValue, was: %T`, descriptionAttribute))
	}

	fullNameAttribute, ok := attributes["full_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`full_name is missing from object`)

		return nil, diags
	}

	fullNameVal, ok := fullNameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`full_name expected to be ovhtypes.TfStringValue, was: %T`, fullNameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return VCDOrganizationTargetSpecValue{
		Description: descriptionVal,
		FullName:    fullNameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewVCDOrganizationTargetSpecValueNull() VCDOrganizationTargetSpecValue {
	return VCDOrganizationTargetSpecValue{
		state: attr.ValueStateNull,
	}
}

func NewVCDOrganizationTargetSpecValueUnknown() VCDOrganizationTargetSpecValue {
	return VCDOrganizationTargetSpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewVCDOrganizationTargetSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (VCDOrganizationTargetSpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing VCDOrganizationTargetSpecValue Attribute Value",
				"While creating a VCDOrganizationTargetSpecValue value, a missing attribute value was detected. "+
					"A VCDOrganizationTargetSpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VCDOrganizationTargetSpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid VCDOrganizationTargetSpecValue Attribute Type",
				"While creating a VCDOrganizationTargetSpecValue value, an invalid attribute value was detected. "+
					"A VCDOrganizationTargetSpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("VCDOrganizationTargetSpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("VCDOrganizationTargetSpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra VCDOrganizationTargetSpecValue Attribute Value",
				"While creating a VCDOrganizationTargetSpecValue value, an extra attribute value was detected. "+
					"A VCDOrganizationTargetSpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra VCDOrganizationTargetSpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewVCDOrganizationTargetSpecValueUnknown(), diags
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewVCDOrganizationTargetSpecValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be ovhtypes.TfStringValue, was: %T`, descriptionAttribute))
	}

	fullNameAttribute, ok := attributes["full_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`full_name is missing from object`)

		return NewVCDOrganizationTargetSpecValueUnknown(), diags
	}

	fullNameVal, ok := fullNameAttribute.(ovhtypes.TfStringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`full_name expected to be ovhtypes.TfStringValue, was: %T`, fullNameAttribute))
	}

	if diags.HasError() {
		return NewVCDOrganizationTargetSpecValueUnknown(), diags
	}

	return VCDOrganizationTargetSpecValue{
		Description: descriptionVal,
		FullName:    fullNameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewVCDOrganizationTargetSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) VCDOrganizationTargetSpecValue {
	object, diags := NewVCDOrganizationTargetSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewVCDOrganizationTargetSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t VCDOrganizationTargetSpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewVCDOrganizationTargetSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewVCDOrganizationTargetSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewVCDOrganizationTargetSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewVCDOrganizationTargetSpecValueMust(VCDOrganizationTargetSpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t VCDOrganizationTargetSpecType) ValueType(ctx context.Context) attr.Value {
	return VCDOrganizationTargetSpecValue{}
}

var _ basetypes.ObjectValuable = VCDOrganizationTargetSpecValue{}

type VCDOrganizationTargetSpecValue struct {
	Description ovhtypes.TfStringValue `tfsdk:"description" json:"description"`
	FullName    ovhtypes.TfStringValue `tfsdk:"full_name" json:"fullName"`
	state       attr.ValueState
}

func (v *VCDOrganizationTargetSpecValue) UnmarshalJSON(data []byte) error {
	type JsonVCDOrganizationTargetSpecValue VCDOrganizationTargetSpecValue

	var tmp JsonVCDOrganizationTargetSpecValue
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
	v.Description = tmp.Description
	v.FullName = tmp.FullName

	v.state = attr.ValueStateKnown

	return nil
}

func (v *VCDOrganizationTargetSpecValue) MergeWith(other *VCDOrganizationTargetSpecValue) {

	if (v.Description.IsUnknown() || v.Description.IsNull()) && !other.Description.IsUnknown() {
		v.Description = other.Description
	}

	if (v.FullName.IsUnknown() || v.FullName.IsNull()) && !other.FullName.IsUnknown() {
		v.FullName = other.FullName
	}

	if (v.state == attr.ValueStateUnknown || v.state == attr.ValueStateNull) && other.state != attr.ValueStateUnknown {
		v.state = other.state
	}
}

func (v VCDOrganizationTargetSpecValue) Attributes() map[string]attr.Value {
	return map[string]attr.Value{
		"description": v.Description,
		"fullName":    v.FullName,
	}
}
func (v VCDOrganizationTargetSpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["full_name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.FullName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["full_name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v VCDOrganizationTargetSpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v VCDOrganizationTargetSpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v VCDOrganizationTargetSpecValue) String() string {
	return "VCDOrganizationTargetSpecValue"
}

func (v VCDOrganizationTargetSpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"description": ovhtypes.TfStringType{},
			"full_name":   ovhtypes.TfStringType{},
		},
		map[string]attr.Value{
			"description": v.Description,
			"full_name":   v.FullName,
		})

	return objVal, diags
}

func (v VCDOrganizationTargetSpecValue) Equal(o attr.Value) bool {
	other, ok := o.(VCDOrganizationTargetSpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.FullName.Equal(other.FullName) {
		return false
	}

	return true
}

func (v VCDOrganizationTargetSpecValue) Type(ctx context.Context) attr.Type {
	return VCDOrganizationTargetSpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v VCDOrganizationTargetSpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"description": ovhtypes.TfStringType{},
		"full_name":   ovhtypes.TfStringType{},
	}
}
