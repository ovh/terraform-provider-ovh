---
# generated by https://github.com/hashicorp/terraform-plugin-docs
subcategory : "Cloud Project"
---

# ovh_cloud_project_region_storage

Create S3â„¢* compatible storage container
(* S3 is a trademark filed by Amazon Technologies,Inc. OVHcloud's service is not sponsored by, endorsed by, or otherwise affiliated with Amazon Technologies,Inc.)

## Example Usage

```hcl
resource "ovh_cloud_project_region_storage" "storage" {
  service_name = "<public cloud project ID>"
  region_name = "GRA"
  name = "my-storage"
  versioning = {
    status = "enabled"
  }
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `name` (String) Container name
- `region_name` (String) Region name
- `service_name` (String) Service name

### Optional

- `encryption` (Attributes) Encryption configuration (see [below for nested schema](#nestedatt--encryption))
- `limit` (Number) Limit the number of objects returned (1000 maximum, defaults to 1000)
- `marker` (String) Key to start with when listing objects
- `owner_id` (Number) Container owner user ID
- `prefix` (String) List objects whose key begins with this prefix
- `replication` (Attributes) Replication configuration (see [below for nested schema](#nestedatt--replication))
- `versioning` (Attributes) Versioning configuration (see [below for nested schema](#nestedatt--versioning))

### Read-Only

- `created_at` (String) The date and timestamp when the resource was created
- `objects` (Attributes List) Container objects (see [below for nested schema](#nestedatt--objects))
- `objects_count` (Number) Container total objects count
- `objects_size` (Number) Container total objects size (bytes)
- `region` (String) Container region
- `virtual_host` (String) Container virtual host

<a id="nestedatt--encryption"></a>
### Nested Schema for `encryption`

Optional:

- `sse_algorithm` (String) Encryption algorithm

<a id="nestedatt--replication"></a>
### Nested Schema for `replication`

Optional:

- `rules` (Attributes List) Replication rules (see [below for nested schema](#nestedatt--replication--rules))

<a id="nestedatt--replication--rules"></a>
### Nested Schema for `replication.rules`

Optional:

- `delete_marker_replication` (String) Delete marker replication
- `destination` (Attributes) Rule destination configuration (see [below for nested schema](#nestedatt--replication--rules--destination))
- `filter` (Attributes) Rule filters (see [below for nested schema](#nestedatt--replication--rules--filter))
- `id` (String) Rule ID
- `priority` (Number) Rule priority
- `status` (String) Rule status

<a id="nestedatt--replication--rules--destination"></a>
### Nested Schema for `replication.rules.destination`

Required:

- `name` (String) Destination bucket name
- `region` (String) Destination region

Optional:

- `storage_class` (String) Destination storage class

<a id="nestedatt--replication--rules--filter"></a>
### Nested Schema for `replication.rules.filter`

Optional:

- `prefix` (String) Prefix filter
- `tags` (Attributes List) Tags filter (see [below for nested schema](#nestedatt--replication--rules--filter--tags))

<a id="nestedatt--replication--rules--filter--tags"></a>
### Nested Schema for `replication.rules.filter.tags`

Required:

- `key` (String) Tag key
- `value` (String) Tag value

<a id="nestedatt--versioning"></a>
### Nested Schema for `versioning`

Optional:

- `status` (String) Versioning status


<a id="nestedatt--objects"></a>
### Nested Schema for `objects`

Read-Only:

- `etag` (String) ETag
- `is_delete_marker` (Boolean) Whether this object is a delete marker
- `is_latest` (Boolean) Whether this is the latest version of the object
- `key` (String) Key
- `last_modified` (String) Last modification date
- `size` (Number) Size (bytes)
- `storage_class` (String) Storage class
- `version_id` (String) Version ID of the object

## Import

A storage in a public cloud project can be imported using the `service_name`, `region_name` and `name` attributes.
Using the following configuration:

```hcl
import {
  id = "<service_name>/<region_name>/<name>"
  to = ovh_cloud_project_region_storage.storage
}
```

You can then run:

```bash
$ terraform plan -generate-config-out=storage.tf
$ terraform apply
```

The file `storage.tf` will then contain the imported resource's configuration, that can be copied next to the `import` block above.
See https://developer.hashicorp.com/terraform/language/import/generating-configuration for more details.