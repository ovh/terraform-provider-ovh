---
subcategory : "KMS"
---

# ovh_okms_service_key_jwk (Resource)

Import an existing key in the JWK format in an OVHcloud KMS.

## Example Usage

```hcl
resource "ovh_okms_service_key_jwk" "key_symetric" {
  okms_id    = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
  name       = "key_oct"
  keys       = [
    jsondecode(<<EOT
      {
        "k": "Wc7IgEZzWicZf1LTJUtA0w",
        "key_ops": ["encrypt", "decrypt"],
        "kty": "oct"
      }
    EOT
  )]
}

resource "ovh_okms_service_key_jwk" "key_rsa" {
  okms_id    = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
  name       = "key_rsa"
  keys       = [
    jsondecode(<<EOT
      {
        "key_ops": ["sign", "verify"],
        "kty": "RSA",
        "d": "UgaHfwn0kjl...",
        "dp": "SIrzLAa0Ll...",
        "dq": "aQv6Kg0Lw1...",
        "e": "AQAB",
        "n": "qrFKVDudlle...",
        "p": "7O4PCo_cWzu...",
        "q": "uG5pDYvV-eu...",
        "qi": "B5z00bGrZO..."
      }
    EOT
  )]
}

resource "ovh_okms_service_key_jwk" "key_ecdsa" {
  okms_id    = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
  name       = "key_ecdsa"
  keys = [
    jsondecode(<<EOT
      {
        "key_ops": ["sign", "verify"],
        "kty": "EC",
        "crv": "P-256",
        "alg": "ES256",
        "d": "SIy6AYrv5nGBLQsM7bg7WCbAPxHyUIVTaDyTxrCWPks",
        "x": "V7a79Iv0RdykDIzhJhu5OvkCFJ8rFkFm5r11qwR9QeY",
        "y": "RSUYb-RPSkF5al1D2fnxerahFpHCHtmJRAlUeS1Ehtw"
      }
    EOT
  )]
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `keys` (Attributes List) Set of JSON Web Keys to import (see [below for nested schema](#nestedatt--keys))
- `name` (String) Key name
- `okms_id` (String) Okms ID

### Optional

- `context` (String) Context of the key

### Read-Only

- `created_at` (String) Creation time of the key
- `deactivation_reason` (String) Key deactivation reason
- `iam` (Attributes) IAM resource metadata (see [below for nested schema](#nestedatt--iam))
- `id` (String) Key ID
- `size` (Number) Size of the key to be created
- `type` (String) Type of the key to be created
- `state` (String) State of the key

<a id="nestedatt--keys"></a>
### Nested Schema for `keys`

Required:

- `key_ops` (List of String) The operation for which the key is intended to be used
- `kty` (String) Key type parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC

Optional:

- `alg` (String) The algorithm intended to be used with the key
- `crv` (String) The cryptographic curve used with the key
- `d` (String, Sensitive) The RSA or EC private exponent
- `dp` (String, Sensitive) The RSA private key's first factor CRT exponent
- `dq` (String, Sensitive) The RSA private key's second factor CRT exponent
- `e` (String) The exponent value for the RSA public key
- `k` (String, Sensitive) The value of the symmetric (or other single-valued) key
- `n` (String) The modulus value for the RSA public key
- `p` (String, Sensitive) The first prime factor of the RSA private key
- `q` (String, Sensitive) The second prime factor of the RSA private key
- `qi` (String, Sensitive) The CRT coefficient of the second factor of the RSA private key
- `use` (String) The intended use of the public key
- `x` (String) The x coordinate for the Elliptic Curve point
- `y` (String) The y coordinate for the Elliptic Curve point

Read-Only:

- `kid` (String) key ID parameter used to match a specific key

<a id="nestedatt--iam"></a>
### Nested Schema for `iam`

Read-Only:

- `display_name` (String) Resource display name
- `id` (String) Unique identifier of the resource
- `tags` (Map of String) Resource tags. Tags that were internally computed are prefixed with ovh:
- `urn` (String) Unique resource name used in policies
